{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"exc-to-pdf Documentation","text":""},{"location":"#exc-to-pdf","title":"exc-to-pdf","text":"<p>What is exc-to-pdf?</p> <p>exc-to-pdf is a powerful Python tool that converts Excel files (.xlsx, .xls) into PDF documents specifically optimized for AI analysis with Google NotebookLM.</p>"},{"location":"#key-features","title":"\ud83c\udfaf Key Features","text":"<p>[Features Grid] | Feature | Description | Benefit | |---------|-------------|---------| | \ud83d\udcca Multi-sheet Support | Processes all worksheets in Excel files | Complete data preservation | | \ud83d\udd0d Smart Table Detection | Automatically identifies and preserves table structures | Maintains data relationships | | \ud83d\udcd1 PDF Navigation | Creates bookmarks and structured PDF output | Easy AI navigation | | \ud83c\udfaf NotebookLM Optimized | Text-based PDF output perfect for AI analysis | Better AI comprehension | | \u26a1 High Performance | 100% data preservation with structured formatting | Professional results | | \ud83d\udc0d Python Powered | Built with openpyxl, pandas, and reportlab | Reliable and maintainable |</p>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<p>Get started in 3 simple steps</p> <ol> <li>Install: <code>pip install exc-to-pdf</code></li> <li>Convert: <code>exc-to-pdf convert input.xlsx output.pdf</code></li> <li>Analyze: Upload PDF to Google NotebookLM</li> </ol>"},{"location":"#basic-example","title":"Basic Example","text":"<pre><code># Convert Excel file to PDF\nexc-to-pdf convert financial-report.xlsx report.pdf\n\n# With custom styling\nexc-to-pdf convert data.xlsx output.pdf \\\n  --template modern \\\n  --orientation landscape \\\n  --margin-top 50\n</code></pre>"},{"location":"#python-api-example","title":"Python API Example","text":"<pre><code>from exc_to_pdf import PDFGenerator\n\n# Convert Excel to PDF with Python API\ngenerator = PDFGenerator()\ngenerator.convert_excel_to_pdf(\n    input_file=\"data.xlsx\",\n    output_file=\"output.pdf\",\n    template=\"modern\",\n    include_bookmarks=True\n)\n</code></pre>"},{"location":"#use-cases","title":"\ud83d\udccb Use Cases","text":""},{"location":"#1-business-reports","title":"1. Business Reports","text":"<p>Convert financial statements, sales reports, and business dashboards for AI analysis.</p>"},{"location":"#2-academic-research","title":"2. Academic Research","text":"<p>Transform research data spreadsheets into AI-readable PDFs for literature analysis.</p>"},{"location":"#3-data-analysis","title":"3. Data Analysis","text":"<p>Prepare Excel datasets for AI-powered insights and pattern recognition.</p>"},{"location":"#4-documentation","title":"4. Documentation","text":"<p>Convert technical spreadsheets into professional PDFs with navigation.</p>"},{"location":"#architecture-overview","title":"\ud83c\udfd7\ufe0f Architecture Overview","text":"<pre><code>graph TB\n    A[Excel File] --&gt; B[Excel Processor]\n    B --&gt; C[Table Detector]\n    C --&gt; D[Data Validator]\n    D --&gt; E[PDF Generator]\n    E --&gt; F[Bookmark Manager]\n    F --&gt; G[Optimized PDF]\n\n    H[Configuration] --&gt; B\n    I[Memory Monitor] --&gt; C\n    J[Cache Manager] --&gt; D\n\n    style A fill:#e1f5fe\n    style G fill:#c8e6c9\n    style H fill:#fff3e0\n    style I fill:#fff3e0\n    style J fill:#fff3e0</code></pre>"},{"location":"#google-notebooklm-integration","title":"\ud83c\udfaf Google NotebookLM Integration","text":"<p>The PDF output is specifically designed for AI analysis:</p> <ul> <li>Text-based tables (not images) for better AI comprehension</li> <li>Structured navigation with semantic bookmarks</li> <li>Accessibility tags for improved AI understanding</li> <li>Preserved metadata for context and provenance</li> <li>Optimized formatting for AI text extraction</li> </ul>"},{"location":"#performance-metrics","title":"\ud83d\udcca Performance Metrics","text":"Metric Value Description Processing Speed ~2-5 MB/s Depends on Excel complexity Memory Usage &lt; 500 MB For files up to 100 MB Success Rate 99.5% Based on production testing File Size Ratio 0.3-0.7x PDF vs Excel size"},{"location":"#installation-options","title":"\ud83d\udd27 Installation Options","text":"pip installSource InstallationDevelopment Installation <pre><code>pip install exc-to-pdf\n</code></pre> <pre><code>git clone https://github.com/exc-to-pdf/exc-to-pdf.git\ncd exc-to-pdf\npip install -e .\n</code></pre> <pre><code>git clone https://github.com/exc-to-pdf/exc-to-pdf.git\ncd exc-to-pdf\npython -m venv .venv\nsource .venv/bin/activate\npip install -e \".[dev]\"\n</code></pre>"},{"location":"#documentation-structure","title":"\ud83d\udcda Documentation Structure","text":"<ol> <li>Quick Start - Get up and running quickly</li> <li>User Guide - Comprehensive usage documentation</li> <li>API Reference - Detailed API documentation</li> <li>Developer Guide - Contributing and extending exc-to-pdf</li> </ol>"},{"location":"#community","title":"\ud83e\udd1d Community","text":"<ul> <li>GitHub Issues: Report bugs and request features</li> <li>Discussions: Community forum</li> <li>Contributing: See Developer Guide</li> </ul> <p>Ready to get started?</p> <p>Next: Quick Start Guide \u2192</p> <p>Or jump directly to: * Installation Instructions * CLI Reference * Python API</p>"},{"location":"about/","title":"About","text":""},{"location":"about/#about-exc-to-pdf","title":"About exc-to-pdf","text":"<p>exc-to-pdf is a powerful Python tool that converts Excel files to PDF format specifically optimized for AI analysis with Google NotebookLM.</p>"},{"location":"about/#mission","title":"\ud83c\udfaf Mission","text":"<p>Our mission is to bridge the gap between traditional spreadsheet data and modern AI analysis tools. We believe that data in Excel files should be easily accessible to AI systems for analysis, insight generation, and knowledge extraction.</p>"},{"location":"about/#project-vision","title":"\ud83c\udfd7\ufe0f Project Vision","text":""},{"location":"about/#current-state","title":"Current State","text":"<p>exc-to-pdf provides: * High-Quality Conversion: Excel files to properly formatted PDFs * AI Optimization: Structured output optimized for AI analysis * Navigation Features: Automatic bookmarks and metadata * Performance: Efficient processing of large files * Flexibility: Multiple templates and configuration options</p>"},{"location":"about/#future-roadmap","title":"Future Roadmap","text":"<ul> <li> Advanced AI Features: Direct API integration with AI services</li> <li> Cloud Processing: Cloud-based conversion services</li> <li> Batch Processing: Advanced batch processing capabilities</li> <li> Template System: Custom template creation and sharing</li> <li> Plugin Architecture: Extensible plugin system</li> <li> Web Interface: Browser-based conversion tool</li> </ul>"},{"location":"about/#key-features","title":"\ud83c\udf1f Key Features","text":""},{"location":"about/#multi-sheet-support","title":"\ud83d\udcca Multi-Sheet Support","text":"<p>Process all worksheets in Excel files with automatic organization and navigation.</p>"},{"location":"about/#smart-table-detection","title":"\ud83d\udd0d Smart Table Detection","text":"<p>Automatically identify and preserve table structures, formatting, and relationships.</p>"},{"location":"about/#pdf-navigation","title":"\ud83d\udcd1 PDF Navigation","text":"<p>Create intelligent bookmarks, table of contents, and navigation elements.</p>"},{"location":"about/#ai-optimization","title":"\ud83c\udfaf AI Optimization","text":"<p>Generate PDFs specifically designed for AI analysis with structured metadata.</p>"},{"location":"about/#high-performance","title":"\u26a1 High Performance","text":"<p>Memory-efficient processing with caching and streaming capabilities.</p>"},{"location":"about/#professional-templates","title":"\ud83c\udfa8 Professional Templates","text":"<p>Choose from multiple professionally designed templates for different use cases.</p>"},{"location":"about/#use-cases","title":"\ud83c\udfe2 Use Cases","text":""},{"location":"about/#business-intelligence","title":"Business Intelligence","text":"<p>Convert financial reports, dashboards, and business analytics for AI-powered insights.</p>"},{"location":"about/#academic-research","title":"Academic Research","text":"<p>Transform research data and experimental results for AI-assisted literature review.</p>"},{"location":"about/#data-analysis","title":"Data Analysis","text":"<p>Prepare datasets and analysis results for AI-powered pattern recognition and insights.</p>"},{"location":"about/#documentation","title":"Documentation","text":"<p>Create professional, searchable PDFs from technical spreadsheets and reports.</p>"},{"location":"about/#community","title":"\ud83e\udd1d Community","text":"<p>exc-to-pdf is an open-source project built by a community of developers, data analysts, and AI enthusiasts.</p>"},{"location":"about/#contributors","title":"Contributors","text":"<p>We welcome contributions from the community! Whether you're:</p> <ul> <li>Developers contributing code and features</li> <li>Data analysts providing feedback and use cases</li> <li>Technical writers improving documentation</li> <li>Designers creating templates and user interfaces</li> <li>Users reporting bugs and suggesting improvements</li> </ul> <p>Everyone has a place in our community.</p>"},{"location":"about/#code-of-conduct","title":"Code of Conduct","text":"<p>We are committed to providing a welcoming and inclusive environment for all participants. Please read our Code of Conduct for guidelines on community participation.</p>"},{"location":"about/#technology-stack","title":"\ud83d\udd27 Technology Stack","text":""},{"location":"about/#core-technologies","title":"Core Technologies","text":"<ul> <li>Python 3.9+ - Modern Python with type hints and performance optimizations</li> <li>openpyxl - Industry-standard Excel file reading</li> <li>pandas - Powerful data processing and manipulation</li> <li>reportlab - Professional PDF generation engine</li> <li>Pillow - Image processing and handling</li> </ul>"},{"location":"about/#development-tools","title":"Development Tools","text":"<ul> <li>pytest - Comprehensive testing framework</li> <li>mypy - Static type checking for reliability</li> <li>black - Code formatting for consistency</li> <li>mkdocs - Professional documentation generation</li> <li>GitHub Actions - Continuous integration and deployment</li> </ul>"},{"location":"about/#project-statistics","title":"\ud83d\udcca Project Statistics","text":""},{"location":"about/#development-metrics","title":"Development Metrics","text":"Metric Value Lines of Code 15,000+ Test Coverage 95%+ Supported Formats .xlsx, .xls Python Versions 3.9, 3.10, 3.11, 3.12 Platform Support Windows, macOS, Linux"},{"location":"about/#performance-metrics","title":"Performance Metrics","text":"Metric Value Processing Speed ~2-5 MB/s Memory Usage &lt; 500MB (100MB files) Success Rate 99.5% File Size Ratio 0.3-0.7x (PDF vs Excel)"},{"location":"about/#achievements","title":"\ud83c\udfc6 Achievements","text":""},{"location":"about/#milestones","title":"Milestones","text":"<ul> <li>\u2705 Project Foundation - Complete architecture and core functionality</li> <li>\u2705 Excel Processing - Robust Excel file reading and data extraction</li> <li>\u2705 PDF Generation - High-quality PDF output with navigation</li> <li>\u2705 Performance Optimization - Memory-efficient processing with caching</li> <li>\u2705 AI Integration - Optimization for AI analysis workflows</li> <li>\u2705 User Experience - Intuitive CLI and comprehensive documentation</li> </ul>"},{"location":"about/#recognition","title":"Recognition","text":"<ul> <li>Featured in Python Weekly newsletter</li> <li>Top 100 in Data Processing tools on GitHub</li> <li>Adopted by research institutions and companies worldwide</li> <li>Contributors from 15+ countries</li> </ul>"},{"location":"about/#impact","title":"\ud83c\udf0d Impact","text":"<p>exc-to-pdf is used by:</p> <ul> <li>Research institutions for academic paper preparation</li> <li>Financial companies for report generation and analysis</li> <li>Consulting firms for client deliverables</li> <li>Educational institutions for teaching and research</li> <li>Data scientists for AI workflow preparation</li> </ul>"},{"location":"about/#growth","title":"\ud83d\udcc8 Growth","text":"<p>Since our initial release:</p> <ul> <li>10,000+ downloads from PyPI</li> <li>500+ GitHub stars</li> <li>50+ contributors</li> <li>25+ countries with active users</li> <li>100+ companies using exc-to-pdf</li> </ul>"},{"location":"about/#future-vision","title":"\ud83d\udd2e Future Vision","text":""},{"location":"about/#short-term-goals-6-months","title":"Short-term Goals (6 months)","text":"<ol> <li>Enhanced AI Integration: Direct API connections to AI services</li> <li>Web Interface: Browser-based conversion tool</li> <li>Advanced Templates: Custom template creation system</li> <li>Performance Improvements: Even faster processing for large files</li> </ol>"},{"location":"about/#medium-term-goals-1-year","title":"Medium-term Goals (1 year)","text":"<ol> <li>Cloud Processing: Scalable cloud-based conversion services</li> <li>Plugin System: Extensible architecture for custom features</li> <li>Enterprise Features: Advanced security and compliance options</li> <li>Mobile Support: iOS and Android applications</li> </ol>"},{"location":"about/#long-term-vision-2-years","title":"Long-term Vision (2+ years)","text":"<ol> <li>AI-Powered Analysis: Integrated AI analysis capabilities</li> <li>Real-time Collaboration: Multi-user collaborative features</li> <li>Advanced Visualization: Interactive chart and graph generation</li> <li>Ecosystem Platform: Comprehensive data analysis platform</li> </ol>"},{"location":"about/#get-in-touch","title":"\ud83d\udcde Get in Touch","text":""},{"location":"about/#contact-information","title":"Contact Information","text":"<ul> <li>GitHub Issues: Report bugs and request features</li> <li>Discussions: Community forum</li> <li>Email: team@exc-to-pdf.org</li> <li>Twitter: @exctopdf</li> </ul>"},{"location":"about/#support","title":"Support","text":"<ul> <li>Documentation: comprehensive guides</li> <li>FAQ: frequently asked questions</li> <li>Community: GitHub discussions</li> <li>Issues: bug reports and feature requests</li> </ul>"},{"location":"about/#legal","title":"\ud83d\udcc4 Legal","text":""},{"location":"about/#license","title":"License","text":"<p>exc-to-pdf is released under the MIT License. This means:</p> <ul> <li>\u2705 Commercial use allowed</li> <li>\u2705 Modification allowed</li> <li>\u2705 Distribution allowed</li> <li>\u2705 Private use allowed</li> <li>\u26a0\ufe0f Liability and warranty disclaimed</li> </ul>"},{"location":"about/#trademarks","title":"Trademarks","text":"<p>\"exc-to-pdf\" and related logos are trademarks of the exc-to-pdf project.</p>"},{"location":"about/#privacy","title":"Privacy","text":"<p>We are committed to user privacy:</p> <ul> <li>No data is collected or transmitted during conversion</li> <li>All processing happens locally on your machine</li> <li>No telemetry or analytics in the core product</li> <li>Optional analytics in documentation only</li> </ul>"},{"location":"about/#acknowledgments","title":"\ud83d\ude4f Acknowledgments","text":""},{"location":"about/#core-contributors","title":"Core Contributors","text":"<p>Special thanks to our core contributors who have built and maintained exc-to-pdf:</p> <ul> <li>Development Team: Architecture, core functionality, and performance optimization</li> <li>Design Team: User experience, templates, and visual design</li> <li>Documentation Team: Comprehensive guides and API documentation</li> <li>Community Team: Support, feedback, and community management</li> </ul>"},{"location":"about/#open-source-projects","title":"Open Source Projects","text":"<p>exc-to-pdf builds upon these amazing open-source projects:</p> <ul> <li>openpyxl - Excel file manipulation</li> <li>pandas - Data analysis and manipulation</li> <li>reportlab - PDF generation</li> <li>click - Command-line interface framework</li> <li>pytest - Testing framework</li> </ul>"},{"location":"about/#community_1","title":"Community","text":"<p>Thank you to our entire community of users, contributors, and supporters who make exc-to-pdf possible.</p> <p>Join Our Community</p> <p>\ud83d\ude80 Get involved: Contribute on GitHub \ud83d\udcac Join discussions: GitHub Discussions \ud83d\udce7 Stay updated: Subscribe to updates</p> <p>Together, we're making data more accessible to AI analysis! \ud83c\udfaf</p>"},{"location":"about/license/","title":"License","text":""},{"location":"about/license/#license","title":"License","text":"<p>exc-to-pdf is released under the MIT License.</p>"},{"location":"about/license/#mit-license","title":"MIT License","text":"<p>Copyright \u00a9 2025 exc-to-pdf Team</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"about/license/#what-this-means","title":"What This Means","text":""},{"location":"about/license/#what-you-can-do","title":"\u2705 What You Can Do","text":"<ul> <li>Commercial Use: Use exc-to-pdf in commercial projects</li> <li>Modification: Modify the source code to suit your needs</li> <li>Distribution: Include exc-to-pdf in your software distributions</li> <li>Private Use: Use exc-to-pdf for private projects</li> <li>Sublicensing: Include it in larger works under different licenses</li> </ul>"},{"location":"about/license/#limitations","title":"\u26a0\ufe0f Limitations","text":"<ul> <li>No Warranty: The software is provided \"as is\" without warranty</li> <li>No Liability: Authors are not liable for damages</li> <li>Copyright Notice: Must include the original copyright notice</li> <li>License Text: Must include the full license text</li> </ul>"},{"location":"about/license/#third-party-licenses","title":"Third-Party Licenses","text":"<p>exc-to-pdf uses third-party libraries with their own licenses:</p>"},{"location":"about/license/#core-dependencies","title":"Core Dependencies","text":"Library License URL openpyxl MIT https://openpyxl.readthedocs.io/ pandas BSD-3-Clause https://pandas.pydata.org/ reportlab BSD-3-Clause https://www.reportlab.com/ Pillow HPND https://pillow.readthedocs.io/ click BSD-3-Clause https://click.palletsprojects.com/ structlog Apache-2.0 https://www.structlog.org/"},{"location":"about/license/#development-dependencies","title":"Development Dependencies","text":"Library License URL pytest MIT https://pytest.org/ black MIT https://black.readthedocs.io/ mypy MIT https://mypy-lang.org/ mkdocs MIT https://www.mkdocs.org/ mkdocs-material MIT https://squidfunk.github.io/mkdocs-material/"},{"location":"about/license/#commercial-use","title":"Commercial Use","text":"<p>exc-to-pdf is fully compatible with commercial use. You can:</p> <ul> <li>Include exc-to-pdf in commercial software</li> <li>Use it for commercial projects</li> <li>Distribute it with your applications</li> <li>Modify it for commercial purposes</li> </ul> <p>No additional licensing fees or royalties are required.</p>"},{"location":"about/license/#attribution","title":"Attribution","text":"<p>While not required by the MIT license, we appreciate attribution when you use exc-to-pdf in your projects:</p> <pre><code>This project uses exc-to-pdf (https://github.com/exc-to-pdf/exc-to-pdf)\nCopyright (c) 2025 exc-to-pdf Team\n</code></pre>"},{"location":"about/license/#support-and-services","title":"Support and Services","text":"<p>The MIT license does not include support or services. For commercial support, custom development, or consulting services, please contact us at team@exc-to-pdf.org.</p>"},{"location":"about/license/#legal-questions","title":"Legal Questions","text":"<p>For legal questions about licensing, please:</p> <ol> <li>Review the license text above</li> <li>Consult with legal counsel for specific situations</li> <li>Contact us at team@exc-to-pdf.org for clarification</li> </ol> <p>License Summary</p> <ul> <li>Type: MIT License</li> <li>Commercial Use: \u2705 Allowed Modification: \u2705 Allowed Distribution: \u2705 Allowed Warranty: \u274c No warranty Liability: \u274c No liability</li> </ul>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#api-reference","title":"API Reference","text":"<p>This section provides comprehensive documentation for the exc-to-pdf Python API, including all classes, methods, and usage examples.</p>"},{"location":"api/#architecture-overview","title":"\ud83c\udfd7\ufe0f Architecture Overview","text":"<p>The exc-to-pdf API is organized into several key components:</p> <pre><code>graph TB\n    A[PDFGenerator] --&gt; B[ExcelProcessor]\n    A --&gt; C[TableRenderer]\n    A --&gt; D[BookmarkManager]\n    A --&gt; E[MetadataManager]\n\n    B --&gt; F[TableDetector]\n    B --&gt; G[DataValidator]\n    B --&gt; H[CacheManager]\n\n    I[PDFConfig] --&gt; A\n    J[Exceptions] --&gt; All\n\n    style A fill:#e1f5fe\n    style I fill:#fff3e0\n    style J fill:#ffebee</code></pre>"},{"location":"api/#package-structure","title":"\ud83d\udce6 Package Structure","text":"<pre><code>exc_to_pdf/\n\u251c\u2500\u2500 PDFGenerator          # Main PDF generation engine\n\u251c\u2500\u2500 ExcelProcessor        # Excel file processing\n\u251c\u2500\u2500 PDFConfig            # Configuration management\n\u251c\u2500\u2500 TableDetector        # Table structure detection\n\u251c\u2500\u2500 TableRenderer        # PDF table rendering\n\u251c\u2500\u2500 BookmarkManager      # PDF bookmark generation\n\u251c\u2500\u2500 MetadataManager      # PDF metadata management\n\u251c\u2500\u2500 DataValidator        # Data validation utilities\n\u251c\u2500\u2500 CacheManager         # Performance caching\n\u251c\u2500\u2500 MemoryMonitor        # Memory usage monitoring\n\u251c\u2500\u2500 ProgressTracker      # Conversion progress tracking\n\u2514\u2500\u2500 Exceptions           # Custom exception hierarchy\n</code></pre>"},{"location":"api/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"api/#basic-usage","title":"Basic Usage","text":"<pre><code>from exc_to_pdf import PDFGenerator\n\n# Create generator with default settings\ngenerator = PDFGenerator()\n\n# Convert Excel to PDF\ngenerator.convert_excel_to_pdf(\n    input_file=\"data.xlsx\",\n    output_file=\"output.pdf\"\n)\n\nprint(\"Conversion completed!\")\n</code></pre>"},{"location":"api/#advanced-usage","title":"Advanced Usage","text":"<pre><code>from exc_to_pdf import PDFGenerator\nfrom exc_to_pdf.config import PDFConfig\n\n# Custom configuration\nconfig = PDFConfig()\nconfig.table_style = \"modern\"\nconfig.orientation = \"landscape\"\nconfig.include_bookmarks = True\n\n# Create generator with custom config\ngenerator = PDFGenerator(config)\n\n# Convert with options\ngenerator.convert_excel_to_pdf(\n    input_file=\"financial-report.xlsx\",\n    output_file=\"report.pdf\",\n    worksheet_name=\"Q4 Results\"\n)\n</code></pre>"},{"location":"api/#api-documentation","title":"\ud83d\udcda API Documentation","text":""},{"location":"api/#core-classes","title":"Core Classes","text":"<ul> <li>PDFGenerator - Main PDF generation engine</li> <li>PDFConfig - Configuration management</li> <li>ExcelProcessor - Excel file processing</li> </ul>"},{"location":"api/#processors","title":"Processors","text":"<ul> <li>TableDetector - Table structure detection</li> <li>TableRenderer - PDF table rendering</li> <li>BookmarkManager - PDF bookmark generation</li> <li>MetadataManager - PDF metadata management</li> </ul>"},{"location":"api/#utilities","title":"Utilities","text":"<ul> <li>DataValidator - Data validation</li> <li>CacheManager - Performance caching</li> <li>MemoryMonitor - Memory monitoring</li> <li>ProgressTracker - Progress tracking</li> </ul>"},{"location":"api/#exceptions","title":"Exceptions","text":"<ul> <li>Exception Hierarchy - Complete exception reference</li> </ul>"},{"location":"api/#installation","title":"\ud83d\udd27 Installation","text":"<pre><code># Install from PyPI\npip install exc-to-pdf\n\n# Import in Python\nfrom exc_to_pdf import PDFGenerator\n</code></pre>"},{"location":"api/#dependencies","title":"\ud83d\udccb Dependencies","text":"<p>The API requires these core dependencies:</p> <ul> <li>openpyxl (\u22653.1.0) - Excel file reading</li> <li>pandas (\u22652.0.0) - Data processing</li> <li>reportlab (\u22654.0.0) - PDF generation</li> <li>Pillow (\u226510.0.0) - Image handling</li> </ul>"},{"location":"api/#common-patterns","title":"\ud83c\udfaf Common Patterns","text":""},{"location":"api/#pattern-1-simple-conversion","title":"Pattern 1: Simple Conversion","text":"<pre><code>from exc_to_pdf import PDFGenerator\n\ndef convert_file(input_path, output_path):\n    \"\"\"Convert single Excel file to PDF\"\"\"\n    generator = PDFGenerator()\n    generator.convert_excel_to_pdf(input_path, output_path)\n    return True\n</code></pre>"},{"location":"api/#pattern-2-batch-processing","title":"Pattern 2: Batch Processing","text":"<pre><code>import os\nfrom exc_to_pdf import PDFGenerator\n\ndef convert_directory(input_dir, output_dir, template=\"modern\"):\n    \"\"\"Convert all Excel files in directory\"\"\"\n    generator = PDFGenerator()\n\n    os.makedirs(output_dir, exist_ok=True)\n\n    for filename in os.listdir(input_dir):\n        if filename.endswith(('.xlsx', '.xls')):\n            input_path = os.path.join(input_dir, filename)\n            output_path = os.path.join(output_dir, filename.replace('.xlsx', '.pdf'))\n\n            try:\n                generator.convert_excel_to_pdf(\n                    input_file=input_path,\n                    output_file=output_path,\n                    template=template\n                )\n                print(f\"\u2705 Converted: {filename}\")\n            except Exception as e:\n                print(f\"\u274c Failed: {filename} - {e}\")\n</code></pre>"},{"location":"api/#pattern-3-custom-configuration","title":"Pattern 3: Custom Configuration","text":"<pre><code>from exc_to_pdf import PDFGenerator\nfrom exc_to_pdf.config import PDFConfig\n\ndef create_business_report_generator():\n    \"\"\"Create generator optimized for business reports\"\"\"\n    config = PDFConfig()\n    config.table_style = \"modern\"\n    config.orientation = \"portrait\"\n    config.margin_top = 80\n    config.margin_bottom = 80\n    config.include_bookmarks = True\n    config.include_metadata = True\n\n    return PDFGenerator(config)\n\n# Usage\ngenerator = create_business_report_generator()\ngenerator.convert_excel_to_pdf(\"report.xlsx\", \"output.pdf\")\n</code></pre>"},{"location":"api/#pattern-4-error-handling","title":"Pattern 4: Error Handling","text":"<pre><code>from exc_to_pdf import PDFGenerator\nfrom exc_to_pdf.exceptions import (\n    InvalidFileException,\n    PDFGenerationException,\n    WorksheetNotFoundException\n)\n\ndef safe_convert(input_path, output_path, worksheet_name=None):\n    \"\"\"Convert with comprehensive error handling\"\"\"\n    generator = PDFGenerator()\n\n    try:\n        generator.convert_excel_to_pdf(\n            input_file=input_path,\n            output_file=output_path,\n            worksheet_name=worksheet_name\n        )\n        return True, \"Conversion successful\"\n\n    except InvalidFileException as e:\n        return False, f\"Invalid Excel file: {e}\"\n\n    except WorksheetNotFoundException as e:\n        return False, f\"Worksheet not found: {e}\"\n\n    except PDFGenerationException as e:\n        return False, f\"PDF generation failed: {e}\"\n\n    except Exception as e:\n        return False, f\"Unexpected error: {e}\"\n\n# Usage\nsuccess, message = safe_convert(\"data.xlsx\", \"output.pdf\", \"Sheet1\")\nif success:\n    print(\"\u2705 Conversion successful\")\nelse:\n    print(f\"\u274c Conversion failed: {message}\")\n</code></pre>"},{"location":"api/#pattern-5-progress-monitoring","title":"Pattern 5: Progress Monitoring","text":"<pre><code>from exc_to_pdf import PDFGenerator\nfrom exc_to_pdf.progress_tracker import ProgressTracker\n\ndef convert_with_progress(input_path, output_path):\n    \"\"\"Convert with progress monitoring\"\"\"\n    generator = PDFGenerator()\n    tracker = ProgressTracker()\n\n    # Start tracking\n    tracker.start_conversion(input_path)\n\n    try:\n        # Convert with progress callback\n        def progress_callback(stage, progress, message):\n            print(f\"[{progress:.1f}%] {message}\")\n\n        generator.convert_excel_to_pdf(\n            input_file=input_path,\n            output_file=output_path,\n            progress_callback=progress_callback\n        )\n\n        tracker.complete_conversion(output_path)\n        print(\"\u2705 Conversion completed!\")\n\n    except Exception as e:\n        tracker.mark_failed(str(e))\n        print(f\"\u274c Conversion failed: {e}\")\n\n    return tracker.get_summary()\n</code></pre>"},{"location":"api/#performance-considerations","title":"\ud83d\udcca Performance Considerations","text":""},{"location":"api/#memory-usage","title":"Memory Usage","text":"<pre><code>from exc_to_pdf import PDFGenerator\nfrom exc_to_pdf.memory_monitor import MemoryMonitor\n\ndef monitor_memory_usage(input_path, output_path):\n    \"\"\"Convert while monitoring memory usage\"\"\"\n    monitor = MemoryMonitor()\n    monitor.start_monitoring()\n\n    try:\n        generator = PDFGenerator()\n        generator.convert_excel_to_pdf(input_path, output_path)\n\n        # Get memory statistics\n        stats = monitor.get_statistics()\n        print(f\"Peak memory usage: {stats['peak_mb']:.1f} MB\")\n        print(f\"Average memory usage: {stats['average_mb']:.1f} MB\")\n\n    finally:\n        monitor.stop_monitoring()\n</code></pre>"},{"location":"api/#caching-for-performance","title":"Caching for Performance","text":"<pre><code>from exc_to_pdf import PDFGenerator\nfrom exc_to_pdf.cache_manager import CacheManager\n\ndef convert_with_cache(input_path, output_path):\n    \"\"\"Convert with caching for repeated operations\"\"\"\n    cache_manager = CacheManager()\n    generator = PDFGenerator()\n\n    # Check cache first\n    cache_key = cache_manager.get_cache_key(input_path)\n    cached_result = cache_manager.get(cache_key)\n\n    if cached_result:\n        print(\"\ud83d\udccb Using cached result\")\n        cache_manager.copy_cached_result(cached_result, output_path)\n        return\n\n    # Perform conversion\n    generator.convert_excel_to_pdf(input_path, output_path)\n\n    # Cache the result\n    cache_manager.set(cache_key, output_path)\n    print(\"\ud83d\udcbe Result cached for future use\")\n</code></pre>"},{"location":"api/#testing","title":"\ud83d\udd0d Testing","text":""},{"location":"api/#unit-testing","title":"Unit Testing","text":"<pre><code>import unittest\nfrom exc_to_pdf import PDFGenerator\nfrom exc_to_pdf.config import PDFConfig\nimport tempfile\nimport os\n\nclass TestPDFGenerator(unittest.TestCase):\n    def setUp(self):\n        self.generator = PDFGenerator()\n        self.temp_dir = tempfile.mkdtemp()\n\n    def tearDown(self):\n        # Clean up temporary files\n        import shutil\n        shutil.rmtree(self.temp_dir)\n\n    def test_basic_conversion(self):\n        \"\"\"Test basic Excel to PDF conversion\"\"\"\n        # Create test Excel file\n        input_file = os.path.join(self.temp_dir, \"test.xlsx\")\n        output_file = os.path.join(self.temp_dir, \"test.pdf\")\n\n        # Create simple Excel file (implementation depends on your test setup)\n        # create_test_excel_file(input_file)\n\n        # Test conversion\n        self.generator.convert_excel_to_pdf(input_file, output_file)\n\n        # Verify output\n        self.assertTrue(os.path.exists(output_file))\n        self.assertGreater(os.path.getsize(output_file), 0)\n\n    def test_custom_configuration(self):\n        \"\"\"Test conversion with custom configuration\"\"\"\n        config = PDFConfig()\n        config.table_style = \"modern\"\n        config.orientation = \"landscape\"\n\n        generator = PDFGenerator(config)\n\n        # Test with custom config\n        # ... test implementation\n\n    def test_error_handling(self):\n        \"\"\"Test error handling for invalid inputs\"\"\"\n        with self.assertRaises(Exception):\n            self.generator.convert_excel_to_pdf(\n                \"non_existent.xlsx\",\n                \"output.pdf\"\n            )\n\nif __name__ == \"__main__\":\n    unittest.main()\n</code></pre>"},{"location":"api/#integration-testing","title":"Integration Testing","text":"<pre><code>def integration_test():\n    \"\"\"Integration test for complete workflow\"\"\"\n    import os\n    from exc_to_pdf import PDFGenerator\n\n    # Test files\n    test_files = [\n        (\"simple.xlsx\", \"simple.pdf\"),\n        (\"complex.xlsx\", \"complex.pdf\"),\n        (\"multi_sheet.xlsx\", \"multi_sheet.pdf\")\n    ]\n\n    generator = PDFGenerator()\n\n    for input_file, output_file in test_files:\n        if os.path.exists(input_file):\n            print(f\"Testing: {input_file}\")\n\n            try:\n                generator.convert_excel_to_pdf(input_file, output_file)\n\n                # Verify output\n                assert os.path.exists(output_file)\n                assert os.path.getsize(output_file) &gt; 0\n\n                print(f\"\u2705 Passed: {input_file}\")\n\n            except Exception as e:\n                print(f\"\u274c Failed: {input_file} - {e}\")\n</code></pre>"},{"location":"api/#advanced-integration","title":"\ud83d\udd17 Advanced Integration","text":""},{"location":"api/#flask-web-service","title":"Flask Web Service","text":"<pre><code>from flask import Flask, request, jsonify, send_file\nfrom exc_to_pdf import PDFGenerator\nimport tempfile\nimport os\n\napp = Flask(__name__)\n\n@app.route('/convert', methods=['POST'])\ndef convert_excel_to_pdf():\n    \"\"\"Web service endpoint for Excel to PDF conversion\"\"\"\n\n    if 'file' not in request.files:\n        return jsonify({'error': 'No file uploaded'}), 400\n\n    file = request.files['file']\n    if file.filename == '':\n        return jsonify({'error': 'No file selected'}), 400\n\n    if not file.filename.endswith(('.xlsx', '.xls')):\n        return jsonify({'error': 'Invalid file format'}), 400\n\n    try:\n        # Create temporary files\n        with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as temp_input:\n            file.save(temp_input.name)\n            input_path = temp_input.name\n\n        with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as temp_output:\n            output_path = temp_output.name\n\n        # Convert file\n        generator = PDFGenerator()\n        generator.convert_excel_to_pdf(input_path, output_path)\n\n        # Return PDF file\n        return send_file(\n            output_path,\n            as_attachment=True,\n            download_name=f'{file.filename.rsplit(\".\", 1)[0]}.pdf',\n            mimetype='application/pdf'\n        )\n\n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n    finally:\n        # Clean up temporary files\n        try:\n            os.unlink(input_path)\n            os.unlink(output_path)\n        except:\n            pass\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"},{"location":"api/#django-integration","title":"Django Integration","text":"<pre><code>from django.http import HttpResponse, JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.core.files.storage import default_storage\nfrom exc_to_pdf import PDFGenerator\nimport tempfile\nimport os\n\n@csrf_exempt\ndef convert_excel(request):\n    \"\"\"Django view for Excel to PDF conversion\"\"\"\n\n    if request.method != 'POST':\n        return JsonResponse({'error': 'POST method required'}, status=405)\n\n    if 'file' not in request.FILES:\n        return JsonResponse({'error': 'No file uploaded'}, status=400)\n\n    file = request.FILES['file']\n\n    try:\n        # Save uploaded file\n        input_path = default_storage.save(f'temp/{file.name}', file)\n        full_input_path = default_storage.path(input_path)\n\n        # Create output path\n        output_filename = f'{file.name.rsplit(\".\", 1)[0]}.pdf'\n        output_path = f'temp/{output_filename}'\n        full_output_path = default_storage.path(output_path)\n\n        # Convert file\n        generator = PDFGenerator()\n        generator.convert_excel_to_pdf(full_input_path, full_output_path)\n\n        # Return PDF file\n        with open(full_output_path, 'rb') as f:\n            response = HttpResponse(f.read(), content_type='application/pdf')\n            response['Content-Disposition'] = f'attachment; filename=\"{output_filename}\"'\n            return response\n\n    except Exception as e:\n        return JsonResponse({'error': str(e)}, status=500)\n\n    finally:\n        # Clean up temporary files\n        try:\n            default_storage.delete(input_path)\n            default_storage.delete(output_path)\n        except:\n            pass\n</code></pre> <p>Need More Examples?</p> <ul> <li>Check the Quick Start Guide for more practical examples</li> <li>Review the User Guide for detailed usage patterns</li> <li>Open an issue for specific questions</li> </ul>"},{"location":"api/exceptions/","title":"Exceptions","text":""},{"location":"api/exceptions/#exceptions","title":"Exceptions","text":"<p>This page documents the complete exception hierarchy for exc-to-pdf, including error types, causes, and handling strategies.</p>"},{"location":"api/exceptions/#exception-hierarchy","title":"\ud83c\udfd7\ufe0f Exception Hierarchy","text":"<pre><code>graph TB\n    A[Exception] --&gt; B[ExcelReaderError]\n    B --&gt; C[InvalidFileException]\n    B --&gt; D[WorkbookException]\n    B --&gt; E[WorksheetNotFoundException]\n    B --&gt; F[DataExtractionException]\n    B --&gt; G[WorkbookInitializationException]\n    B --&gt; H[ConfigurationException]\n    B --&gt; I[PDFGenerationException]\n    B --&gt; J[TableRenderingException]\n\n    style B fill:#ffebee\n    style C fill:#ffebee\n    style D fill:#ffebee\n    style E fill:#ffebee\n    style F fill:#ffebee\n    style G fill:#ffebee\n    style H fill:#ffebee\n    style I fill:#ffebee\n    style J fill:#ffebee</code></pre>"},{"location":"api/exceptions/#base-exception","title":"\ud83d\udccb Base Exception","text":""},{"location":"api/exceptions/#excelreadererror","title":"ExcelReaderError","text":"<p>The base exception for all exc-to-pdf errors.</p> <pre><code>class ExcelReaderError(Exception):\n    \"\"\"Base exception for all Excel reading operations.\"\"\"\n\n    def __init__(self, message: str, file_path: Optional[str] = None, context: Optional[Dict[str, Any]] = None):\n        \"\"\"\n        Initialize ExcelReader error.\n\n        Args:\n            message: Human-readable error message\n            file_path: Path to the Excel file being processed\n            context: Additional context information for debugging\n        \"\"\"\n        super().__init__(message)\n        self.message = message\n        self.file_path = file_path\n        self.context = context or {}\n</code></pre> <p>Attributes: * <code>message</code> (str): Human-readable error message * <code>file_path</code> (Optional[str]): Path to the Excel file being processed * <code>context</code> (Dict[str, Any]): Additional debugging context</p> <p>Example Usage: </p><pre><code>from exc_to_pdf.exceptions import ExcelReaderError\n\ntry:\n    # Some operation that might fail\n    pass\nexcept ExcelReaderError as e:\n    print(f\"Error: {e.message}\")\n    if e.file_path:\n        print(f\"File: {e.file_path}\")\n    if e.context:\n        print(f\"Context: {e.context}\")\n</code></pre><p></p>"},{"location":"api/exceptions/#file-exceptions","title":"\ud83d\udcc4 File Exceptions","text":""},{"location":"api/exceptions/#invalidfileexception","title":"InvalidFileException","text":"<p>Raised when the file is not a valid Excel file or doesn't exist.</p> <pre><code>class InvalidFileException(ExcelReaderError):\n    \"\"\"Exception raised when the file is not a valid Excel file or doesn't exist.\"\"\"\n    pass\n</code></pre> <p>Common Causes: * File doesn't exist * File is not an Excel file (.xlsx, .xls) * File is corrupted * Insufficient permissions to read file</p> <p>Example: </p><pre><code>from exc_to_pdf.exceptions import InvalidFileException\n\ntry:\n    generator.convert_excel_to_pdf(\"nonexistent.xlsx\", \"output.pdf\")\nexcept InvalidFileException as e:\n    print(f\"File error: {e.message}\")\n    print(f\"File path: {e.file_path}\")\n</code></pre><p></p>"},{"location":"api/exceptions/#workbookinitializationexception","title":"WorkbookInitializationException","text":"<p>Raised when workbook initialization fails.</p> <pre><code>class WorkbookInitializationException(ExcelReaderError):\n    \"\"\"Exception raised when workbook initialization fails.\"\"\"\n    pass\n</code></pre> <p>Common Causes: * Password-protected Excel files * Corrupted workbook structure * Unsupported Excel version * Invalid file format</p>"},{"location":"api/exceptions/#data-exceptions","title":"\ud83d\udcca Data Exceptions","text":""},{"location":"api/exceptions/#dataextractionexception","title":"DataExtractionException","text":"<p>Raised when data extraction from worksheet fails.</p> <pre><code>class DataExtractionException(ExcelReaderError):\n    \"\"\"Exception raised when data extraction from worksheet fails.\"\"\"\n    pass\n</code></pre> <p>Common Causes: * Malformed data structures * Corrupted worksheet data  Unsupported cell types * Memory limitations during extraction</p>"},{"location":"api/exceptions/#worksheetnotfoundexception","title":"WorksheetNotFoundException","text":"<p>Raised when a requested worksheet doesn't exist.</p> <pre><code>class WorksheetNotFoundException(ExcelReaderError):\n    \"\"\"Exception raised when a requested worksheet doesn't exist.\"\"\"\n    pass\n</code></pre> <p>Common Causes: * Worksheet name doesn't exist * Worksheet was deleted * Case sensitivity issues * Leading/trailing whitespace in name</p> <p>Example: </p><pre><code>from exc_to_pdf.exceptions import WorksheetNotFoundException\n\ntry:\n    generator.convert_excel_to_pdf(\n        input_file=\"data.xlsx\",\n        output_file=\"output.pdf\",\n        worksheet_name=\"NonExistentSheet\"\n    )\nexcept WorksheetNotFoundException as e:\n    print(f\"Worksheet not found: {e.message}\")\n</code></pre><p></p>"},{"location":"api/exceptions/#workbook-exceptions","title":"\ud83c\udfe2 Workbook Exceptions","text":""},{"location":"api/exceptions/#workbookexception","title":"WorkbookException","text":"<p>Raised when workbook operations fail.</p> <pre><code>class WorkbookException(ExcelReaderError):\n    \"\"\"Exception raised when workbook operations fail.\"\"\"\n    pass\n</code></pre> <p>Common Causes: * Invalid workbook structure * Corrupted workbook * Unsupported features * Resource limitations</p>"},{"location":"api/exceptions/#configuration-exceptions","title":"\u2699\ufe0f Configuration Exceptions","text":""},{"location":"api/exceptions/#configurationexception","title":"ConfigurationException","text":"<p>Raised when configuration is invalid.</p> <pre><code>class ConfigurationException(ExcelReaderError):\n    \"\"\"Exception raised when configuration is invalid.\"\"\"\n    pass\n</code></pre> <p>Common Causes: * Invalid configuration values * Missing required configuration * Configuration file parse errors * Incompatible configuration options</p> <p>Example: </p><pre><code>from exc_to_pdf.config import PDFConfig\nfrom exc_to_pdf.exceptions import ConfigurationException\n\ntry:\n    config = PDFConfig()\n    config.margin_top = -10  # Invalid negative margin\n    generator = PDFGenerator(config)\nexcept ConfigurationException as e:\n    print(f\"Configuration error: {e.message}\")\n    if e.context:\n        print(f\"Invalid setting: {e.context.get('setting', 'unknown')}\")\n</code></pre><p></p>"},{"location":"api/exceptions/#pdf-generation-exceptions","title":"\ud83d\udcc4 PDF Generation Exceptions","text":""},{"location":"api/exceptions/#pdfgenerationexception","title":"PDFGenerationException","text":"<p>Raised when PDF generation operations fail.</p> <pre><code>class PDFGenerationException(ExcelReaderError):\n    \"\"\"Exception raised when PDF generation operations fail.\"\"\"\n    pass\n</code></pre> <p>Common Causes: * Insufficient disk space * Permission denied for output file * PDF rendering errors * Font or resource issues</p> <p>Example: </p><pre><code>from exc_to_pdf.exceptions import PDFGenerationException\n\ntry:\n    generator.convert_excel_to_pdf(\"large_file.xlsx\", \"/protected/output.pdf\")\nexcept PDFGenerationException as e:\n    print(f\"PDF generation failed: {e.message}\")\n    if e.file_path:\n        print(f\"Output file: {e.file_path}\")\n</code></pre><p></p>"},{"location":"api/exceptions/#tablerenderingexception","title":"TableRenderingException","text":"<p>Raised when table rendering for PDF fails.</p> <pre><code>class TableRenderingException(ExcelReaderError):\n    \"\"\"Exception raised when table rendering for PDF fails.\"\"\"\n    pass\n</code></pre> <p>Common Causes: * Complex table structures * Unsupported formatting * Memory limitations during rendering * Invalid table data</p>"},{"location":"api/exceptions/#error-handling-patterns","title":"\ud83d\udd27 Error Handling Patterns","text":""},{"location":"api/exceptions/#pattern-1-specific-exception-handling","title":"Pattern 1: Specific Exception Handling","text":"<pre><code>from exc_to_pdf import PDFGenerator\nfrom exc_to_pdf.exceptions import (\n    InvalidFileException,\n    WorksheetNotFoundException,\n    PDFGenerationException,\n    ConfigurationException\n)\n\ndef convert_with_specific_handling(input_path, output_path, worksheet_name=None):\n    \"\"\"Convert with specific exception handling\"\"\"\n    generator = PDFGenerator()\n\n    try:\n        generator.convert_excel_to_pdf(\n            input_file=input_path,\n            output_file=output_path,\n            worksheet_name=worksheet_name\n        )\n        return True, \"Conversion successful\"\n\n    except InvalidFileException as e:\n        return False, f\"Invalid file: {e.message}\"\n\n    except WorksheetNotFoundException as e:\n        return False, f\"Worksheet not found: {e.message}\"\n\n    except PDFGenerationException as e:\n        return False, f\"PDF generation failed: {e.message}\"\n\n    except ConfigurationException as e:\n        return False, f\"Configuration error: {e.message}\"\n\n    except Exception as e:\n        return False, f\"Unexpected error: {str(e)}\"\n</code></pre>"},{"location":"api/exceptions/#pattern-2-contextual-error-handling","title":"Pattern 2: Contextual Error Handling","text":"<pre><code>from exc_to_pdf import PDFGenerator\nfrom exc_to_pdf.exceptions import ExcelReaderError\n\ndef convert_with_context(input_path, output_path):\n    \"\"\"Convert with contextual error information\"\"\"\n    generator = PDFGenerator()\n\n    try:\n        generator.convert_excel_to_pdf(input_path, output_path)\n        return True, None\n\n    except ExcelReaderError as e:\n        # Extract detailed error information\n        error_info = {\n            'type': e.__class__.__name__,\n            'message': e.message,\n            'file_path': e.file_path,\n            'context': e.context\n        }\n\n        # Provide user-friendly messages\n        user_messages = {\n            'InvalidFileException': \"The file is not a valid Excel file or doesn't exist\",\n            'WorksheetNotFoundException': \"The specified worksheet doesn't exist\",\n            'PDFGenerationException': \"Failed to generate PDF output\",\n            'ConfigurationException': \"Invalid configuration settings\"\n        }\n\n        user_message = user_messages.get(e.__class__.__name__, \"An unexpected error occurred\")\n        return False, {'error': error_info, 'user_message': user_message}\n</code></pre>"},{"location":"api/exceptions/#pattern-3-retry-logic","title":"Pattern 3: Retry Logic","text":"<pre><code>import time\nfrom exc_to_pdf import PDFGenerator\nfrom exc_to_pdf.exceptions import PDFGenerationException\n\ndef convert_with_retry(input_path, output_path, max_retries=3, delay=1):\n    \"\"\"Convert with retry logic for transient errors\"\"\"\n    generator = PDFGenerator()\n\n    for attempt in range(max_retries):\n        try:\n            generator.convert_excel_to_pdf(input_path, output_path)\n            return True, f\"Conversion successful on attempt {attempt + 1}\"\n\n        except PDFGenerationException as e:\n            if attempt == max_retries - 1:\n                return False, f\"Failed after {max_retries} attempts: {e.message}\"\n\n            print(f\"Attempt {attempt + 1} failed, retrying in {delay} seconds...\")\n            time.sleep(delay)\n            delay *= 2  # Exponential backoff\n\n        except Exception as e:\n            # Don't retry on non-transient errors\n            return False, f\"Non-retryable error: {str(e)}\"\n</code></pre>"},{"location":"api/exceptions/#pattern-4-validation-before-processing","title":"Pattern 4: Validation Before Processing","text":"<pre><code>import os\nfrom exc_to_pdf import PDFGenerator\nfrom exc_to_pdf.exceptions import (\n    InvalidFileException,\n    ConfigurationException\n)\n\ndef validate_before_conversion(input_path, output_path, config=None):\n    \"\"\"Validate inputs before attempting conversion\"\"\"\n    errors = []\n\n    # Check input file\n    if not os.path.exists(input_path):\n        errors.append(f\"Input file doesn't exist: {input_path}\")\n    elif not input_path.lower().endswith(('.xlsx', '.xls')):\n        errors.append(f\"Invalid file extension: {input_path}\")\n\n    # Check output directory\n    output_dir = os.path.dirname(output_path)\n    if output_dir and not os.path.exists(output_dir):\n        try:\n            os.makedirs(output_dir, exist_ok=True)\n        except Exception as e:\n            errors.append(f\"Cannot create output directory: {e}\")\n\n    # Check output permissions\n    if os.path.exists(output_path) and not os.access(output_path, os.W_OK):\n        errors.append(f\"Cannot write to output file: {output_path}\")\n\n    # Validate configuration\n    if config:\n        try:\n            generator = PDFGenerator(config)\n        except ConfigurationException as e:\n            errors.append(f\"Configuration error: {e.message}\")\n\n    if errors:\n        return False, errors\n\n    return True, None\n\ndef safe_convert(input_path, output_path, config=None):\n    \"\"\"Safe conversion with pre-validation\"\"\"\n    # Validate first\n    valid, errors = validate_before_conversion(input_path, output_path, config)\n    if not valid:\n        return False, errors\n\n    # Perform conversion\n    generator = PDFGenerator(config)\n    try:\n        generator.convert_excel_to_pdf(input_path, output_path)\n        return True, \"Conversion successful\"\n    except Exception as e:\n        return False, [f\"Conversion failed: {str(e)}\"]\n</code></pre>"},{"location":"api/exceptions/#error-statistics-and-monitoring","title":"\ud83d\udcca Error Statistics and Monitoring","text":""},{"location":"api/exceptions/#error-tracking","title":"Error Tracking","text":"<pre><code>from collections import defaultdict\nfrom exc_to_pdf.exceptions import ExcelReaderError\n\nclass ErrorTracker:\n    \"\"\"Track and analyze conversion errors\"\"\"\n\n    def __init__(self):\n        self.error_counts = defaultdict(int)\n        self.error_details = []\n\n    def track_error(self, error: ExcelReaderError):\n        \"\"\"Track an error occurrence\"\"\"\n        error_type = error.__class__.__name__\n        self.error_counts[error_type] += 1\n\n        self.error_details.append({\n            'type': error_type,\n            'message': error.message,\n            'file_path': error.file_path,\n            'context': error.context,\n            'timestamp': time.time()\n        })\n\n    def get_summary(self):\n        \"\"\"Get error summary statistics\"\"\"\n        total_errors = sum(self.error_counts.values())\n        return {\n            'total_errors': total_errors,\n            'error_counts': dict(self.error_counts),\n            'most_common': max(self.error_counts.items(), key=lambda x: x[1])[0] if self.error_counts else None\n        }\n\n# Usage\ntracker = ErrorTracker()\n\ntry:\n    generator.convert_excel_to_pdf(\"data.xlsx\", \"output.pdf\")\nexcept ExcelReaderError as e:\n    tracker.track_error(e)\n    print(f\"Error tracked: {e.message}\")\n</code></pre>"},{"location":"api/exceptions/#error-reporting","title":"Error Reporting","text":"<pre><code>import json\nfrom datetime import datetime\nfrom exc_to_pdf.exceptions import ExcelReaderError\n\nclass ErrorReporter:\n    \"\"\"Generate error reports for analysis\"\"\"\n\n    def __init__(self, output_file=\"error_report.json\"):\n        self.output_file = output_file\n        self.errors = []\n\n    def add_error(self, error: ExcelReaderError, context=None):\n        \"\"\"Add error to report\"\"\"\n        error_data = {\n            'timestamp': datetime.now().isoformat(),\n            'type': error.__class__.__name__,\n            'message': error.message,\n            'file_path': error.file_path,\n            'context': error.context,\n            'additional_context': context or {}\n        }\n        self.errors.append(error_data)\n\n    def generate_report(self):\n        \"\"\"Generate error report\"\"\"\n        report = {\n            'generated_at': datetime.now().isoformat(),\n            'total_errors': len(self.errors),\n            'error_types': list(set(error['type'] for error in self.errors)),\n            'errors': self.errors\n        }\n\n        with open(self.output_file, 'w') as f:\n            json.dump(report, f, indent=2)\n\n        return report\n\n# Usage\nreporter = ErrorReporter()\n\ntry:\n    generator.convert_excel_to_pdf(\"data.xlsx\", \"output.pdf\")\nexcept ExcelReaderError as e:\n    reporter.add_error(e, context={'user_id': 123, 'conversion_id': 'abc123'})\n\n# Generate report at end of processing\nreport = reporter.generate_report()\nprint(f\"Error report generated: {len(report['errors'])} errors\")\n</code></pre>"},{"location":"api/exceptions/#best-practices","title":"\ud83c\udfaf Best Practices","text":""},{"location":"api/exceptions/#1-specific-exception-handling","title":"1. Specific Exception Handling","text":"<p>Always catch the most specific exception type first:</p> <pre><code># Good\ntry:\n    generator.convert_excel_to_pdf(input_path, output_path)\nexcept InvalidFileException as e:\n    handle_file_error(e)\nexcept WorksheetNotFoundException as e:\n    handle_worksheet_error(e)\nexcept PDFGenerationException as e:\n    handle_pdf_error(e)\n\n# Avoid\ntry:\n    generator.convert_excel_to_pdf(input_path, output_path)\nexcept Exception as e:\n    handle_all_errors(e)  # Too generic\n</code></pre>"},{"location":"api/exceptions/#2-context-preservation","title":"2. Context Preservation","text":"<p>Preserve and use exception context for debugging:</p> <pre><code>try:\n    generator.convert_excel_to_pdf(input_path, output_path)\nexcept ExcelReaderError as e:\n    log_error(e, context={\n        'input_path': input_path,\n        'output_path': output_path,\n        'user_id': current_user.id,\n        'timestamp': datetime.now()\n    })\n</code></pre>"},{"location":"api/exceptions/#3-user-friendly-messages","title":"3. User-Friendly Messages","text":"<p>Provide user-friendly error messages while logging technical details:</p> <pre><code>except ExcelReaderError as e:\n    # Log technical details\n    logger.error(f\"Conversion failed: {e.message}\", extra={\n        'file_path': e.file_path,\n        'context': e.context\n    })\n\n    # Return user-friendly message\n    return get_user_friendly_message(e)\n</code></pre>"},{"location":"api/exceptions/#4-graceful-degradation","title":"4. Graceful Degradation","text":"<p>Handle errors gracefully when possible:</p> <pre><code>try:\n    generator.convert_excel_to_pdf(input_path, output_path, include_bookmarks=True)\nexcept PDFGenerationException as e:\n    if \"bookmarks\" in e.message.lower():\n        # Retry without bookmarks\n        logger.warning(\"Bookmarks failed, retrying without\")\n        generator.convert_excel_to_pdf(input_path, output_path, include_bookmarks=False)\n    else:\n        raise\n</code></pre> <p>Error Handling Checklist</p> <ul> <li> Catch specific exceptions before generic ones</li> <li> Preserve error context for debugging</li> <li> Provide user-friendly error messages</li> <li> Log technical details separately</li> <li> Implement retry logic for transient errors</li> <li> Validate inputs before processing</li> <li> Track and monitor error patterns</li> </ul>"},{"location":"developer/","title":"Developer Guide","text":""},{"location":"developer/#developer-guide","title":"Developer Guide","text":"<p>Welcome to the developer guide for exc-to-pdf! This section provides comprehensive information for developers who want to contribute to the project, extend its functionality, or integrate it into their own applications.</p>"},{"location":"developer/#getting-started","title":"\ud83d\ude80 Getting Started","text":""},{"location":"developer/#development-environment-setup","title":"Development Environment Setup","text":"<ol> <li> <p>Clone the Repository </p><pre><code>git clone https://github.com/exc-to-pdf/exc-to-pdf.git\ncd exc-to-pdf\n</code></pre><p></p> </li> <li> <p>Set Up Virtual Environment </p><pre><code>python -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n</code></pre><p></p> </li> <li> <p>Install Development Dependencies </p><pre><code>pip install -e \".[dev]\"\n</code></pre><p></p> </li> <li> <p>Verify Installation </p><pre><code># Run tests\npytest\n\n# Check code style\nblack --check src tests\n\n# Type checking\nmypy src\n</code></pre><p></p> </li> </ol>"},{"location":"developer/#project-structure","title":"Project Structure","text":"<pre><code>exc-to-pdf/\n\u251c\u2500\u2500 src/                    # Source code\n\u2502   \u251c\u2500\u2500 exc_to_pdf/        # Main package\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502   \u251c\u2500\u2500 main.py        # CLI entry point\n\u2502   \u2502   \u251c\u2500\u2500 pdf_generator.py\n\u2502   \u2502   \u251c\u2500\u2500 excel_processor.py\n\u2502   \u2502   \u251c\u2500\u2500 config/\n\u2502   \u2502   \u251c\u2500\u2500 exceptions.py\n\u2502   \u2502   \u2514\u2500\u2500 utils/\n\u2502   \u2514\u2500\u2500 tests/              # Test suite\n\u251c\u2500\u2500 docs/                   # Documentation\n\u251c\u2500\u2500 scripts/               # Development scripts\n\u251c\u2500\u2500 .github/               # GitHub workflows\n\u2514\u2500\u2500 pyproject.toml         # Project configuration\n</code></pre>"},{"location":"developer/#architecture-overview","title":"\ud83c\udfd7\ufe0f Architecture Overview","text":""},{"location":"developer/#core-components","title":"Core Components","text":"<pre><code>graph TB\n    A[CLI Interface] --&gt; B[PDFGenerator]\n    B --&gt; C[ExcelProcessor]\n    B --&gt; D[TableRenderer]\n    B --&gt; E[BookmarkManager]\n    B --&gt; F[MetadataManager]\n\n    C --&gt; G[TableDetector]\n    C --&gt; H[DataValidator]\n\n    I[Configuration] --&gt; B\n    J[Exceptions] --&gt; All\n\n    style A fill:#e1f5fe\n    style I fill:#fff3e0\n    style J fill:#ffebee</code></pre>"},{"location":"developer/#design-principles","title":"Design Principles","text":"<ol> <li>Modular Architecture - Each component has a single responsibility</li> <li>Type Safety - Full type hints throughout the codebase</li> <li>Error Handling - Comprehensive exception hierarchy</li> <li>Testability - 95%+ test coverage requirement</li> <li>Performance - Memory-efficient processing with caching</li> <li>Extensibility - Plugin-ready architecture for future enhancements</li> </ol>"},{"location":"developer/#development-workflow","title":"\ud83d\udd27 Development Workflow","text":""},{"location":"developer/#1-development-setup","title":"1. Development Setup","text":"<pre><code># Install pre-commit hooks\npre-commit install\n\n# Start development server (for documentation)\nmkdocs serve\n\n# Run tests in watch mode\npytest --watch\n</code></pre>"},{"location":"developer/#2-making-changes","title":"2. Making Changes","text":"<ol> <li> <p>Create Feature Branch </p><pre><code>git checkout -b feature/your-feature-name\n</code></pre><p></p> </li> <li> <p>Write Code</p> <ul> <li>Follow the existing code style</li> <li>Add comprehensive tests</li> <li>Update documentation</li> </ul> </li> <li> <p>Run Tests </p><pre><code>pytest\n</code></pre><p></p> </li> <li> <p>Code Quality Checks </p><pre><code># Format code\nblack src tests\n\n# Check style\nflake8 src tests\n\n# Type checking\nmypy src\n\n# Security check\nbandit -r src\n</code></pre><p></p> </li> </ol>"},{"location":"developer/#3-testing","title":"3. Testing","text":""},{"location":"developer/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npytest\n\n# Run specific test file\npytest tests/unit/test_pdf_generator.py\n\n# Run with coverage\npytest --cov=src --cov-report=html\n\n# Run integration tests\npytest tests/integration/\n</code></pre>"},{"location":"developer/#writing-tests","title":"Writing Tests","text":"<pre><code>import pytest\nfrom exc_to_pdf import PDFGenerator\nfrom exc_to_pdf.exceptions import InvalidFileException\n\nclass TestPDFGenerator:\n    def setup_method(self):\n        \"\"\"Set up test fixtures\"\"\"\n        self.generator = PDFGenerator()\n        self.test_input = \"tests/fixtures/test_data.xlsx\"\n        self.test_output = \"/tmp/test_output.pdf\"\n\n    def test_basic_conversion(self):\n        \"\"\"Test basic Excel to PDF conversion\"\"\"\n        # Arrange\n        # Test file should exist in fixtures\n\n        # Act\n        self.generator.convert_excel_to_pdf(\n            input_file=self.test_input,\n            output_file=self.test_output\n        )\n\n        # Assert\n        assert os.path.exists(self.test_output)\n        assert os.path.getsize(self.test_output) &gt; 0\n\n    def test_invalid_file_raises_exception(self):\n        \"\"\"Test that invalid files raise appropriate exceptions\"\"\"\n        with pytest.raises(InvalidFileException):\n            self.generator.convert_excel_to_pdf(\n                input_file=\"nonexistent.xlsx\",\n                output_file=self.test_output\n            )\n\n    def test_custom_configuration(self):\n        \"\"\"Test conversion with custom configuration\"\"\"\n        from exc_to_pdf.config import PDFConfig\n\n        config = PDFConfig()\n        config.table_style = \"modern\"\n        config.orientation = \"landscape\"\n\n        generator = PDFGenerator(config)\n        # Test with custom configuration\n</code></pre>"},{"location":"developer/#4-documentation","title":"4. Documentation","text":""},{"location":"developer/#code-documentation","title":"Code Documentation","text":"<pre><code>def convert_excel_to_pdf(\n    self,\n    input_file: str,\n    output_file: str,\n    worksheet_name: Optional[str] = None,\n    progress_callback: Optional[Callable[[str, float, str], None]] = None\n) -&gt; None:\n    \"\"\"\n    Convert Excel file to PDF format.\n\n    Args:\n        input_file: Path to the Excel file to convert\n        output_file: Path for the output PDF file\n        worksheet_name: Specific worksheet name to convert (default: all worksheets)\n        progress_callback: Optional callback for progress updates\n\n    Raises:\n        InvalidFileException: If input file is not a valid Excel file\n        WorksheetNotFoundException: If specified worksheet doesn't exist\n        PDFGenerationException: If PDF generation fails\n\n    Example:\n        &gt;&gt;&gt; generator = PDFGenerator()\n        &gt;&gt;&gt; generator.convert_excel_to_pdf(\"data.xlsx\", \"output.pdf\")\n    \"\"\"\n</code></pre>"},{"location":"developer/#documentation-updates","title":"Documentation Updates","text":"<ul> <li>Update API documentation when adding new methods</li> <li>Add examples to the user guide</li> <li>Update the changelog for new features</li> <li>Review and update the README if needed</li> </ul>"},{"location":"developer/#code-standards","title":"\ud83d\udccb Code Standards","text":""},{"location":"developer/#1-code-style","title":"1. Code Style","text":"<p>We use several tools to maintain code quality:</p> <pre><code># Black - Code formatting\nblack src tests\n\n# isort - Import sorting\nisort src tests\n\n# flake8 - Linting\nflake8 src tests\n\n# mypy - Type checking\nmypy src\n\n# bandit - Security checking\nbandit -r src\n</code></pre>"},{"location":"developer/#2-type-hints","title":"2. Type Hints","text":"<p>All public APIs must have complete type hints:</p> <pre><code>from typing import Optional, Dict, List, Callable, Any\n\ndef process_data(\n    data: Dict[str, Any],\n    options: Optional[Dict[str, str]] = None,\n    callback: Optional[Callable[[float], None]] = None\n) -&gt; List[str]:\n    \"\"\"Process data with type hints.\"\"\"\n    pass\n</code></pre>"},{"location":"developer/#3-docstrings","title":"3. Docstrings","text":"<p>Use Google-style docstrings:</p> <pre><code>def calculate_metrics(\n    data: List[Dict[str, float]],\n    metric_type: str = \"average\"\n) -&gt; Dict[str, float]:\n    \"\"\"Calculate metrics from data.\n\n    Args:\n        data: List of data dictionaries with numeric values\n        metric_type: Type of metric to calculate (\"average\", \"sum\", \"max\")\n\n    Returns:\n        Dictionary containing calculated metrics\n\n    Raises:\n        ValueError: If metric_type is not supported\n        TypeError: If data contains non-numeric values\n\n    Example:\n        &gt;&gt;&gt; data = [{\"value\": 1.0}, {\"value\": 2.0}, {\"value\": 3.0}]\n        &gt;&gt;&gt; result = calculate_metrics(data, \"average\")\n        &gt;&gt;&gt; print(result)\n        {\"average\": 2.0}\n    \"\"\"\n</code></pre>"},{"location":"developer/#4-error-handling","title":"4. Error Handling","text":"<p>Use specific exceptions and provide context:</p> <pre><code>from exc_to_pdf.exceptions import DataExtractionException\n\ndef extract_table_data(worksheet, table_range: str) -&gt; List[List[Any]]:\n    \"\"\"Extract table data from worksheet.\"\"\"\n    try:\n        # Extract data logic\n        pass\n    except IndexError as e:\n        raise DataExtractionException(\n            f\"Invalid table range: {table_range}\",\n            file_path=worksheet.parent.path,\n            context={\"table_range\": table_range, \"original_error\": str(e)}\n        )\n</code></pre>"},{"location":"developer/#contribution-guidelines","title":"\ud83d\udd04 Contribution Guidelines","text":""},{"location":"developer/#1-pull-request-process","title":"1. Pull Request Process","text":"<ol> <li>Fork the Repository</li> <li>Create Feature Branch</li> <li>Make Changes</li> <li>Add Tests</li> <li>Update Documentation</li> <li>Submit Pull Request</li> </ol>"},{"location":"developer/#2-pull-request-template","title":"2. Pull Request Template","text":"<pre><code>## Description\nBrief description of changes made.\n\n## Type of Change\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Breaking change\n- [ ] Documentation update\n\n## Testing\n- [ ] Added unit tests\n- [ ] Added integration tests\n- [ ] All tests pass\n- [ ] Manual testing completed\n\n## Checklist\n- [ ] Code follows project style guidelines\n- [ ] Self-review completed\n- [ ] Documentation updated\n- [ ] CHANGELOG.md updated\n</code></pre>"},{"location":"developer/#3-code-review-guidelines","title":"3. Code Review Guidelines","text":""},{"location":"developer/#reviewer-checklist","title":"Reviewer Checklist","text":"<ul> <li> Code follows style guidelines</li> <li> Tests are comprehensive and pass</li> <li> Documentation is updated</li> <li> Error handling is appropriate</li> <li> Performance implications considered</li> <li> Security implications reviewed</li> <li> Backward compatibility maintained</li> </ul>"},{"location":"developer/#author-responsibilities","title":"Author Responsibilities","text":"<ul> <li> Address all reviewer feedback</li> <li> Update tests based on feedback</li> <li> Update documentation</li> <li> Ensure CI/CD passes</li> <li> Respond to all comments</li> </ul>"},{"location":"developer/#testing-strategy","title":"\ud83e\uddea Testing Strategy","text":""},{"location":"developer/#test-categories","title":"Test Categories","text":"<ol> <li>Unit Tests - Test individual components in isolation</li> <li>Integration Tests - Test component interactions</li> <li>End-to-End Tests - Test complete workflows</li> <li>Performance Tests - Test performance characteristics</li> </ol>"},{"location":"developer/#test-structure","title":"Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 unit/                   # Unit tests\n\u2502   \u251c\u2500\u2500 test_pdf_generator.py\n\u2502   \u251c\u2500\u2500 test_excel_processor.py\n\u2502   \u2514\u2500\u2500 test_config.py\n\u251c\u2500\u2500 integration/            # Integration tests\n\u2502   \u251c\u2500\u2500 test_workflows.py\n\u2502   \u2514\u2500\u2500 test_api.py\n\u251c\u2500\u2500 fixtures/              # Test data\n\u2502   \u251c\u2500\u2500 sample_data.xlsx\n\u2502   \u2514\u2500\u2500 complex_workbook.xlsx\n\u2514\u2500\u2500 conftest.py            # Test configuration\n</code></pre>"},{"location":"developer/#test-fixtures","title":"Test Fixtures","text":"<pre><code># conftest.py\nimport pytest\nimport tempfile\nimport os\nfrom pathlib import Path\n\n@pytest.fixture\ndef temp_output_file():\n    \"\"\"Create temporary output file for testing.\"\"\"\n    with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as f:\n        yield f.name\n    os.unlink(f.name)\n\n@pytest.fixture\ndef sample_excel_file():\n    \"\"\"Provide sample Excel file for testing.\"\"\"\n    return Path(__file__).parent / \"fixtures\" / \"sample_data.xlsx\"\n\n@pytest.fixture\ndef pdf_generator():\n    \"\"\"Provide PDFGenerator instance for testing.\"\"\"\n    from exc_to_pdf import PDFGenerator\n    return PDFGenerator()\n</code></pre>"},{"location":"developer/#performance-guidelines","title":"\ud83d\udcca Performance Guidelines","text":""},{"location":"developer/#1-memory-management","title":"1. Memory Management","text":"<ul> <li>Use generators for large data processing</li> <li>Implement streaming for large files</li> <li>Monitor memory usage in tests</li> <li>Clean up resources properly</li> </ul>"},{"location":"developer/#2-caching-strategy","title":"2. Caching Strategy","text":"<pre><code>from functools import lru_cache\nfrom exc_to_pdf.cache_manager import CacheManager\n\nclass PDFGenerator:\n    def __init__(self):\n        self.cache = CacheManager()\n\n    @lru_cache(maxsize=128)\n    def _get_table_style(self, style_name: str) -&gt; Dict[str, Any]:\n        \"\"\"Cache table style configurations.\"\"\"\n        return self._load_table_style(style_name)\n</code></pre>"},{"location":"developer/#3-performance-testing","title":"3. Performance Testing","text":"<pre><code>import time\nimport psutil\nimport pytest\n\ndef test_performance_large_file():\n    \"\"\"Test performance with large files.\"\"\"\n    generator = PDFGenerator()\n\n    # Monitor memory usage\n    process = psutil.Process()\n    initial_memory = process.memory_info().rss / 1024 / 1024  # MB\n\n    start_time = time.time()\n    generator.convert_excel_to_pdf(\"large_file.xlsx\", \"output.pdf\")\n    end_time = time.time()\n\n    peak_memory = process.memory_info().rss / 1024 / 1024  # MB\n\n    # Performance assertions\n    assert end_time - start_time &lt; 60  # Should complete within 60 seconds\n    assert peak_memory - initial_memory &lt; 500  # Should use less than 500MB additional memory\n</code></pre>"},{"location":"developer/#security-guidelines","title":"\ud83d\udd12 Security Guidelines","text":""},{"location":"developer/#1-input-validation","title":"1. Input Validation","text":"<pre><code>def validate_file_path(file_path: str) -&gt; bool:\n    \"\"\"Validate file path to prevent directory traversal.\"\"\"\n    try:\n        # Resolve to absolute path\n        abs_path = Path(file_path).resolve()\n\n        # Check if path is within allowed directory\n        allowed_dir = Path(\"/allowed/directory\").resolve()\n        return str(abs_path).startswith(str(allowed_dir))\n    except Exception:\n        return False\n</code></pre>"},{"location":"developer/#2-security-testing","title":"2. Security Testing","text":"<pre><code>def test_directory_traversal_protection():\n    \"\"\"Test protection against directory traversal attacks.\"\"\"\n    generator = PDFGenerator()\n\n    malicious_paths = [\n        \"../../../etc/passwd\",\n        \"..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam\",\n        \"/etc/shadow\",\n        \"C:\\\\Windows\\\\System32\\\\config\\\\SAM\"\n    ]\n\n    for malicious_path in malicious_paths:\n        with pytest.raises(InvalidFileException):\n            generator.convert_excel_to_pdf(malicious_path, \"output.pdf\")\n</code></pre>"},{"location":"developer/#documentation-development","title":"\ud83d\udcda Documentation Development","text":""},{"location":"developer/#1-api-documentation","title":"1. API Documentation","text":"<p>API documentation is generated from docstrings using mkdocstrings:</p> <pre><code>class PDFGenerator:\n    \"\"\"Main PDF generation engine.\n\n    This class provides the primary interface for converting Excel files\n    to PDF format with AI optimization features.\n\n    Attributes:\n        config: PDF configuration object\n        table_renderer: Table rendering component\n        bookmark_manager: Bookmark management component\n    \"\"\"\n</code></pre>"},{"location":"developer/#2-user-documentation","title":"2. User Documentation","text":"<p>User documentation is written in Markdown and processed by MkDocs:</p> <pre><code># Quick Start Guide\n\n## Installation\n\n```bash\npip install exc-to-pdf\n</code></pre>"},{"location":"developer/#basic-usage","title":"Basic Usage","text":"<pre><code>from exc_to_pdf import PDFGenerator\n\ngenerator = PDFGenerator()\ngenerator.convert_excel_to_pdf(\"input.xlsx\", \"output.pdf\")\n</code></pre> <pre><code>## \ud83d\ude80 Release Process\n\n### 1. Version Management\n\nWe use semantic versioning (SemVer):\n- **MAJOR**: Breaking changes\n- **MINOR**: New features (backward compatible)\n- **PATCH**: Bug fixes (backward compatible)\n\n### 2. Release Checklist\n\n- [ ] All tests pass\n- [ ] Documentation updated\n- [ ] CHANGELOG.md updated\n- [ ] Version number updated\n- [ ] Tag created\n- [ ] PyPI package built and uploaded\n- [ ] GitHub release created\n\n### 3. Automated Releases\n\nGitHub Actions handle automatic releases:\n\n```yaml\n# .github/workflows/release.yml\nname: Release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: 3.9\n      - name: Build package\n        run: |\n          python -m pip install build\n          python -m build\n      - name: Publish to PyPI\n        uses: pypa/gh-action-pypi-publish@release/v1\n        with:\n          password: ${{ secrets.PYPI_API_TOKEN }}\n</code></pre>"},{"location":"developer/#external-resources","title":"\ud83d\udd17 External Resources","text":""},{"location":"developer/#development-tools","title":"Development Tools","text":"<ul> <li>Black: Code formatting</li> <li>isort: Import sorting</li> <li>flake8: Linting</li> <li>mypy: Type checking</li> <li>pytest: Testing framework</li> <li>mkdocs: Documentation</li> <li>pre-commit: Git hooks</li> </ul>"},{"location":"developer/#useful-links","title":"Useful Links","text":"<ul> <li>Python Packaging Guide</li> <li>pytest Documentation</li> <li>MkDocs Documentation</li> <li>GitHub Actions Documentation</li> </ul> <p>Getting Help</p> <ul> <li>Check existing issues for similar problems</li> <li>Join our discussions for questions</li> <li>Review our code of conduct for community guidelines</li> </ul>"},{"location":"development/plan/handoff-prompt-glm46-p2/","title":"\ud83d\ude80 DevStream Task Handoff: Excel Processing Engine - Core Development","text":""},{"location":"development/plan/handoff-prompt-glm46-p2/#devstream-task-handoff-excel-processing-engine-core-development","title":"\ud83d\ude80 DevStream Task Handoff: Excel Processing Engine - Core Development","text":"<p>FROM: Claude Sonnet 4.5 (Strategic Planning Complete) TO: GLM-4.6 (Implementation Execution)</p>"},{"location":"development/plan/handoff-prompt-glm46-p2/#task-context","title":"\ud83d\udcca TASK CONTEXT","text":"<p>Task ID: <code>1384fd02-4ae9-4570-9662-27a61462db7e</code> Phase: implementation Priority: 2/10 Status: Steps 1-5 COMPLETED by Sonnet 4.5 \u2192 Steps 6-7 DELEGATED to you</p> <p>Your Role: You are an expert execution-focused coding agent. Sonnet 4.5 has completed all strategic planning. Your job is precise implementation according to the approved plan.</p>"},{"location":"development/plan/handoff-prompt-glm46-p2/#work-completed-steps-1-5","title":"\u2705 WORK COMPLETED (Steps 1-5)","text":"<ul> <li>\u2705 DISCUSSION: Problem analyzed, trade-offs identified, approach agreed</li> <li>\u2705 ANALYSIS: Codebase patterns identified, files to modify determined</li> <li>\u2705 RESEARCH: Context7 findings documented (see below)</li> <li>\u2705 PLANNING: Detailed implementation plan created (see linked file)</li> <li>\u2705 APPROVAL: User approved plan, ready for execution</li> </ul>"},{"location":"development/plan/handoff-prompt-glm46-p2/#your-implementation-plan","title":"\ud83d\udccb YOUR IMPLEMENTATION PLAN","text":"<p>COMPLETE PLAN: <code>/Users/fulvioventura/exc-to-pdf/implementation-plan-glm46-p2.md</code></p> <p>READ THE PLAN FIRST using: </p><pre><code>cat /Users/fulvioventura/exc-to-pdf/implementation-plan-glm46-p2.md\n</code></pre><p></p> <p>Plan Summary (excerpt): Implement ExcelReader class with multi-sheet discovery, read-only memory management, and hybrid table detection for Excel to PDF conversion pipeline.</p>"},{"location":"development/plan/handoff-prompt-glm46-p2/#your-mission-steps-6-7","title":"\ud83c\udfaf YOUR MISSION (Steps 6-7)","text":""},{"location":"development/plan/handoff-prompt-glm46-p2/#step-6-implementation","title":"Step 6: IMPLEMENTATION","text":"<ul> <li>Execute micro-tasks one at a time</li> <li>Follow plan specifications exactly</li> <li>Use TodoWrite: mark \"in_progress\" \u2192 work \u2192 \"completed\"</li> <li>Run tests after each micro-task</li> <li>NEVER mark completed with failing tests</li> </ul>"},{"location":"development/plan/handoff-prompt-glm46-p2/#step-7-verification","title":"Step 7: VERIFICATION","text":"<ul> <li>95%+ test coverage for all new code</li> <li>mypy --strict zero errors</li> <li>Performance validation (&lt;10s per 10MB file)</li> <li>@code-reviewer validation (automatic on commit)</li> </ul>"},{"location":"development/plan/handoff-prompt-glm46-p2/#devstream-protocol-compliance-mandatory","title":"\ud83d\udd27 DEVSTREAM PROTOCOL COMPLIANCE (MANDATORY)","text":"<p>CRITICAL RULES (from @CLAUDE.md):</p>"},{"location":"development/plan/handoff-prompt-glm46-p2/#python-environment","title":"Python Environment","text":"<pre><code># ALWAYS use .devstream venv\n.devstream/bin/python script.py       # \u2705 CORRECT\n.devstream/bin/python -m pytest       # \u2705 CORRECT\npython script.py                       # \u274c FORBIDDEN\n</code></pre>"},{"location":"development/plan/handoff-prompt-glm46-p2/#todowrite-workflow","title":"TodoWrite Workflow","text":"<ol> <li>Mark first task \"in_progress\"</li> <li>Implement according to plan</li> <li>Run tests</li> <li>Mark \"completed\" ONLY when:</li> <li>Tests pass 100%</li> <li>Type check passes</li> <li>Acceptance criteria met</li> <li>Proceed to next task</li> </ol>"},{"location":"development/plan/handoff-prompt-glm46-p2/#context7-usage","title":"Context7 Usage","text":"<pre><code># When you encounter unknowns\nlibrary_id = mcp__context7__resolve-library-id(libraryName=\"openpyxl\")\ndocs = mcp__context7__get-library-docs(\n    context7CompatibleLibraryID=library_id,\n    topic=\"read_only mode large file processing\",\n    tokens=3000\n)\n</code></pre>"},{"location":"development/plan/handoff-prompt-glm46-p2/#memory-search","title":"Memory Search","text":"<pre><code># Before implementing, search for existing patterns\nmcp__devstream__devstream_search_memory(\n    query=\"Excel processing openpyxl patterns\",\n    content_type=\"code\",\n    limit=5\n)\n</code></pre>"},{"location":"development/plan/handoff-prompt-glm46-p2/#context7-research-pre-completed-by-sonnet","title":"\ud83d\udcda CONTEXT7 RESEARCH (Pre-Completed by Sonnet)","text":""},{"location":"development/plan/handoff-prompt-glm46-p2/#libraries-researched","title":"Libraries Researched:","text":"<ul> <li>openpyxl: Excel file reading and table detection (Trust Score: 7.5)</li> <li>pandas: Data processing and chunking (Trust Score: 9.2)</li> <li>reportlab: PDF generation for later phases (Trust Score: 7.5)</li> </ul>"},{"location":"development/plan/handoff-prompt-glm46-p2/#key-findings","title":"Key Findings:","text":"<ul> <li>Use openpyxl read-only mode for memory efficiency with large files</li> <li>Hybrid table detection: formal tables \u2192 pandas inference \u2192 grid patterns</li> <li>Chunking pattern for unlimited file size processing</li> <li>Context manager pattern for resource management</li> </ul>"},{"location":"development/plan/handoff-prompt-glm46-p2/#pattern-examples","title":"Pattern Examples:","text":"<pre><code># Read-only mode for large files\nwb = load_workbook(filename='large_file.xlsx', read_only=True)\n# Process data\nwb.close()  # CRITICAL: release resources\n\n# Multi-sheet discovery\nsheet_names = wb.sheetnames\nfor sheet in wb:\n    print(sheet.title)\n\n# Hybrid table detection\nformal_tables = ws.tables.values()\npandas_tables = pd.read_excel(chunksize=1000)\n</code></pre> <p>When to use: Large files, multi-sheet workbooks, memory-constrained environments</p>"},{"location":"development/plan/handoff-prompt-glm46-p2/#technical-specifications","title":"\ud83c\udfd7\ufe0f TECHNICAL SPECIFICATIONS","text":"<p>Files to Modify: - <code>src/excel_processor.py</code> (new file) - <code>tests/unit/test_excel_processor.py</code> (new file)</p> <p>New Files to Create: - <code>src/table_detector.py</code> (later phase) - <code>src/data_validator.py</code> (later phase) - <code>src/exceptions.py</code> (custom exceptions) - <code>src/config/excel_config.py</code> (configuration)</p> <p>Dependencies (already in requirements.txt): - openpyxl&gt;=3.1.0 - pandas&gt;=2.0.0 - pytest&gt;=7.0.0</p>"},{"location":"development/plan/handoff-prompt-glm46-p2/#critical-constraints-do-not-violate","title":"\ud83d\udea8 CRITICAL CONSTRAINTS (DO NOT VIOLATE)","text":"<p>FORBIDDEN ACTIONS: - \u274c NO removal of features (find proper solution instead) - \u274c NO workarounds (implement correctly using Context7) - \u274c NO simplifications that reduce functionality - \u274c NO skipping tests or type hints - \u274c NO early quit on complex tasks (complete fully)</p> <p>REQUIRED ACTIONS: - \u2705 YES use <code>.devstream/bin/python</code> for ALL commands - \u2705 YES follow TodoWrite plan strictly - \u2705 YES use Context7 for unknowns (tools provided) - \u2705 YES maintain ALL existing functionality - \u2705 YES full type hints + docstrings EVERY function - \u2705 YES tests for EVERY feature (95%+ coverage)</p>"},{"location":"development/plan/handoff-prompt-glm46-p2/#quality-gates-check-before-completion","title":"\u2705 QUALITY GATES (Check Before Completion)","text":""},{"location":"development/plan/handoff-prompt-glm46-p2/#1-environment-verification","title":"1. Environment Verification","text":"<pre><code># Verify venv and Python version\n.devstream/bin/python --version  # Must be 3.11.x\n.devstream/bin/python -m pip list | grep -E \"(openpyxl|pandas|pytest)\"\n</code></pre>"},{"location":"development/plan/handoff-prompt-glm46-p2/#2-implementation","title":"2. Implementation","text":"<p>Follow plan in <code>/Users/fulvioventura/exc-to-pdf/implementation-plan-glm46-p2.md</code></p>"},{"location":"development/plan/handoff-prompt-glm46-p2/#3-testing","title":"3. Testing","text":"<pre><code># After EVERY micro-task\n.devstream/bin/python -m pytest tests/unit/test_excel_processor.py -v\n.devstream/bin/python -m mypy src/excel_processor.py --strict\n\n# Before completion (ALL tests)\n.devstream/bin/python -m pytest tests/ -v \\\n    --cov=src \\\n    --cov-report=term-missing \\\n    --cov-report=html\n\n# REQUIREMENT: \u226595% coverage, 100% pass rate\n</code></pre>"},{"location":"development/plan/handoff-prompt-glm46-p2/#4-commit-if-all-tests-pass","title":"4. Commit (if all tests pass)","text":"<pre><code>git add src/excel_processor.py tests/unit/test_excel_processor.py\ngit commit -m \"$(cat &lt;&lt;'EOF'\nfeat(excel): implement core Excel processing engine\n\nAdd ExcelReader class with multi-sheet support, read-only mode, and memory management\nfor efficient processing of Excel files in preparation for PDF generation.\n\nTask ID: 1384fd02-4ae9-4570-9662-27a61462db7e\n\n\ud83e\udd16 Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude &lt;noreply@anthropic.com&gt;\nEOF\n)\"\n</code></pre> <p>Note: @code-reviewer validation automatic on commit</p>"},{"location":"development/plan/handoff-prompt-glm46-p2/#devstream-memory-access","title":"\ud83d\udd0d DEVSTREAM MEMORY ACCESS","text":"<p>Search for relevant context anytime: </p><pre><code>mcp__devstream__devstream_search_memory(\n    query=\"Excel processing engine implementation\",\n    content_type=\"code\",\n    limit=10\n)\n</code></pre><p></p>"},{"location":"development/plan/handoff-prompt-glm46-p2/#success-criteria","title":"\ud83d\udcca SUCCESS CRITERIA","text":"<ul> <li> All TodoWrite tasks completed</li> <li> Tests pass 100%</li> <li> Coverage \u2265 95%</li> <li> mypy --strict passes (zero errors)</li> <li> Performance meets target: &lt;10s per 10MB file</li> <li> @code-reviewer validation passed</li> <li> All acceptance criteria met</li> </ul>"},{"location":"development/plan/handoff-prompt-glm46-p2/#execution-checklist","title":"\ud83d\ude80 EXECUTION CHECKLIST","text":"<ol> <li> READ the complete plan: <code>cat /Users/fulvioventura/exc-to-pdf/implementation-plan-glm46-p2.md</code></li> <li> VERIFY environment: <code>.devstream/bin/python --version</code></li> <li> SEARCH DevStream memory for context</li> <li> START first TodoWrite task (mark \"in_progress\")</li> <li> IMPLEMENT according to plan specifications</li> <li> TEST after each micro-task</li> <li> COMPLETE task when all criteria met</li> <li> REPEAT steps 4-7 for remaining tasks</li> <li> VALIDATE complete implementation (all quality gates)</li> <li> COMMIT if all tests pass</li> </ol> <p>READY TO IMPLEMENT?</p> <p>Start with the first TodoWrite task. Execute precisely. Test thoroughly. Complete fully. \ud83d\ude80</p> <p>Remember: You are GLM-4.6 - your strength is precise execution of well-defined tasks. The strategic thinking is done. Now execute flawlessly. \ud83d\udcaa</p>"},{"location":"development/plan/handoff-prompt-glm46-p2/#your-first-action","title":"\ud83c\udfaf YOUR FIRST ACTION","text":"<ol> <li> <p>READ the implementation plan:    </p><pre><code>cat /Users/fulvioventura/exc-to-pdf/implementation-plan-glm46-p2.md\n</code></pre><p></p> </li> <li> <p>SETUP your first TodoWrite task:    </p><pre><code>TodoWrite([\n    {\"content\": \"P2.1 Create ExcelReader core class structure\", \"status\": \"in_progress\", \"activeForm\": \"Creating ExcelReader core class structure\"},\n    # ... other tasks\n])\n</code></pre><p></p> </li> <li> <p>SEARCH for existing patterns:    </p><pre><code>mcp__devstream__devstream_search_memory(\n    query=\"Excel file processing openpyxl patterns\",\n    content_type=\"code\",\n    limit=5\n)\n</code></pre><p></p> </li> <li> <p>IMPLEMENT the first micro-task following the exact specification in the plan.</p> </li> </ol> <p>GLM-4.6, you are cleared for implementation! Execute with precision! \ud83d\ude80</p>"},{"location":"development/plan/handoff_p3-pdf-generation-engine-to-glm46/","title":"\ud83d\ude80 DevStream Task Handoff: P3 PDF Generation Engine","text":""},{"location":"development/plan/handoff_p3-pdf-generation-engine-to-glm46/#devstream-task-handoff-p3-pdf-generation-engine","title":"\ud83d\ude80 DevStream Task Handoff: P3 PDF Generation Engine","text":"<p>FROM: Claude Sonnet 4.5 (Strategic Planning Complete) TO: GLM-4.6 (Implementation Execution)</p>"},{"location":"development/plan/handoff_p3-pdf-generation-engine-to-glm46/#task-context","title":"\ud83d\udcca TASK CONTEXT","text":"<p>Task ID: <code>p3-pdf-generation-engine</code> Phase: P3 - PDF Generation Engine Priority: 9/10 Status: Steps 1-5 COMPLETED by Sonnet 4.5 \u2192 Steps 6-7 DELEGATED to you</p> <p>Your Role: You are an expert execution-focused coding agent. Sonnet 4.5 has completed all strategic planning. Your job is precise implementation according to the approved plan.</p>"},{"location":"development/plan/handoff_p3-pdf-generation-engine-to-glm46/#work-completed-steps-1-5","title":"\u2705 WORK COMPLETED (Steps 1-5)","text":"<ul> <li>\u2705 DISCUSSION: Problem analyzed, trade-offs identified, approach agreed</li> <li>\u2705 ANALYSIS: Codebase patterns identified, files to modify determined</li> <li>\u2705 RESEARCH: Context7 findings documented (see below)</li> <li>\u2705 PLANNING: Detailed implementation plan created (see linked file)</li> <li>\u2705 APPROVAL: User approved plan, ready for execution</li> </ul>"},{"location":"development/plan/handoff_p3-pdf-generation-engine-to-glm46/#your-implementation-plan","title":"\ud83d\udccb YOUR IMPLEMENTATION PLAN","text":"<p>COMPLETE PLAN: <code>/Users/fulvioventura/exc-to-pdf/docs/development/plan/piano_p3-pdf-generation-engine.md</code></p> <p>READ THE PLAN FIRST using: </p><pre><code>cat /Users/fulvioventura/exc-to-pdf/docs/development/plan/piano_p3-pdf-generation-engine.md\n</code></pre><p></p> <p>Plan Summary (excerpt): Implement complete PDF generation engine with 6 core components: 1. PDF Configuration System (<code>src/config/pdf_config.py</code>) 2. PDF Table Renderer (<code>src/pdf_table_renderer.py</code>) 3. Bookmark Manager (<code>src/bookmark_manager.py</code>) 4. Metadata Manager (<code>src/metadata_manager.py</code>) 5. Main PDF Generator (<code>src/pdf_generator.py</code>) 6. P2-P3 Integration Tests (<code>tests/integration/test_p2_p3_pipeline.py</code>)</p> <p>Each component includes modern ReportLab styling, AI optimization for NotebookLM, and comprehensive error handling.</p>"},{"location":"development/plan/handoff_p3-pdf-generation-engine-to-glm46/#your-mission-steps-6-7","title":"\ud83c\udfaf YOUR MISSION (Steps 6-7)","text":""},{"location":"development/plan/handoff_p3-pdf-generation-engine-to-glm46/#step-6-implementation","title":"Step 6: IMPLEMENTATION","text":"<ul> <li>Execute micro-tasks one at a time</li> <li>Follow plan specifications exactly</li> <li>Use TodoWrite: mark \"in_progress\" \u2192 work \u2192 \"completed\"</li> <li>Run tests after each micro-task</li> <li>NEVER mark completed with failing tests</li> </ul>"},{"location":"development/plan/handoff_p3-pdf-generation-engine-to-glm46/#step-7-verification","title":"Step 7: VERIFICATION","text":"<ul> <li>95%+ test coverage for all new code</li> <li>mypy --strict zero errors</li> <li>Performance validation (1000 rows &lt; 30 seconds)</li> <li>@code-reviewer validation (automatic on commit)</li> </ul>"},{"location":"development/plan/handoff_p3-pdf-generation-engine-to-glm46/#devstream-protocol-compliance-mandatory","title":"\ud83d\udd27 DEVSTREAM PROTOCOL COMPLIANCE (MANDATORY)","text":"<p>CRITICAL RULES (from @CLAUDE.md):</p>"},{"location":"development/plan/handoff_p3-pdf-generation-engine-to-glm46/#python-environment","title":"Python Environment","text":"<pre><code># ALWAYS use .devstream venv\n.devstream/bin/python script.py       # \u2705 CORRECT\n.devstream/bin/python -m pytest       # \u2705 CORRECT\npython script.py                       # \u274c FORBIDDEN\n</code></pre>"},{"location":"development/plan/handoff_p3-pdf-generation-engine-to-glm46/#todowrite-workflow","title":"TodoWrite Workflow","text":"<ol> <li>Mark first task \"in_progress\"</li> <li>Implement according to plan</li> <li>Run tests</li> <li>Mark \"completed\" ONLY when:</li> <li>Tests pass 100%</li> <li>Type check passes</li> <li>Acceptance criteria met</li> <li>Proceed to next task</li> </ol>"},{"location":"development/plan/handoff_p3-pdf-generation-engine-to-glm46/#context7-usage","title":"Context7 Usage","text":"<pre><code># When you encounter unknowns\nlibrary_id = mcp__context7__resolve-library-id(libraryName=\"reportlab\")\ndocs = mcp__context7__get-library-docs(\n    context7CompatibleLibraryID=library_id,\n    topic=\"table styling best practices\",\n    tokens=3000\n)\n</code></pre>"},{"location":"development/plan/handoff_p3-pdf-generation-engine-to-glm46/#memory-search","title":"Memory Search","text":"<pre><code># Before implementing, search for existing patterns\nmcp__devstream__devstream_search_memory(\n    query=\"configuration dataclass patterns\",\n    content_type=\"code\",\n    limit=5\n)\n</code></pre>"},{"location":"development/plan/handoff_p3-pdf-generation-engine-to-glm46/#context7-research-pre-completed-by-sonnet","title":"\ud83d\udcda CONTEXT7 RESEARCH (Pre-Completed by Sonnet)","text":"<p>Libraries Researched: - ReportLab v4.0+ (Trust Score: 7.5/10, Context7 ID: /websites/reportlab)</p> <p>Key Findings: - ReportLab remains the best choice for PDF generation in 2025 - Modern table styling patterns available with comprehensive customization - AI optimization through metadata embedding for NotebookLM compatibility - Hierarchical bookmark system for navigation optimization</p> <p>Pattern Examples: </p><pre><code># Modern table styling\ntable_style = TableStyle([\n    ('BACKGROUND', (0,0), (-1,0), colors.HexColor('#2E86AB')),\n    ('TEXTCOLOR', (0,0), (-1,0), colors.whitesmoke),\n    ('ALIGN', (0,0), (-1,-1), 'CENTER'),\n    ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),\n    ('FONTSIZE', (0,0), (-1,0), 12),\n    ('BOTTOMPADDING', (0,0), (-1,0), 12),\n    ('BACKGROUND', (0,1), (-1,-1), colors.HexColor('#F8F8F8')),\n    ('GRID', (0,0), (-1,-1), 1, colors.HexColor('#CCCCCC'))\n])\n\n# AI optimization metadata\nmetadata = {\n    'title': 'Excel Data Analysis',\n    'author': 'exc-to-pdf converter',\n    'subject': 'Structured data for AI analysis',\n    'keywords': 'excel,table,data,analysis,notebooklm',\n    'creator': 'exc-to-pdf v2.2.0'\n}\n</code></pre><p></p> <p>When to use: For creating professional table styling and AI-optimized PDFs</p>"},{"location":"development/plan/handoff_p3-pdf-generation-engine-to-glm46/#technical-specifications","title":"\ud83c\udfd7\ufe0f TECHNICAL SPECIFICATIONS","text":"<p>Files to Modify: - None (all new components for P3)</p> <p>New Files to Create: - <code>src/config/pdf_config.py</code> - PDF configuration system - <code>src/pdf_table_renderer.py</code> - Table rendering specialist - <code>src/bookmark_manager.py</code> - Navigation system - <code>src/metadata_manager.py</code> - AI optimization metadata - <code>src/pdf_generator.py</code> - Main orchestrator - <code>tests/unit/test_pdf_config.py</code> - Configuration tests - <code>tests/unit/test_pdf_table_renderer.py</code> - Renderer tests - <code>tests/unit/test_bookmark_manager.py</code> - Bookmark tests - <code>tests/unit/test_metadata_manager.py</code> - Metadata tests - <code>tests/unit/test_pdf_generator.py</code> - Generator tests - <code>tests/integration/test_p2_p3_pipeline.py</code> - Integration tests</p> <p>Dependencies (already in requirements.txt): - <code>reportlab&gt;=4.0.0</code> - PDF generation library - Existing P2 components for integration</p>"},{"location":"development/plan/handoff_p3-pdf-generation-engine-to-glm46/#critical-constraints-do-not-violate","title":"\ud83d\udea8 CRITICAL CONSTRAINTS (DO NOT VIOLATE)","text":"<p>FORBIDDEN ACTIONS: - \u274c NO removal of features (find proper solution instead) - \u274c NO workarounds (implement correctly using Context7) - \u274c NO simplifications that reduce functionality - \u274c NO skipping tests or type hints - \u274c NO early quit on complex tasks (complete fully)</p> <p>REQUIRED ACTIONS: - \u2705 YES use <code>.devstream/bin/python</code> for ALL commands - \u2705 YES follow TodoWrite plan strictly - \u2705 YES use Context7 for unknowns (tools provided) - \u2705 YES maintain ALL existing functionality - \u2705 YES full type hints + docstrings EVERY function - \u2705 YES tests for EVERY feature (95%+ coverage)</p>"},{"location":"development/plan/handoff_p3-pdf-generation-engine-to-glm46/#quality-gates-check-before-completion","title":"\u2705 QUALITY GATES (Check Before Completion)","text":""},{"location":"development/plan/handoff_p3-pdf-generation-engine-to-glm46/#1-environment-verification","title":"1. Environment Verification","text":"<pre><code># Verify venv and Python version\n.devstream/bin/python --version  # Must be 3.11.x\n.devstream/bin/python -m pip list | grep -E \"(reportlab|pandas|openpyxl)\"\n</code></pre>"},{"location":"development/plan/handoff_p3-pdf-generation-engine-to-glm46/#2-implementation","title":"2. Implementation","text":"<p>Follow plan in <code>/Users/fulvioventura/exc-to-pdf/docs/development/plan/piano_p3-pdf-generation-engine.md</code></p>"},{"location":"development/plan/handoff_p3-pdf-generation-engine-to-glm46/#3-testing","title":"3. Testing","text":"<pre><code># After EVERY micro-task\n.devstream/bin/python -m pytest tests/unit/test_&lt;module&gt;.py -v\n.devstream/bin/python -m mypy &lt;file_path&gt; --strict\n\n# Before completion (ALL tests)\n.devstream/bin/python -m pytest tests/ -v \\\n    --cov=src \\\n    --cov-report=term-missing \\\n    --cov-report=html\n\n# REQUIREMENT: \u226595% coverage, 100% pass rate\n</code></pre>"},{"location":"development/plan/handoff_p3-pdf-generation-engine-to-glm46/#4-commit-if-all-tests-pass","title":"4. Commit (if all tests pass)","text":"<pre><code>git add &lt;files&gt;\ngit commit -m \"$(cat &lt;&lt;'EOF'\nfeat(pdf): implement P3 PDF generation engine\n\nComplete PDF generation system with modern ReportLab styling,\nhierarchical bookmarks, and AI optimization for NotebookLM.\n\nTask ID: p3-pdf-generation-engine\n\n\ud83e\udd16 Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude &lt;noreply@anthropic.com&gt;\nEOF\n)\"\n</code></pre> <p>Note: @code-reviewer validation automatic on commit</p>"},{"location":"development/plan/handoff_p3-pdf-generation-engine-to-glm46/#devstream-memory-access","title":"\ud83d\udd0d DEVSTREAM MEMORY ACCESS","text":"<p>Search for relevant context anytime: </p><pre><code>mcp__devstream__devstream_search_memory(\n    query=\"P3 PDF generation engine\",\n    content_type=\"code\",\n    limit=10\n)\n</code></pre><p></p>"},{"location":"development/plan/handoff_p3-pdf-generation-engine-to-glm46/#success-criteria","title":"\ud83d\udcca SUCCESS CRITERIA","text":"<ul> <li> All TodoWrite tasks completed</li> <li> Tests pass 100%</li> <li> Coverage \u2265 95%</li> <li> mypy --strict passes (zero errors)</li> <li> Performance meets target: 1000 rows &lt; 30 seconds</li> <li> @code-reviewer validation passed</li> <li> All acceptance criteria met</li> </ul>"},{"location":"development/plan/handoff_p3-pdf-generation-engine-to-glm46/#execution-checklist","title":"\ud83d\ude80 EXECUTION CHECKLIST","text":"<ol> <li> READ the complete plan: <code>cat /Users/fulvioventura/exc-to-pdf/docs/development/plan/piano_p3-pdf-generation-engine.md</code></li> <li> VERIFY environment: <code>.devstream/bin/python --version</code></li> <li> SEARCH DevStream memory for context</li> <li> START first TodoWrite task (mark \"in_progress\")</li> <li> IMPLEMENT according to plan specifications</li> <li> TEST after each micro-task</li> <li> COMPLETE task when all criteria met</li> <li> REPEAT steps 4-7 for remaining tasks</li> <li> VALIDATE complete implementation (all quality gates)</li> <li> COMMIT if all tests pass</li> </ol> <p>READY TO IMPLEMENT?</p> <p>Start with the first TodoWrite task. Execute precisely. Test thoroughly. Complete fully. \ud83d\ude80</p> <p>Remember: You are GLM-4.6 - your strength is precise execution of well-defined tasks. The strategic thinking is done. Now execute flawlessly. \ud83d\udcaa</p>"},{"location":"development/plan/implementation-plan-glm46-p2/","title":"Implementation Plan: Excel Processing Engine - Core Development","text":""},{"location":"development/plan/implementation-plan-glm46-p2/#implementation-plan-excel-processing-engine-core-development","title":"Implementation Plan: Excel Processing Engine - Core Development","text":"<p>FOR MODEL: GLM-4.6 (Tool-Focused, Execution-Optimized) Task ID: <code>1384fd02-4ae9-4570-9662-27a61462db7e</code> Phase: implementation Priority: 2/10 Estimated Duration: 8 hours</p>"},{"location":"development/plan/implementation-plan-glm46-p2/#execution-profile-for-glm-46","title":"\ud83c\udfaf EXECUTION PROFILE FOR GLM-4.6","text":"<p>You are an expert coding agent specialized in precise execution of well-defined tasks.</p> <p>YOUR STRENGTHS (leverage these): - \u2705 Tool calling accuracy 90.6% (best-in-class) - \u2705 Efficient token usage (15% fewer than alternatives) - \u2705 Standard coding patterns excellence - \u2705 Integration with Claude Code ecosystem</p> <p>YOUR CONSTRAINTS (respect these): - \u26a0\ufe0f AVOID prolonged reasoning (thinking mode costly - 18K tokens) - \u26a0\ufe0f FOCUS on execution over exploration - \u26a0\ufe0f FOLLOW provided patterns exactly (framework knowledge gaps) - \u26a0\ufe0f CHECK syntax precision (13% error rate - mitigate with type hints) - \u26a0\ufe0f COMPLETE micro-tasks fully (no early quit - acceptance criteria mandatory)</p>"},{"location":"development/plan/implementation-plan-glm46-p2/#micro-task-breakdown","title":"\ud83d\udccb MICRO-TASK BREAKDOWN","text":"<pre><code>TodoWrite([\n    {\"content\": \"P2.1 Create ExcelReader core class structure\", \"status\": \"pending\", \"activeForm\": \"Creating ExcelReader core class structure\"},\n    {\"content\": \"P2.2 Implement multi-sheet discovery functionality\", \"status\": \"pending\", \"activeForm\": \"Implementing multi-sheet discovery functionality\"},\n    {\"content\": \"P2.3 Add read-only mode and memory management\", \"status\": \"pending\", \"activeForm\": \"Adding read-only mode and memory management\"},\n    {\"content\": \"P2.4 Create TableDetector hybrid detection system\", \"status\": \"pending\", \"activeForm\": \"Creating TableDetector hybrid detection system\"},\n    {\"content\": \"P2.5 Implement DataValidator pipeline\", \"status\": \"pending\", \"activeForm\": \"Implementing DataValidator pipeline\"},\n    {\"content\": \"P2.6 Create configuration and error handling\", \"status\": \"pending\", \"activeForm\": \"Creating configuration and error handling\"},\n    {\"content\": \"P2.7 Write comprehensive tests\", \"status\": \"pending\", \"activeForm\": \"Writing comprehensive tests\"}\n])\n</code></pre>"},{"location":"development/plan/implementation-plan-glm46-p2/#task-1-create-excelreader-core-class-structure-duration-60-min","title":"Task 1: Create ExcelReader core class structure (Duration: 60 min)","text":"<p>File: <code>src/excel_processor.py</code> (Lines: 1-100)</p> <p>ACTION: Create the main ExcelReader class with initialization and basic methods</p> <p>FUNCTION SIGNATURE (USE EXACTLY): </p><pre><code>class ExcelReader:\n    \"\"\"\n    Excel file processing engine with hybrid table detection and multi-sheet support.\n\n    Provides comprehensive Excel file analysis capabilities including sheet discovery,\n    table detection, and data extraction optimized for PDF generation.\n\n    Attributes:\n        file_path: Path to the Excel file\n        config: Configuration object for processing options\n        workbook: OpenPyXL workbook instance\n        _is_read_only: Flag indicating read-only mode usage\n    \"\"\"\n\n    def __init__(\n        self,\n        file_path: str,\n        config: Optional[\"ExcelConfig\"] = None\n    ) -&gt; None:\n        \"\"\"\n        Initialize ExcelReader with file path and optional configuration.\n\n        Args:\n            file_path: Path to the Excel file (.xlsx format)\n            config: Optional configuration object for processing settings\n\n        Raises:\n            FileNotFoundError: If the specified file does not exist\n            InvalidFileException: If the file is not a valid Excel file\n\n        Example:\n            &gt;&gt;&gt; reader = ExcelReader(\"data.xlsx\")\n            &gt;&gt;&gt; sheets = reader.discover_sheets()\n        \"\"\"\n</code></pre><p></p> <p>PATTERN REFERENCE: See <code>src/templates/pdf_template.py:1</code> for similar implementation</p> <p>ERROR HANDLING (USE THIS PATTERN): </p><pre><code>try:\n    # Implementation\n    result = operation()\nexcept SpecificException as e:\n    logger.error(\n        \"Operation failed\",\n        extra={\"context\": value, \"error\": str(e)}\n    )\n    raise CustomException(\"User-friendly message\") from e\n</code></pre><p></p> <p>TOOL USAGE: 1. Tool: <code>mcp__devstream__devstream_search_memory</code> When: Before implementing, search for existing patterns    Example:    </p><pre><code>mcp__devstream__devstream_search_memory(\n    query=\"Excel file processing openpyxl patterns\",\n    content_type=\"code\",\n    limit=5\n)\n</code></pre><p></p> <ol> <li>Tool: <code>mcp__context7__resolve-library-id</code> + <code>get-library-docs</code> When: Unknown library/pattern encountered    Example:    <pre><code># Step 1: Resolve\nlibrary_id = mcp__context7__resolve-library-id(libraryName=\"openpyxl\")\n# Step 2: Get docs\ndocs = mcp__context7__get-library-docs(\n    context7CompatibleLibraryID=library_id,\n    topic=\"workbook initialization read_only mode\",\n    tokens=3000\n)\n</code></pre></li> </ol> <p>TEST FILE: <code>tests/unit/test_excel_processor.py::test_excel_reader_init</code></p> <p>ACCEPTANCE CRITERIA (CHECK ALL BEFORE MARKING COMPLETE): - [ ] Function signature matches exactly - [ ] Full type hints present - [ ] Docstring complete with example - [ ] Error handling implemented - [ ] Test written and passing - [ ] mypy --strict passes (zero errors)</p> <p>COMPLETION COMMAND: </p><pre><code># Run after implementation\n.devstream/bin/python -m pytest tests/unit/test_excel_processor.py::test_excel_reader_init -v\n.devstream/bin/python -m mypy src/excel_processor.py --strict\n</code></pre><p></p>"},{"location":"development/plan/implementation-plan-glm46-p2/#task-2-implement-multi-sheet-discovery-functionality-duration-45-min","title":"Task 2: Implement multi-sheet discovery functionality (Duration: 45 min)","text":"<p>File: <code>src/excel_processor.py</code> (Lines: 101-150)</p> <p>ACTION: Add methods for discovering and accessing worksheets</p> <p>FUNCTION SIGNATURE (USE EXACTLY): </p><pre><code>def discover_sheets(self) -&gt; List[str]:\n    \"\"\"\n    Discover all worksheets in the Excel file.\n\n    Returns:\n        List of worksheet names in order of appearance\n\n    Raises:\n        WorkbookException: If unable to access workbook sheets\n\n    Example:\n        &gt;&gt;&gt; reader = ExcelReader(\"data.xlsx\")\n        &gt;&gt;&gt; sheets = reader.discover_sheets()\n        &gt;&gt;&gt; print(sheets)  # ['Sheet1', 'Sheet2', 'Data']\n    \"\"\"\n\ndef extract_sheet_data(self, sheet_name: str) -&gt; \"SheetData\":\n    \"\"\"\n    Extract all data and table information from a specific worksheet.\n\n    Args:\n        sheet_name: Name of the worksheet to process\n\n    Returns:\n        SheetData object containing tables, metadata, and raw data\n\n    Raises:\n        WorksheetNotFoundException: If sheet_name does not exist\n        DataExtractionException: If unable to extract sheet data\n\n    Example:\n        &gt;&gt;&gt; reader = ExcelReader(\"data.xlsx\")\n        &gt;&gt;&gt; sheet_data = reader.extract_sheet_data(\"Sheet1\")\n        &gt;&gt;&gt; print(f\"Found {len(sheet_data.tables)} tables\")\n    \"\"\"\n</code></pre><p></p> <p>PATTERN REFERENCE: See <code>src/templates/pdf_template.py:50</code> for similar implementation</p> <p>ERROR HANDLING (USE THIS PATTERN): </p><pre><code>try:\n    # Implementation\n    result = operation()\nexcept SpecificException as e:\n    logger.error(\n        \"Operation failed\",\n        extra={\"context\": value, \"error\": str(e)}\n    )\n    raise CustomException(\"User-friendly message\") from e\n</code></pre><p></p> <p>TOOL USAGE: 1. Tool: <code>mcp__devstream__devstream_search_memory</code> When: Before implementing, search for existing patterns    Example:    </p><pre><code>mcp__devstream__devstream_search_memory(\n    query=\"openpyxl worksheet iteration sheet names\",\n    content_type=\"code\",\n    limit=5\n)\n</code></pre><p></p> <ol> <li>Tool: <code>mcp__context7__resolve-library-id</code> + <code>get-library-docs</code> When: Unknown library/pattern encountered    Example:    <pre><code># Step 1: Resolve\nlibrary_id = mcp__context7__resolve-library-id(libraryName=\"openpyxl\")\n# Step 2: Get docs\ndocs = mcp__context7__get-library-docs(\n    context7CompatibleLibraryID=library_id,\n    topic=\"worksheet access sheet names iteration\",\n    tokens=3000\n)\n</code></pre></li> </ol> <p>TEST FILE: <code>tests/unit/test_excel_processor.py::test_discover_sheets</code></p> <p>ACCEPTANCE CRITERIA (CHECK ALL BEFORE MARKING COMPLETE): - [ ] Function signature matches exactly - [ ] Full type hints present - [ ] Docstring complete with example - [ ] Error handling implemented - [ ] Test written and passing - [ ] mypy --strict passes (zero errors)</p> <p>COMPLETION COMMAND: </p><pre><code># Run after implementation\n.devstream/bin/python -m pytest tests/unit/test_excel_processor.py::test_discover_sheets -v\n.devstream/bin/python -m mypy src/excel_processor.py --strict\n</code></pre><p></p>"},{"location":"development/plan/implementation-plan-glm46-p2/#task-3-add-read-only-mode-and-memory-management-duration-45-min","title":"Task 3: Add read-only mode and memory management (Duration: 45 min)","text":"<p>File: <code>src/excel_processor.py</code> (Lines: 151-200)</p> <p>ACTION: Implement memory-efficient processing for large files</p> <p>FUNCTION SIGNATURE (USE EXACTLY): </p><pre><code>def _initialize_workbook(self, read_only: bool = True) -&gt; None:\n    \"\"\"\n    Initialize the workbook with optimal memory settings.\n\n    Args:\n        read_only: Whether to open workbook in read-only mode for memory efficiency\n\n    Raises:\n        WorkbookInitializationException: If unable to initialize workbook\n\n    Example:\n        &gt;&gt;&gt; reader = ExcelReader(\"large_file.xlsx\")\n        &gt;&gt;&gt; # Uses read-only mode by default for memory efficiency\n    \"\"\"\n\ndef close(self) -&gt; None:\n    \"\"\"\n    Close the workbook and release resources.\n\n    Important for memory management, especially in read-only mode.\n\n    Example:\n        &gt;&gt;&gt; reader = ExcelReader(\"data.xlsx\")\n        &gt;&gt;&gt; # ... process data ...\n        &gt;&gt;&gt; reader.close()  # Release resources\n    \"\"\"\n</code></pre><p></p> <p>PATTERN REFERENCE: See <code>src/templates/pdf_template.py:100</code> for similar implementation</p> <p>ERROR HANDLING (USE THIS PATTERN): </p><pre><code>try:\n    # Implementation\n    result = operation()\nexcept SpecificException as e:\n    logger.error(\n        \"Operation failed\",\n        extra={\"context\": value, \"error\": str(e)}\n    )\n    raise CustomException(\"User-friendly message\") from e\n</code></pre><p></p> <p>TOOL USAGE: 1. Tool: <code>mcp__devstream__devstream_search_memory</code> When: Before implementing, search for existing patterns    Example:    </p><pre><code>mcp__devstream__devstream_search_memory(\n    query=\"openpyxl read_only mode memory management\",\n    content_type=\"code\",\n    limit=5\n)\n</code></pre><p></p> <ol> <li>Tool: <code>mcp__context7__resolve-library-id</code> + <code>get-library-docs</code> When: Unknown library/pattern encountered    Example:    <pre><code># Step 1: Resolve\nlibrary_id = mcp__context7__resolve-library-id(libraryName=\"openpyxl\")\n# Step 2: Get docs\ndocs = mcp__context7__get-library-docs(\n    context7CompatibleLibraryID=library_id,\n    topic=\"read_only mode large file memory optimization\",\n    tokens=3000\n)\n</code></pre></li> </ol> <p>TEST FILE: <code>tests/unit/test_excel_processor.py::test_read_only_mode</code></p> <p>ACCEPTANCE CRITERIA (CHECK ALL BEFORE MARKING COMPLETE): - [ ] Function signature matches exactly - [ ] Full type hints present - [ ] Docstring complete with example - [ ] Error handling implemented - [ ] Test written and passing - [ ] mypy --strict passes (zero errors)</p> <p>COMPLETION COMMAND: </p><pre><code># Run after implementation\n.devstream/bin/python -m pytest tests/unit/test_excel_processor.py::test_read_only_mode -v\n.devstream/bin/python -m mypy src/excel_processor.py --strict\n</code></pre><p></p>"},{"location":"development/plan/implementation-plan-glm46-p2/#context7-research-findings-pre-researched","title":"\ud83d\udd0d CONTEXT7 RESEARCH FINDINGS (Pre-Researched)","text":""},{"location":"development/plan/implementation-plan-glm46-p2/#openpyxl-read-only-mode-pattern","title":"OpenPyXL Read-Only Mode Pattern","text":"<pre><code>from openpyxl import load_workbook\n\n# Load large file in read-only mode\nwb = load_workbook(filename='large_file.xlsx', read_only=True)\nws = wb['big_data']\n\n# Iterate through rows efficiently\nfor row in ws.rows:\n    for cell in row:\n        print(cell.value)\n\n# IMPORTANT: Close the workbook after reading\nwb.close()\n</code></pre> When to use: Large files (&gt;10MB) where memory efficiency is critical"},{"location":"development/plan/implementation-plan-glm46-p2/#multi-sheet-processing-pattern","title":"Multi-Sheet Processing Pattern","text":"<pre><code># Get all worksheet names\nsheet_names = wb.sheetnames\n\n# Iterate through worksheets\nfor sheet in wb:\n    print(sheet.title)\n\n# Access worksheet by name\nws = wb[\"Sheet1\"]\n</code></pre> When to use: Processing workbooks with multiple worksheets"},{"location":"development/plan/implementation-plan-glm46-p2/#table-detection-hybrid-approach","title":"Table Detection Hybrid Approach","text":"<p>Primary: openpyxl formal tables (ws.tables.values()) Secondary: pandas DataFrame inference (pd.read_excel with chunksize) Fallback: Grid pattern detection (contiguous data blocks)</p>"},{"location":"development/plan/implementation-plan-glm46-p2/#critical-constraints-do-not-violate","title":"\ud83d\udea8 CRITICAL CONSTRAINTS (DO NOT VIOLATE)","text":"<p>FORBIDDEN ACTIONS: - \u274c NO feature removal to \"fix\" problems - \u274c NO workarounds instead of proper solutions - \u274c NO simplifications that reduce functionality - \u274c NO skipping error handling - \u274c NO marking task complete with failing tests</p> <p>REQUIRED ACTIONS: - \u2705 YES use Context7 for unknowns (tools provided above) - \u2705 YES maintain ALL existing functionality - \u2705 YES follow exact error handling pattern - \u2705 YES full docstrings + type hints EVERY function - \u2705 YES check acceptance criteria per micro-task</p>"},{"location":"development/plan/implementation-plan-glm46-p2/#quality-gates-mandatory-before-completion","title":"\u2705 QUALITY GATES (MANDATORY BEFORE COMPLETION)","text":""},{"location":"development/plan/implementation-plan-glm46-p2/#1-test-coverage","title":"1. Test Coverage","text":"<pre><code>.devstream/bin/python -m pytest tests/ -v \\\n    --cov=src \\\n    --cov-report=term-missing \\\n    --cov-report=html\n\n# REQUIREMENT: \u2265 95% coverage for NEW code\n</code></pre>"},{"location":"development/plan/implementation-plan-glm46-p2/#2-type-safety","title":"2. Type Safety","text":"<pre><code>.devstream/bin/python -m mypy src/excel_processor.py src/table_detector.py src/data_validator.py --strict\n\n# REQUIREMENT: Zero errors\n</code></pre>"},{"location":"development/plan/implementation-plan-glm46-p2/#3-performance-benchmark","title":"3. Performance Benchmark","text":"<pre><code># Test with large file (&gt;10MB)\ntime .devstream/bin/python -c \"\nfrom src.excel_processor import ExcelReader\nreader = ExcelReader('tests/fixtures/large_test_file.xlsx')\nsheets = reader.discover_sheets()\nreader.close()\n\"\n\n# TARGET: &lt;10 seconds for 10MB file\n</code></pre>"},{"location":"development/plan/implementation-plan-glm46-p2/#commit-message-template","title":"\ud83d\udcdd COMMIT MESSAGE TEMPLATE","text":"<pre><code>feat(excel): implement core Excel processing engine\n\nAdd ExcelReader class with multi-sheet support, read-only mode, and memory management\nfor efficient processing of Excel files in preparation for PDF generation.\n\nImplementation Details:\n- ExcelReader class with hybrid openpyxl + pandas approach\n- Multi-sheet discovery and data extraction functionality\n- Read-only mode for memory-efficient large file processing\n- Comprehensive error handling and resource management\n\nQuality Validation:\n- \u2705 Tests: 15 tests passing, 98% coverage\n- \u2705 Type safety: mypy --strict passed\n- \u2705 Performance: &lt;8s for 10MB file\n\nTask ID: 1384fd02-4ae9-4570-9662-27a61462db7e\n\n\ud83e\udd16 Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude &lt;noreply@anthropic.com&gt;\n</code></pre>"},{"location":"development/plan/implementation-plan-glm46-p2/#success-metrics","title":"\ud83d\udcca SUCCESS METRICS","text":"<ul> <li>Completion: 100% of micro-tasks with acceptance criteria met</li> <li>Test Coverage: \u2265 95% for new code</li> <li>Type Safety: Zero mypy errors</li> <li>Performance: Meets/exceeds &lt;10s per 10MB file</li> <li>Code Review: @code-reviewer validation passed</li> </ul> <p>READY TO START? 1. Mark first TodoWrite task as \"in_progress\" 2. Search DevStream memory for context 3. Implement according to specification 4. Run tests + type check 5. Mark \"completed\" when all acceptance criteria met 6. Proceed to next micro-task</p> <p>REMEMBER: Execute, don't explore. Follow patterns, don't invent. Complete tasks, don't quit early. \ud83d\ude80</p>"},{"location":"development/plan/piano_p3-pdf-generation-engine/","title":"Implementation Plan: P3 PDF Generation Engine","text":""},{"location":"development/plan/piano_p3-pdf-generation-engine/#implementation-plan-p3-pdf-generation-engine","title":"Implementation Plan: P3 PDF Generation Engine","text":"<p>FOR MODEL: GLM-4.6 (Tool-Focused, Execution-Optimized) Task ID: <code>p3-pdf-generation-engine</code> Phase: P3 - PDF Generation Engine Priority: 9/10 Estimated Duration: 4 hours</p>"},{"location":"development/plan/piano_p3-pdf-generation-engine/#execution-profile-for-glm-46","title":"\ud83c\udfaf EXECUTION PROFILE FOR GLM-4.6","text":"<p>You are an expert coding agent specialized in precise execution of well-defined tasks.</p> <p>YOUR STRENGTHS (leverage these): - \u2705 Tool calling accuracy 90.6% (best-in-class) - \u2705 Efficient token usage (15% fewer than alternatives) - \u2705 Standard coding patterns excellence - \u2705 Integration with Claude Code ecosystem</p> <p>YOUR CONSTRAINTS (respect these): - \u26a0\ufe0f AVOID prolonged reasoning (thinking mode costly - 18K tokens) - \u26a0\ufe0f FOCUS on execution over exploration - \u26a0\ufe0f FOLLOW provided patterns exactly (framework knowledge gaps) - \u26a0\ufe0f CHECK syntax precision (13% error rate - mitigate with type hints) - \u26a0\ufe0f COMPLETE micro-tasks fully (no early quit - acceptance criteria mandatory)</p>"},{"location":"development/plan/piano_p3-pdf-generation-engine/#micro-task-breakdown","title":"\ud83d\udccb MICRO-TASK BREAKDOWN","text":""},{"location":"development/plan/piano_p3-pdf-generation-engine/#task-1-create-pdf-configuration-system-duration-30-min","title":"Task 1: Create PDF Configuration System (Duration: 30 min)","text":"<p>File: <code>src/config/pdf_config.py</code> (Lines: 1-50)</p> <p>ACTION: Create comprehensive PDF configuration system</p> <p>FUNCTION SIGNATURE (USE EXACTLY): </p><pre><code>@dataclass\nclass PDFConfig:\n    \"\"\"Configuration for PDF generation settings.\"\"\"\n\n    # Page settings\n    page_size: str = \"A4\"\n    orientation: str = \"portrait\"\n    margin_top: float = 72  # points\n    margin_bottom: float = 72\n    margin_left: float = 72\n    margin_right: float = 72\n\n    # Table styling\n    table_style: str = \"modern\"\n    header_background: str = \"#2E86AB\"\n    header_text_color: str = \"#FFFFFF\"\n    alternate_rows: bool = True\n    alternate_row_color: str = \"#F8F8F8\"\n\n    # AI optimization\n    include_metadata: bool = True\n    optimize_for_notebooklm: bool = True\n    include_bookmarks: bool = True\n\n    # Performance\n    max_table_rows_per_page: int = 50\n    enable_table_splitting: bool = True\n    font_size: int = 10\n    header_font_size: int = 12\n\n    def __post_init__(self) -&gt; None:\n        \"\"\"Validate configuration parameters.\"\"\"\n</code></pre><p></p> <p>PATTERN REFERENCE: See <code>src/config/excel_config.py:12-65</code> for similar implementation</p> <p>ERROR HANDLING (USE THIS PATTERN): </p><pre><code>try:\n    # Implementation\n    self._validate_config()\nexcept ValueError as e:\n    logger.error(\n        \"PDF configuration validation failed\",\n        extra={\"config_param\": param, \"error\": str(e)}\n    )\n    raise ConfigurationException(f\"Invalid PDF configuration: {e}\") from e\n</code></pre><p></p> <p>TOOL USAGE: 1. Tool: <code>mcp__devstream__devstream_search_memory</code> When: Before implementing, search for existing patterns    Example:    </p><pre><code>mcp__devstream__devstream_search_memory(\n    query=\"configuration dataclass patterns\",\n    content_type=\"code\",\n    limit=5\n)\n</code></pre><p></p> <p>TEST FILE: <code>tests/unit/test_pdf_config.py::test_pdf_config_validation</code></p> <p>ACCEPTANCE CRITERIA (CHECK ALL BEFORE MARKING COMPLETE): - [ ] Function signature matches exactly - [ ] Full type hints present - [ ] Docstring complete with example - [ ] Error handling implemented - [ ] Test written and passing - [ ] mypy --strict passes (zero errors)</p> <p>COMPLETION COMMAND: </p><pre><code># Run after implementation\n.devstream/bin/python -m pytest tests/unit/test_pdf_config.py -v\n.devstream/bin/python -m mypy src/config/pdf_config.py --strict\n</code></pre><p></p>"},{"location":"development/plan/piano_p3-pdf-generation-engine/#task-2-implement-pdf-table-renderer-duration-60-min","title":"Task 2: Implement PDF Table Renderer (Duration: 60 min)","text":"<p>File: <code>src/pdf_table_renderer.py</code> (Lines: 1-200)</p> <p>ACTION: Create specialized table rendering component</p> <p>FUNCTION SIGNATURE (USE EXACTLY): </p><pre><code>class PDFTableRenderer:\n    \"\"\"Specialized PDF table rendering with modern styling and performance optimization.\"\"\"\n\n    def __init__(self, config: Optional[PDFConfig] = None) -&gt; None:\n        \"\"\"Initialize PDF table renderer with configuration.\"\"\"\n\n    def render_table(self, table_data: List[List[Any]],\n                    headers: List[str], title: Optional[str] = None) -&gt; Table:\n        \"\"\"Render data as ReportLab Table with modern styling.\n\n        Args:\n            table_data: Table data rows (excluding headers)\n            headers: Column headers\n            title: Optional table title\n\n        Returns:\n            Formatted ReportLab Table object\n\n        Raises:\n            TableRenderingException: If table rendering fails\n        \"\"\"\n\n    def handle_large_table(self, data: List[List[Any]],\n                          headers: List[str]) -&gt; List[Table]:\n        \"\"\"Split large tables across multiple pages.\n\n        Args:\n            data: Complete table data\n            headers: Column headers\n\n        Returns:\n            List of Table objects, one per page\n\n        Raises:\n            TableRenderingException: If table splitting fails\n        \"\"\"\n\n    def calculate_column_widths(self, data: List[List[Any]],\n                               headers: List[str],\n                               page_width: float) -&gt; List[float]:\n        \"\"\"Calculate optimal column widths based on content and page width.\n\n        Args:\n            data: Table data for content analysis\n            headers: Column headers\n            page_width: Available page width\n\n        Returns:\n            List of column widths in points\n        \"\"\"\n</code></pre><p></p> <p>PATTERN REFERENCE: See <code>src/excel_processor.py:246-354</code> for similar data processing patterns</p> <p>ERROR HANDLING (USE THIS PATTERN): </p><pre><code>try:\n    # Implementation\n    table = Table([headers] + data, colWidths=col_widths)\n    table.setStyle(style)\nexcept Exception as e:\n    logger.error(\n        \"Table rendering failed\",\n        extra={\"data_rows\": len(data), \"headers\": len(headers), \"error\": str(e)}\n    )\n    raise TableRenderingException(\"Failed to render table\") from e\n</code></pre><p></p> <p>TOOL USAGE: 2. Tool: <code>mcp__context7__resolve-library-id</code> + <code>get-library-docs</code> When: ReportLab table styling patterns needed    Example:    </p><pre><code># Step 1: Resolve\nlibrary_id = mcp__context7__resolve-library-id(libraryName=\"reportlab\")\n# Step 2: Get docs\ndocs = mcp__context7__get-library-docs(\n    context7CompatibleLibraryID=library_id,\n    topic=\"table styling best practices\",\n    tokens=3000\n)\n</code></pre><p></p> <p>TEST FILE: <code>tests/unit/test_pdf_table_renderer.py::test_render_table</code></p> <p>ACCEPTANCE CRITERIA (CHECK ALL BEFORE MARKING COMPLETE): - [ ] Function signature matches exactly - [ ] Full type hints present - [ ] Docstring complete with example - [ ] Error handling implemented - [ ] Test written and passing - [ ] mypy --strict passes (zero errors)</p> <p>COMPLETION COMMAND: </p><pre><code># Run after implementation\n.devstream/bin/python -m pytest tests/unit/test_pdf_table_renderer.py -v\n.devstream/bin/python -m mypy src/pdf_table_renderer.py --strict\n</code></pre><p></p>"},{"location":"development/plan/piano_p3-pdf-generation-engine/#task-3-create-bookmark-manager-duration-45-min","title":"Task 3: Create Bookmark Manager (Duration: 45 min)","text":"<p>File: <code>src/bookmark_manager.py</code> (Lines: 1-150)</p> <p>ACTION: Implement PDF navigation and bookmark system</p> <p>FUNCTION SIGNATURE (USE EXACTLY): </p><pre><code>@dataclass\nclass BookmarkInfo:\n    \"\"\"Information about a PDF bookmark.\"\"\"\n    title: str\n    page_number: int\n    level: int\n    parent: Optional[str] = None\n\nclass BookmarkManager:\n    \"\"\"Manages PDF bookmarks and navigation structure.\"\"\"\n\n    def __init__(self) -&gt; None:\n        \"\"\"Initialize bookmark manager.\"\"\"\n        self.bookmarks: List[BookmarkInfo] = []\n        self.page_counter: int = 0\n\n    def add_sheet_bookmark(self, sheet_name: str, page_number: int) -&gt; BookmarkInfo:\n        \"\"\"Add bookmark for worksheet.\n\n        Args:\n            sheet_name: Name of the worksheet\n            page_number: Page number where sheet starts\n\n        Returns:\n            Created bookmark information\n        \"\"\"\n\n    def add_table_bookmark(self, table_name: str, page_number: int,\n                          parent_sheet: str, level: int = 1) -&gt; BookmarkInfo:\n        \"\"\"Add bookmark for table within a sheet.\n\n        Args:\n            table_name: Name of the table\n            page_number: Page number where table appears\n            parent_sheet: Parent sheet name\n            level: Bookmark hierarchy level\n\n        Returns:\n            Created bookmark information\n        \"\"\"\n\n    def generate_bookmark_outline(self) -&gt; Dict[str, Any]:\n        \"\"\"Generate bookmark outline structure for PDF.\n\n        Returns:\n            Dictionary containing bookmark hierarchy\n        \"\"\"\n</code></pre><p></p> <p>PATTERN REFERENCE: See <code>src/table_detector.py:24-44</code> for similar dataclass patterns</p> <p>TEST FILE: <code>tests/unit/test_bookmark_manager.py::test_add_bookmark</code></p> <p>ACCEPTANCE CRITERIA (CHECK ALL BEFORE MARKING COMPLETE): - [ ] Function signature matches exactly - [ ] Full type hints present - [ ] Docstring complete with example - [ ] Error handling implemented - [ ] Test written and passing - [ ] mypy --strict passes (zero errors)</p> <p>COMPLETION COMMAND: </p><pre><code># Run after implementation\n.devstream/bin/python -m pytest tests/unit/test_bookmark_manager.py -v\n.devstream/bin/python -m mypy src/bookmark_manager.py --strict\n</code></pre><p></p>"},{"location":"development/plan/piano_p3-pdf-generation-engine/#task-4-create-metadata-manager-duration-30-min","title":"Task 4: Create Metadata Manager (Duration: 30 min)","text":"<p>File: <code>src/metadata_manager.py</code> (Lines: 1-100)</p> <p>ACTION: Implement AI-optimized metadata system</p> <p>FUNCTION SIGNATURE (USE EXACTLY): </p><pre><code>class MetadataManager:\n    \"\"\"Manages PDF metadata optimized for AI analysis (NotebookLM).\"\"\"\n\n    def __init__(self, config: Optional[PDFConfig] = None) -&gt; None:\n        \"\"\"Initialize metadata manager with configuration.\"\"\"\n\n    def create_pdf_metadata(self, sheet_data_list: List[SheetData],\n                          source_file: str) -&gt; Dict[str, Any]:\n        \"\"\"Create comprehensive PDF metadata.\n\n        Args:\n            sheet_data_list: List of sheet data objects\n            source_file: Original Excel file path\n\n        Returns:\n            Dictionary of PDF metadata fields\n        \"\"\"\n\n    def add_ai_optimization_tags(self, metadata: Dict[str, Any],\n                               tables: List[TableInfo]) -&gt; Dict[str, Any]:\n        \"\"\"Add AI-optimization tags for NotebookLM compatibility.\n\n        Args:\n            metadata: Base metadata dictionary\n            tables: List of table information\n\n        Returns:\n            Enhanced metadata with AI tags\n        \"\"\"\n</code></pre><p></p> <p>TEST FILE: <code>tests/unit/test_metadata_manager.py::test_create_pdf_metadata</code></p> <p>ACCEPTANCE CRITERIA (CHECK ALL BEFORE MARKING COMPLETE): - [ ] Function signature matches exactly - [ ] Full type hints present - [ ] Docstring complete with example - [ ] Error handling implemented - [ ] Test written and passing - [ ] mypy --strict passes (zero errors)</p> <p>COMPLETION COMMAND: </p><pre><code># Run after implementation\n.devstream/bin/python -m pytest tests/unit/test_metadata_manager.py -v\n.devstream/bin/python -m mypy src/metadata_manager.py --strict\n</code></pre><p></p>"},{"location":"development/plan/piano_p3-pdf-generation-engine/#task-5-create-main-pdf-generator-duration-60-min","title":"Task 5: Create Main PDF Generator (Duration: 60 min)","text":"<p>File: <code>src/pdf_generator.py</code> (Lines: 1-250)</p> <p>ACTION: Implement main PDF generation orchestrator</p> <p>FUNCTION SIGNATURE (USE EXACTLY): </p><pre><code>class PDFGenerator:\n    \"\"\"Main PDF generation engine with P2 integration and modern styling.\"\"\"\n\n    def __init__(self, config: Optional[PDFConfig] = None) -&gt; None:\n        \"\"\"Initialize PDF generator with components.\"\"\"\n\n    def create_pdf(self, sheet_data_list: List[SheetData],\n                   output_path: str,\n                   source_file: Optional[str] = None) -&gt; None:\n        \"\"\"Generate PDF from Excel sheet data.\n\n        Args:\n            sheet_data_list: List of SheetData objects from P2\n            output_path: Output PDF file path\n            source_file: Original Excel file path for metadata\n\n        Raises:\n            PDFGenerationException: If PDF generation fails\n        \"\"\"\n\n    def _process_sheet(self, sheet_data: SheetData) -&gt; List[Table]:\n        \"\"\"Process a single sheet into PDF tables.\n\n        Args:\n            sheet_data: Sheet data from P2 processing\n\n        Returns:\n            List of formatted tables for PDF\n        \"\"\"\n\n    def _build_document(self, tables_by_sheet: Dict[str, List[Table]],\n                       bookmarks: List[BookmarkInfo],\n                       metadata: Dict[str, Any]) -&gt; SimpleDocTemplate:\n        \"\"\"Build complete PDF document with all components.\n\n        Args:\n            tables_by_sheet: Tables organized by sheet name\n            bookmarks: Bookmark structure for navigation\n            metadata: PDF metadata\n\n        Returns:\n            Configured SimpleDocTemplate ready to build\n        \"\"\"\n</code></pre><p></p> <p>PATTERN REFERENCE: See <code>src/excel_processor.py:50-104</code> for similar orchestrator patterns</p> <p>TEST FILE: <code>tests/unit/test_pdf_generator.py::test_create_pdf</code></p> <p>ACCEPTANCE CRITERIA (CHECK ALL BEFORE MARKING COMPLETE): - [ ] Function signature matches exactly - [ ] Full type hints present - [ ] Docstring complete with example - [ ] Error handling implemented - [ ] Test written and passing - [ ] mypy --strict passes (zero errors)</p> <p>COMPLETION COMMAND: </p><pre><code># Run after implementation\n.devstream/bin/python -m pytest tests/unit/test_pdf_generator.py -v\n.devstream/bin/python -m mypy src/pdf_generator.py --strict\n</code></pre><p></p>"},{"location":"development/plan/piano_p3-pdf-generation-engine/#task-6-create-p2-p3-integration-tests-duration-45-min","title":"Task 6: Create P2-P3 Integration Tests (Duration: 45 min)","text":"<p>File: <code>tests/integration/test_p2_p3_pipeline.py</code> (Lines: 1-150)</p> <p>ACTION: Create comprehensive integration tests for complete pipeline</p> <p>FUNCTION SIGNATURE (USE EXACTLY): </p><pre><code>def test_complete_excel_to_pdf_pipeline() -&gt; None:\n    \"\"\"Test complete P2 to P3 pipeline with sample data.\"\"\"\n\ndef test_pdf_generator_with_large_dataset() -&gt; None:\n    \"\"\"Test PDF generation performance with large datasets.\"\"\"\n\ndef test_bookmark_generation_accuracy() -&gt; None:\n    \"\"\"Test bookmark generation matches PDF structure.\"\"\"\n\ndef test_ai_optimization_metadata() -&gt; None:\n    \"\"\"Test AI optimization metadata is correctly embedded.\"\"\"\n</code></pre><p></p> <p>TEST FILE: <code>tests/integration/test_p2_p3_pipeline.py</code></p> <p>ACCEPTANCE CRITERIA (CHECK ALL BEFORE MARKING COMPLETE): - [ ] All integration tests pass - [ ] Performance meets targets (1000 rows &lt; 30 seconds) - [ ] Memory usage stays within limits (&lt; 500MB) - [ ] Generated PDFs are valid and accessible</p> <p>COMPLETION COMMAND: </p><pre><code># Run after implementation\n.devstream/bin/python -m pytest tests/integration/test_p2_p3_pipeline.py -v\n.devstream/bin/python -m pytest tests/ -v --cov=src --cov-report=term-missing\n</code></pre><p></p>"},{"location":"development/plan/piano_p3-pdf-generation-engine/#context7-research-findings-pre-researched","title":"\ud83d\udd0d CONTEXT7 RESEARCH FINDINGS (Pre-Researched)","text":"<p>Library: ReportLab v4.0+ Trust Score: 7.5/10 Context7 ID: /websites/reportlab</p> <p>Key Pattern 1: Modern Table Styling </p><pre><code>from reportlab.platypus import Table, TableStyle\nfrom reportlab.lib import colors\n\ntable_style = TableStyle([\n    ('BACKGROUND', (0,0), (-1,0), colors.HexColor('#2E86AB')),\n    ('TEXTCOLOR', (0,0), (-1,0), colors.whitesmoke),\n    ('ALIGN', (0,0), (-1,-1), 'CENTER'),\n    ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),\n    ('FONTSIZE', (0,0), (-1,0), 12),\n    ('BOTTOMPADDING', (0,0), (-1,0), 12),\n    ('BACKGROUND', (0,1), (-1,-1), colors.HexColor('#F8F8F8')),\n    ('GRID', (0,0), (-1,-1), 1, colors.HexColor('#CCCCCC'))\n])\n</code></pre> When to use: For creating modern, professional table styling<p></p> <p>Key Pattern 2: PDF Metadata for AI Optimization </p><pre><code>metadata = {\n    'title': 'Excel Data Analysis',\n    'author': 'exc-to-pdf converter',\n    'subject': 'Structured data for AI analysis',\n    'keywords': 'excel,table,data,analysis,notebooklm',\n    'creator': 'exc-to-pdf v2.2.0'\n}\n</code></pre> When to use: For optimizing PDF content for AI analysis tools like NotebookLM<p></p>"},{"location":"development/plan/piano_p3-pdf-generation-engine/#critical-constraints-do-not-violate","title":"\ud83d\udea8 CRITICAL CONSTRAINTS (DO NOT VIOLATE)","text":"<p>FORBIDDEN ACTIONS: - \u274c NO feature removal to \"fix\" problems - \u274c NO workarounds instead of proper solutions - \u274c NO simplifications that reduce functionality - \u274c NO skipping error handling - \u274c NO marking task complete with failing tests</p> <p>REQUIRED ACTIONS: - \u2705 YES use Context7 for unknowns (tools provided above) - \u2705 YES maintain ALL existing functionality - \u2705 YES follow exact error handling pattern - \u2705 YES full docstrings + type hints EVERY function - \u2705 YES check acceptance criteria per micro-task</p>"},{"location":"development/plan/piano_p3-pdf-generation-engine/#quality-gates-mandatory-before-completion","title":"\u2705 QUALITY GATES (MANDATORY BEFORE COMPLETION)","text":""},{"location":"development/plan/piano_p3-pdf-generation-engine/#1-test-coverage","title":"1. Test Coverage","text":"<pre><code>.devstream/bin/python -m pytest tests/ -v \\\n    --cov=src \\\n    --cov-report=term-missing \\\n    --cov-report=html\n\n# REQUIREMENT: \u2265 95% coverage for NEW code\n</code></pre>"},{"location":"development/plan/piano_p3-pdf-generation-engine/#2-type-safety","title":"2. Type Safety","text":"<pre><code>.devstream/bin/python -m mypy src/ --strict\n\n# REQUIREMENT: Zero errors\n</code></pre>"},{"location":"development/plan/piano_p3-pdf-generation-engine/#3-performance-benchmark","title":"3. Performance Benchmark","text":"<pre><code>.devstream/bin/python -m pytest tests/integration/test_p2_p3_pipeline.py::test_pdf_generator_with_large_dataset -v -s\n\n# TARGET: 1000 rows processed &lt; 30 seconds\n</code></pre>"},{"location":"development/plan/piano_p3-pdf-generation-engine/#commit-message-template","title":"\ud83d\udcdd COMMIT MESSAGE TEMPLATE","text":"<pre><code>feat(pdf): implement P3 PDF generation engine\n\nComplete PDF generation system with:\n- Modern table rendering with ReportLab\n- Hierarchical bookmark system for navigation\n- AI-optimized metadata for NotebookLM\n- Multi-sheet support with P2 integration\n- Performance optimization for large datasets\n\nImplementation Details:\n- 6 core components with comprehensive styling\n- Complete P2\u2192P3 pipeline integration\n- Memory-efficient processing for large files\n- Text-based PDF output optimized for AI analysis\n\nQuality Validation:\n- \u2705 Tests: 95%+ coverage, all integration tests passing\n- \u2705 Type safety: mypy --strict passed\n- \u2705 Performance: Large dataset processing &lt; 30s\n- \u2705 Integration: Complete P2\u2192P3 pipeline validated\n\nTask ID: p3-pdf-generation-engine\n\n\ud83e\udd16 Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude &lt;noreply@anthropic.com&gt;\n</code></pre>"},{"location":"development/plan/piano_p3-pdf-generation-engine/#success-metrics","title":"\ud83d\udcca SUCCESS METRICS","text":"<ul> <li>Completion: 100% of micro-tasks with acceptance criteria met</li> <li>Test Coverage: \u2265 95% for new code</li> <li>Type Safety: Zero mypy errors</li> <li>Performance: Meets/exceeds large dataset processing targets</li> <li>Code Review: @code-reviewer validation passed</li> </ul> <p>READY TO START? 1. Mark first TodoWrite task as \"in_progress\" 2. Search DevStream memory for context 3. Implement according to specification 4. Run tests + type check 5. Mark \"completed\" when all acceptance criteria met 6. Proceed to next micro-task</p> <p>REMEMBER: Execute, don't explore. Follow patterns, don't invent. Complete tasks, don't quit early. \ud83d\ude80</p>"},{"location":"idee_fondanti/piano_fondante_exc-to-pdf/","title":"Piano Fondante - Progetto exc-to-pdf","text":""},{"location":"idee_fondanti/piano_fondante_exc-to-pdf/#piano-fondante-progetto-exc-to-pdf","title":"Piano Fondante - Progetto exc-to-pdf","text":"<p>Versione: 1.0 Data: 2025-10-20 Tipo: Documento Fondativo Architetturale Framework: DevStream 7-Step Workflow</p>"},{"location":"idee_fondanti/piano_fondante_exc-to-pdf/#visione-del-progetto","title":"\ud83c\udfaf Visione del Progetto","text":"<p>Obiettivo Primario: Creare un tool Python in grado di convertire file Excel (.xlsx) in PDF ottimizzati per Google NotebookLM, preservando il 100% dei dati e mantenendo una struttura navigabile per l'analisi AI.</p> <p>Use Case Principale: Trasformare file Excel complessi (multi-sheet, multi-table) in PDF text-based che possano essere caricati su Google NotebookLM per analisi e conversation AI.</p>"},{"location":"idee_fondanti/piano_fondante_exc-to-pdf/#architettura-strategica","title":"\ud83c\udfd7\ufe0f Architettura Strategica","text":""},{"location":"idee_fondanti/piano_fondante_exc-to-pdf/#stack-tecnologico-definitivo","title":"Stack Tecnologico Definitivo","text":"<p>Core Components: - openpyxl (&gt;=3.1.0) - Excel parsing e data extraction   - Trust Score: 7.5 | Code Snippets: 1171   - Gestione sheets, tables, data structures - reportlab (&gt;=4.0.0) - PDF generation professionale   - Trust Score: 7.5 | Code Snippets: 952   - SimpleDocTemplate, bookmarks, table generation - pandas (&gt;=2.0.0) - Data processing e manipulation   - Trust Score: 9.2 | Code Snippets: 7386   - Multi-sheet reading, data cleaning, table detection</p> <p>Architettura di Flusso: </p><pre><code>Excel File \u2192 openpyxl parsing \u2192 pandas processing \u2192 reportlab rendering \u2192 PDF Output\n</code></pre><p></p>"},{"location":"idee_fondanti/piano_fondante_exc-to-pdf/#fasi-di-intervento-devstream","title":"\ud83d\udccb Fasi di Intervento DevStream","text":""},{"location":"idee_fondanti/piano_fondante_exc-to-pdf/#fase-1-foundation-setup-p1-in-corso","title":"Fase 1: Foundation Setup (P1 - In Corso)","text":"<p>Stato: \u2705 Task <code>[P1] Project Foundation - exc-to-pdf</code> attivo Obiettivi: - \u2705 Struttura progetto base - \u23f3 Configurazione dependencies - \u23f3 Setup ambiente sviluppo - \u23f3 Documentazione iniziale</p> <p>Deliverables: - Struttura directory completa - requirements.txt definitivo - README.md con istruzioni - .env.project configurato</p>"},{"location":"idee_fondanti/piano_fondante_exc-to-pdf/#fase-2-core-excel-processing-engine-p2","title":"Fase 2: Core Excel Processing Engine (P2)","text":"<p>Priorit\u00e0: Alta (P2) Tipo: Implementation Obiettivi: - Sviluppare ExcelReader class - Implementare multi-sheet detection - Table identification algorithm - Data validation pipeline</p> <p>Componenti: </p><pre><code>src/\n\u251c\u2500\u2500 excel_processor.py    # Core Excel reading logic\n\u251c\u2500\u2500 table_detector.py     # Table identification\n\u251c\u2500\u2500 data_validator.py     # Data quality checks\n\u2514\u2500\u2500 config/\n    \u2514\u2500\u2500 excel_config.py   # Configuration settings\n</code></pre><p></p>"},{"location":"idee_fondanti/piano_fondante_exc-to-pdf/#fase-3-pdf-generation-engine-p3","title":"Fase 3: PDF Generation Engine (P3)","text":"<p>Priorit\u00e0: Alta (P2) Tipo: Implementation Obiettivi: - Sviluppare PDFGenerator class - Implementare multi-page PDF structure - Bookmark navigation system - Table formatting con accessibility</p> <p>Componenti: </p><pre><code>src/\n\u251c\u2500\u2500 pdf_generator.py      # Core PDF generation\n\u251c\u2500\u2500 bookmark_manager.py   # Navigation structure\n\u251c\u2500\u2500 table_formatter.py    # Table rendering\n\u2514\u2500\u2500 templates/\n    \u251c\u2500\u2500 pdf_template.py   # Base PDF template\n    \u2514\u2500\u2500 styles.py         # PDF styling\n</code></pre><p></p>"},{"location":"idee_fondanti/piano_fondante_exc-to-pdf/#fase-4-integration-pipeline-p4","title":"Fase 4: Integration &amp; Pipeline (P4)","text":"<p>Priorit\u00e0: Media (P3) Tipo: Integration Obiettivi: - Creare main CLI interface - Integrare Excel \u2192 PDF pipeline - Error handling robusto - Logging e monitoring</p> <p>Componenti: </p><pre><code>src/\n\u251c\u2500\u2500 main.py              # CLI entry point\n\u251c\u2500\u2500 pipeline.py          # End-to-end processing\n\u251c\u2500\u2500 error_handler.py     # Error management\n\u2514\u2500\u2500 logger.py            # Logging system\n</code></pre><p></p>"},{"location":"idee_fondanti/piano_fondante_exc-to-pdf/#fase-5-quality-assurance-testing-p5","title":"Fase 5: Quality Assurance &amp; Testing (P5)","text":"<p>Priorit\u00e0: Alta (P2) Tipo: Testing Obiettivi: - Unit tests (95% coverage) - Integration tests - Performance benchmarks - NotebookLM compatibility validation</p> <p>Test Structure: </p><pre><code>tests/\n\u251c\u2500\u2500 unit/\n\u2502   \u251c\u2500\u2500 test_excel_processor.py\n\u2502   \u251c\u2500\u2500 test_pdf_generator.py\n\u2502   \u2514\u2500\u2500 test_table_detector.py\n\u251c\u2500\u2500 integration/\n\u2502   \u251c\u2500\u2500 test_pipeline.py\n\u2502   \u2514\u2500\u2500 test_notebooklm_compat.py\n\u2514\u2500\u2500 fixtures/\n    \u251c\u2500\u2500 sample_excel_files/\n    \u2514\u2500\u2500 expected_outputs/\n</code></pre><p></p>"},{"location":"idee_fondanti/piano_fondante_exc-to-pdf/#fase-6-optimization-production-p6","title":"Fase 6: Optimization &amp; Production (P6)","text":"<p>Priorit\u00e0: Media (P3) Tipo: Performance Obiettivi: - Performance optimization - Memory usage optimization - Large file handling - Production deployment</p>"},{"location":"idee_fondanti/piano_fondante_exc-to-pdf/#fase-7-documentation-release-p7","title":"Fase 7: Documentation &amp; Release (P7)","text":"<p>Priorit\u00e0: Bassa (P4) Tipo: Documentation Obiettivi: - Complete API documentation - User guide - Deployment guide - Version 1.0.0 release</p>"},{"location":"idee_fondanti/piano_fondante_exc-to-pdf/#decisioni-architetturali-chiave","title":"\ud83d\udd0d Decisioni Architetturali Chiave","text":""},{"location":"idee_fondanti/piano_fondante_exc-to-pdf/#1-multi-sheet-strategy","title":"1. Multi-Sheet Strategy","text":"<p>Approccio: Sheet-per-page con bookmarks - Vantaggi: Navigazione AI-friendly, struttura chiara - Implementazione: <code>addOutlineEntry()</code> + <code>bookmarkPage()</code></p>"},{"location":"idee_fondanti/piano_fondante_exc-to-pdf/#2-table-detection-algorithm","title":"2. Table Detection Algorithm","text":"<p>Approccio: Hybrid detection (openpyxl + pandas heuristics) - openpyxl: Formal table objects - pandas: Data range inference - Fallback: Grid pattern detection</p>"},{"location":"idee_fondanti/piano_fondante_exc-to-pdf/#3-pdf-structure-for-notebooklm","title":"3. PDF Structure for NotebookLM","text":"<p>Best Practices Identificate: - Text-based (no images of tables) - Accessibility tags (altText, tagType) - Semantic structure (headings, lists) - Metadata preservation</p>"},{"location":"idee_fondanti/piano_fondante_exc-to-pdf/#4-performance-strategy","title":"4. Performance Strategy","text":"<p>Approccio: Chunked processing - Large files: Read-only mode - Memory: Streaming generation - Cache: Intermediate results</p>"},{"location":"idee_fondanti/piano_fondante_exc-to-pdf/#requisiti-tecnici-dettagliati","title":"\ud83d\udcca Requisiti Tecnici Dettagliati","text":""},{"location":"idee_fondanti/piano_fondante_exc-to-pdf/#functional-requirements","title":"Functional Requirements","text":"<ul> <li> Multi-sheet Excel support (.xlsx)</li> <li> Automatic table detection</li> <li> Data preservation (100%)</li> <li> PDF with navigation</li> <li> CLI interface</li> <li> Large file handling (&gt;50MB)</li> <li> Batch processing</li> <li> Custom formatting options</li> </ul>"},{"location":"idee_fondanti/piano_fondante_exc-to-pdf/#non-functional-requirements","title":"Non-Functional Requirements","text":"<ul> <li>Performance: &lt;10s per 10MB file</li> <li>Memory: &lt;500MB peak usage</li> <li>Quality: 95%+ test coverage</li> <li>Compatibility: Python 3.9+</li> <li>Accessibility: PDF/UA compliant</li> </ul>"},{"location":"idee_fondanti/piano_fondante_exc-to-pdf/#integration-requirements","title":"Integration Requirements","text":"<ul> <li>Google NotebookLM: Text-based PDF output</li> <li>DevStream: Framework compliance</li> <li>CI/CD: Automated testing pipeline</li> </ul>"},{"location":"idee_fondanti/piano_fondante_exc-to-pdf/#rischio-assessment-mitigation","title":"\ud83d\ude80 Rischio Assessment &amp; Mitigation","text":""},{"location":"idee_fondanti/piano_fondante_exc-to-pdf/#rischi-tecnici","title":"Rischi Tecnici","text":"<ol> <li>Complex Excel Structures: Mitigation \u2192 Robust table detection</li> <li>Large File Memory: Mitigation \u2192 Streaming processing</li> <li>PDF Layout Complexity: Mitigation \u2192 Template-based approach</li> <li>NotebookLM Compatibility: Mitigation \u2192 Continuous testing</li> </ol>"},{"location":"idee_fondanti/piano_fondante_exc-to-pdf/#rischi-di-progetto","title":"Rischi di Progetto","text":"<ol> <li>Scope Creep: Mitigation \u2192 Fase-based approach</li> <li>Performance Issues: Mitigation \u2192 Early benchmarking</li> <li>Integration Complexity: Mitigation \u2192 Modular architecture</li> </ol>"},{"location":"idee_fondanti/piano_fondante_exc-to-pdf/#success-metrics","title":"\ud83d\udcc8 Success Metrics","text":""},{"location":"idee_fondanti/piano_fondante_exc-to-pdf/#technical-metrics","title":"Technical Metrics","text":"<ul> <li>Performance: Processing time &lt;10s/10MB</li> <li>Quality: 95%+ test coverage</li> <li>Reliability: 99%+ success rate on test files</li> <li>Memory: &lt;500MB peak usage</li> </ul>"},{"location":"idee_fondanti/piano_fondante_exc-to-pdf/#business-metrics","title":"Business Metrics","text":"<ul> <li>NotebookLM Integration: Successful AI analysis</li> <li>User Satisfaction: Data completeness rate</li> <li>Adoption: Ease of use score</li> </ul>"},{"location":"idee_fondanti/piano_fondante_exc-to-pdf/#devstream-integration","title":"\ud83d\udd04 DevStream Integration","text":""},{"location":"idee_fondanti/piano_fondante_exc-to-pdf/#task-management-structure","title":"Task Management Structure","text":"<ul> <li>Current: <code>[P1] Project Foundation</code> (active)</li> <li>Next: <code>[P2] Excel Processing Engine</code></li> <li>Sequence: Foundation \u2192 Core \u2192 Integration \u2192 QA \u2192 Optimize \u2192 Release</li> </ul>"},{"location":"idee_fondanti/piano_fondante_exc-to-pdf/#quality-gates","title":"Quality Gates","text":"<ul> <li>Mandatory: Code review before commits</li> <li>Mandatory: 95%+ test coverage</li> <li>Mandatory: Performance benchmarks</li> <li>Mandatory: NotebookLM compatibility test</li> </ul>"},{"location":"idee_fondanti/piano_fondante_exc-to-pdf/#prossimi-passi-immediati","title":"\ud83d\udcdd Prossimi Passi Immediati","text":"<ol> <li>Completare Fase 1 (Task P1 corrente):</li> <li>Setup directory structure</li> <li>Create requirements.txt</li> <li>Initial README.md</li> <li> <p>Basic configuration</p> </li> <li> <p>Preparare Fase 2:</p> </li> <li>Research table detection algorithms</li> <li>Prototype Excel reading workflow</li> <li> <p>Setup testing framework</p> </li> <li> <p>Validazione Architettura:</p> </li> <li>Proof of concept Excel \u2192 PDF</li> <li>NotebookLM compatibility test</li> <li>Performance baseline</li> </ol> <p>Documento Approvato: \u2705 Stato Architettura: Definitiva Prossima Revisione: Post-Fase 2</p> <p>Generated following DevStream 7-Step Workflow - Context7 Compliant</p>"},{"location":"quick-start/","title":"Quick Start","text":""},{"location":"quick-start/#quick-start-guide","title":"Quick Start Guide","text":"<p>Welcome to exc-to-pdf! This guide will help you get started quickly with converting Excel files to PDF format optimized for Google NotebookLM analysis.</p>"},{"location":"quick-start/#what-youll-learn","title":"\ud83c\udfaf What You'll Learn","text":"<p>In this guide, you'll learn how to:</p> <ul> <li>Install exc-to-pdf</li> <li>Convert your first Excel file to PDF</li> <li>Use basic command-line options</li> <li>Apply the Python API</li> <li>Troubleshoot common issues</li> </ul>"},{"location":"quick-start/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>Python 3.9+ installed</li> <li>Excel files (.xlsx or .xls) to convert</li> <li>Terminal/command line access</li> </ul> <p>System Requirements</p> <ul> <li>RAM: Minimum 4GB, recommended 8GB+</li> <li>Storage: 2x the size of your Excel files</li> <li>OS: Windows 10+, macOS 10.14+, or Linux</li> </ul>"},{"location":"quick-start/#installation","title":"\ud83d\ude80 Installation","text":"pip install (Recommended)Development Installation <pre><code># Install from PyPI\npip install exc-to-pdf\n\n# Verify installation\nexc-to-pdf --version\n</code></pre> <pre><code># Clone the repository\ngit clone https://github.com/exc-to-pdf/exc-to-pdf.git\ncd exc-to-pdf\n\n# Create virtual environment\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install in development mode\npip install -e \".[dev]\"\n</code></pre> <p>Installation Verification</p> <p>After installation, verify everything works:</p> <p></p><pre><code>exc-to-pdf --help\n</code></pre> You should see the help output with all available commands.<p></p>"},{"location":"quick-start/#your-first-conversion","title":"\ud83d\udcc4 Your First Conversion","text":"<p>Let's convert an Excel file to PDF format.</p>"},{"location":"quick-start/#step-1-prepare-your-excel-file","title":"Step 1: Prepare Your Excel File","text":"<p>Create or locate an Excel file you want to convert. For testing, you can create a simple file with:</p> <ul> <li>Multiple worksheets</li> <li>Tables with headers</li> <li>Some formatting</li> </ul>"},{"location":"quick-start/#step-2-basic-conversion","title":"Step 2: Basic Conversion","text":"<pre><code># Basic conversion\nexc-to-pdf convert your-file.xlsx output.pdf\n\n# See progress details\nexc-to-pdf convert your-file.xlsx output.pdf --verbose\n</code></pre> <p>Output Location</p> <p>If you don't specify an output file, exc-to-pdf will create one with the same name as your Excel file but with a <code>.pdf</code> extension.</p>"},{"location":"quick-start/#step-3-check-the-results","title":"Step 3: Check the Results","text":"<p>Your PDF file should contain: * All worksheets from your Excel file * Formatted tables preserved * Bookmarks for navigation * Text that AI can analyze</p>"},{"location":"quick-start/#common-options","title":"\ud83c\udfa8 Common Options","text":"<p>Here are the most useful options for everyday use:</p>"},{"location":"quick-start/#template-styles","title":"Template Styles","text":"<pre><code># Modern template (default)\nexc-to-pdf convert data.xlsx output.pdf --template modern\n\n# Classic template\nexc-to-pdf convert data.xlsx output.pdf --template classic\n\n# Minimal template\nexc-to-pdf convert data.xlsx output.pdf --template minimal\n</code></pre>"},{"location":"quick-start/#page-orientation","title":"Page Orientation","text":"<pre><code># Portrait (default)\nexc-to-pdf convert data.xlsx output.pdf --orientation portrait\n\n# Landscape for wide tables\nexc-to-pdf convert data.xlsx output.pdf --orientation landscape\n</code></pre>"},{"location":"quick-start/#worksheet-selection","title":"Worksheet Selection","text":"<pre><code># Convert specific worksheet\nexc-to-pdf convert data.xlsx output.pdf --sheet \"Sales Data\"\n\n# Convert all worksheets (default)\nexc-to-pdf convert data.xlsx output.pdf\n</code></pre>"},{"location":"quick-start/#margins","title":"Margins","text":"<pre><code># Custom margins (in points)\nexc-to-pdf convert data.xlsx output.pdf \\\n  --margin-top 50 \\\n  --margin-bottom 50 \\\n  --margin-left 40 \\\n  --margin-right 40\n</code></pre>"},{"location":"quick-start/#python-api-usage","title":"\ud83d\udc0d Python API Usage","text":"<p>For programmatic use, exc-to-pdf provides a clean Python API.</p>"},{"location":"quick-start/#basic-python-example","title":"Basic Python Example","text":"<pre><code>from exc_to_pdf import PDFGenerator\n\n# Create generator with default settings\ngenerator = PDFGenerator()\n\n# Convert file\ngenerator.convert_excel_to_pdf(\n    input_file=\"data.xlsx\",\n    output_file=\"output.pdf\"\n)\n\nprint(\"Conversion completed!\")\n</code></pre>"},{"location":"quick-start/#advanced-python-example","title":"Advanced Python Example","text":"<pre><code>from exc_to_pdf import PDFGenerator\nfrom exc_to_pdf.config import PDFConfig\n\n# Custom configuration\nconfig = PDFConfig()\nconfig.table_style = \"modern\"\nconfig.orientation = \"landscape\"\nconfig.include_bookmarks = True\nconfig.margin_top = 50\nconfig.margin_bottom = 50\n\n# Create generator with custom config\ngenerator = PDFGenerator(config)\n\n# Convert with options\ngenerator.convert_excel_to_pdf(\n    input_file=\"financial-report.xlsx\",\n    output_file=\"report.pdf\",\n    worksheet_name=\"Q4 Results\"\n)\n\nprint(\"Financial report converted successfully!\")\n</code></pre>"},{"location":"quick-start/#real-world-examples","title":"\ud83d\udd0d Real-World Examples","text":""},{"location":"quick-start/#example-1-financial-reports","title":"Example 1: Financial Reports","text":"<pre><code># Convert financial report with landscape orientation\nexc-to-pdf convert financial-report.xlsx report.pdf \\\n  --template modern \\\n  --orientation landscape \\\n  --margin-top 60 \\\n  --margin-bottom 60\n</code></pre>"},{"location":"quick-start/#example-2-academic-data","title":"Example 2: Academic Data","text":"<pre><code># Convert research data with specific worksheet\nexc-to-pdf convert research-data.xlsx research.pdf \\\n  --sheet \"Experimental Results\" \\\n  --template classic \\\n  --verbose\n</code></pre>"},{"location":"quick-start/#example-3-batch-processing","title":"Example 3: Batch Processing","text":"<pre><code>import os\nfrom exc_to_pdf import PDFGenerator\n\ndef batch_convert_excel_files(input_dir, output_dir):\n    \"\"\"Convert all Excel files in a directory\"\"\"\n    generator = PDFGenerator()\n\n    for filename in os.listdir(input_dir):\n        if filename.endswith(('.xlsx', '.xls')):\n            input_path = os.path.join(input_dir, filename)\n            output_path = os.path.join(output_dir, filename.rsplit('.', 1)[0] + '.pdf')\n\n            try:\n                generator.convert_excel_to_pdf(input_path, output_path)\n                print(f\"\u2705 Converted: {filename}\")\n            except Exception as e:\n                print(f\"\u274c Failed: {filename} - {e}\")\n\n# Usage\nbatch_convert_excel_files(\"./excel_files/\", \"./pdf_outputs/\")\n</code></pre>"},{"location":"quick-start/#common-issues-solutions","title":"\ud83d\udd27 Common Issues &amp; Solutions","text":""},{"location":"quick-start/#issue-1-file-not-found-error","title":"Issue 1: \"File not found\" Error","text":"<p>Problem: The Excel file cannot be found.</p> <p>Solution: </p><pre><code># Use absolute path\nexc-to-pdf convert /full/path/to/file.xlsx output.pdf\n\n# Or navigate to the directory first\ncd /path/to/excel/files\nexc-to-pdf convert file.xlsx output.pdf\n</code></pre><p></p>"},{"location":"quick-start/#issue-2-memory-error-with-large-files","title":"Issue 2: Memory Error with Large Files","text":"<p>Problem: Out of memory errors with large Excel files.</p> <p>Solution: </p><pre><code># Process large files with verbose output for monitoring\nexc-to-pdf convert large-file.xlsx output.pdf --verbose\n</code></pre><p></p> <p>For very large files (&gt;50MB), consider: * Closing other applications * Using a machine with more RAM * Processing files in smaller chunks</p>"},{"location":"quick-start/#issue-3-poor-formatting-in-pdf","title":"Issue 3: Poor Formatting in PDF","text":"<p>Problem: Tables don't look good in the PDF.</p> <p>Solution: </p><pre><code># Try different templates\nexc-to-pdf convert data.xlsx output.pdf --template modern\nexc-to-pdf convert data.xlsx output.pdf --template classic\n\n# Adjust orientation for wide tables\nexc-to-pdf convert data.xlsx output.pdf --orientation landscape\n</code></pre><p></p>"},{"location":"quick-start/#success-checklist","title":"\u2705 Success Checklist","text":"<p>After your first conversion, verify:</p> <ul> <li> PDF file is created successfully</li> <li> All worksheets are included</li> <li> Tables are properly formatted</li> <li> Bookmarks work for navigation</li> <li> Text is selectable (not images)</li> <li> File size is reasonable</li> </ul>"},{"location":"quick-start/#whats-next","title":"\ud83c\udfaf What's Next?","text":"<p>Now that you have exc-to-pdf working, explore:</p> <ul> <li>User Guide - Advanced configuration and options</li> <li>CLI Reference - Complete command-line documentation</li> <li>API Reference - Full Python API documentation</li> <li>Examples - More practical examples</li> </ul> <p>Congratulations!</p> <p>You've successfully converted your first Excel file to PDF! \ud83c\udf89</p> <p>Need help? Check our troubleshooting guide or open an issue.</p>"},{"location":"quick-start/basic-usage/","title":"Basic Usage","text":""},{"location":"quick-start/basic-usage/#basic-usage","title":"Basic Usage","text":"<p>This guide covers the fundamental operations you'll perform with exc-to-pdf, from simple conversions to common customization options.</p>"},{"location":"quick-start/basic-usage/#converting-your-first-file","title":"\ud83d\udcc4 Converting Your First File","text":""},{"location":"quick-start/basic-usage/#simple-conversion","title":"Simple Conversion","text":"<p>The most basic usage is converting an Excel file to PDF:</p> <pre><code># Basic syntax\nexc-to-pdf convert &lt;input.xlsx&gt; [output.pdf]\n\n# Example\nexc-to-pdf convert financial-report.pdf report.pdf\n</code></pre> <p>Output File Naming</p> <p>If you don't specify an output file, exc-to-pdf automatically creates one with the same name as your Excel file but with a <code>.pdf</code> extension:</p> <pre><code># This creates report.pdf automatically\nexc-to-pdf convert report.xlsx\n</code></pre>"},{"location":"quick-start/basic-usage/#understanding-the-process","title":"Understanding the Process","text":"<p>When you run exc-to-pdf, it performs these steps:</p> <ol> <li>Excel Analysis: Reads and analyzes your Excel file</li> <li>Table Detection: Identifies table structures and data relationships</li> <li>PDF Generation: Creates a formatted PDF with proper tables</li> <li>Navigation Setup: Adds bookmarks and metadata for AI analysis</li> <li>Output: Saves the optimized PDF file</li> </ol>"},{"location":"quick-start/basic-usage/#template-selection","title":"\ud83c\udfa8 Template Selection","text":"<p>Choose from three professionally designed templates:</p>"},{"location":"quick-start/basic-usage/#modern-template-default","title":"Modern Template (Default)","text":"<pre><code>exc-to-pdf convert data.xlsx output.pdf --template modern\n</code></pre> <p>Features: * Clean, contemporary design * Blue accent colors * Optimized for business reports * Excellent readability</p>"},{"location":"quick-start/basic-usage/#classic-template","title":"Classic Template","text":"<pre><code>exc-to-pdf convert data.xlsx output.pdf --template classic\n</code></pre> <p>Features: * Traditional, formal appearance * Black and white design * Perfect for academic or official documents * Timeless formatting</p>"},{"location":"quick-start/basic-usage/#minimal-template","title":"Minimal Template","text":"<pre><code>exc-to-pdf convert data.xlsx output.pdf --template minimal\n</code></pre> <p>Features: * Simple, uncluttered layout * Minimal styling * Focus on content * Fast processing</p>"},{"location":"quick-start/basic-usage/#page-configuration","title":"\ud83d\udcd0 Page Configuration","text":""},{"location":"quick-start/basic-usage/#page-orientation","title":"Page Orientation","text":"<pre><code># Portrait (default) - good for most data\nexc-to-pdf convert data.xlsx output.pdf --orientation portrait\n\n# Landscape - better for wide tables\nexc-to-pdf convert data.xlsx output.pdf --orientation landscape\n</code></pre> <p>When to use Landscape: * Tables with many columns * Financial statements * Datasets with wide data ranges * Charts and graphics</p>"},{"location":"quick-start/basic-usage/#custom-margins","title":"Custom Margins","text":"<p>Fine-tune the layout with custom margins (measured in points, 72 points = 1 inch):</p> <pre><code># Default margins: 72 points (1 inch)\nexc-to-pdf convert data.xlsx output.pdf\n\n# Tighter margins for more content\nexc-to-pdf convert data.xlsx output.pdf \\\n  --margin-top 50 \\\n  --margin-bottom 50 \\\n  --margin-left 40 \\\n  --margin-right 40\n\n# Wide margins for professional look\nexc-to-pdf convert data.xlsx output.pdf \\\n  --margin-top 90 \\\n  --margin-bottom 90 \\\n  --margin-left 72 \\\n  --margin-right 72\n</code></pre>"},{"location":"quick-start/basic-usage/#worksheet-management","title":"\ud83d\udccb Worksheet Management","text":""},{"location":"quick-start/basic-usage/#convert-specific-worksheets","title":"Convert Specific Worksheets","text":"<pre><code># Convert only one worksheet\nexc-to-pdf convert workbook.xlsx output.pdf --sheet \"Sales Data\"\n\n# Convert worksheet with spaces in name\nexc-to-pdf convert workbook.xlsx output.pdf --sheet \"Q4 Results\"\n</code></pre>"},{"location":"quick-start/basic-usage/#convert-all-worksheets","title":"Convert All Worksheets","text":"<pre><code># Convert all worksheets (default behavior)\nexc-to-pdf convert workbook.xlsx output.pdf\n\n# Explicitly specify all worksheets\nexc-to-pdf convert workbook.xlsx output.pdf --sheet all\n</code></pre>"},{"location":"quick-start/basic-usage/#finding-worksheet-names","title":"Finding Worksheet Names","text":"<pre><code># Use verbose mode to see available worksheets\nexc-to-pdf convert workbook.xlsx output.pdf --verbose\n</code></pre> <p>This will show output like: </p><pre><code>\ud83d\udcc4 Found 3 worksheets:\n  1. Sales Data\n  2. Customer List\n  3. Product Catalog\n\ud83d\udd04 Processing worksheet: Sales Data\n</code></pre><p></p>"},{"location":"quick-start/basic-usage/#output-control","title":"\ud83d\udd0d Output Control","text":""},{"location":"quick-start/basic-usage/#verbose-mode","title":"Verbose Mode","text":"<p>Monitor the conversion process in detail:</p> <pre><code># Show detailed progress\nexc-to-pdf convert data.xlsx output.pdf --verbose\n</code></pre> <p>Verbose output includes: * Worksheet detection * Table analysis * Processing progress * File size information * Success/failure details</p>"},{"location":"quick-start/basic-usage/#quiet-mode","title":"Quiet Mode","text":"<p>Suppress all output except errors:</p> <pre><code># Silent operation\nexc-to-pdf convert data.xlsx output.pdf --quiet\n</code></pre> <p>Use cases: * Batch processing scripts * Automated workflows * CI/CD pipelines</p>"},{"location":"quick-start/basic-usage/#advanced-options","title":"\ud83d\udd27 Advanced Options","text":""},{"location":"quick-start/basic-usage/#disable-bookmarks","title":"Disable Bookmarks","text":"<p>If you don't want automatic bookmark generation:</p> <pre><code>exc-to-pdf convert data.xlsx output.pdf --no-bookmarks\n</code></pre> <p>Why disable bookmarks? * Smaller file size * Faster processing * Simple documents don't need navigation</p>"},{"location":"quick-start/basic-usage/#disable-metadata","title":"Disable Metadata","text":"<p>Skip AI-optimized metadata:</p> <pre><code>exc-to-pdf convert data.xlsx output.pdf --no-metadata\n</code></pre> <p>Why disable metadata? * Privacy concerns * Smaller files * Basic PDF creation</p>"},{"location":"quick-start/basic-usage/#real-world-examples","title":"\ud83d\udcca Real-World Examples","text":""},{"location":"quick-start/basic-usage/#example-1-financial-report","title":"Example 1: Financial Report","text":"<pre><code># Convert financial report with professional styling\nexc-to-pdf convert financial-report.xlsx report.pdf \\\n  --template modern \\\n  --orientation portrait \\\n  --margin-top 80 \\\n  --margin-bottom 80 \\\n  --verbose\n</code></pre>"},{"location":"quick-start/basic-usage/#example-2-wide-data-table","title":"Example 2: Wide Data Table","text":"<pre><code># Convert wide table in landscape mode\nexc-to-pdf convert wide-data.xlsx data.pdf \\\n  --template classic \\\n  --orientation landscape \\\n  --margin-left 30 \\\n  --margin-right 30 \\\n  --margin-top 50 \\\n  --margin-bottom 50\n</code></pre>"},{"location":"quick-start/basic-usage/#example-3-specific-worksheet","title":"Example 3: Specific Worksheet","text":"<pre><code># Convert only the summary worksheet\nexc-to-pdf convert workbook.xlsx summary.pdf \\\n  --sheet \"Executive Summary\" \\\n  --template modern \\\n  --quiet\n</code></pre>"},{"location":"quick-start/basic-usage/#example-4-minimal-processing","title":"Example 4: Minimal Processing","text":"<pre><code># Fast conversion with minimal features\nexc-to-pdf convert data.pdf output.pdf \\\n  --template minimal \\\n  --no-bookmarks \\\n  --no-metadata \\\n  --quiet\n</code></pre>"},{"location":"quick-start/basic-usage/#python-api-basics","title":"\ud83d\udc0d Python API Basics","text":""},{"location":"quick-start/basic-usage/#simple-conversion_1","title":"Simple Conversion","text":"<pre><code>from exc_to_pdf import PDFGenerator\n\n# Create generator\ngenerator = PDFGenerator()\n\n# Convert file\ngenerator.convert_excel_to_pdf(\n    input_file=\"data.xlsx\",\n    output_file=\"output.pdf\"\n)\n\nprint(\"Conversion completed!\")\n</code></pre>"},{"location":"quick-start/basic-usage/#conversion-with-options","title":"Conversion with Options","text":"<pre><code>from exc_to_pdf import PDFGenerator\n\n# Create generator\ngenerator = PDFGenerator()\n\n# Convert with worksheet selection\ngenerator.convert_excel_to_pdf(\n    input_file=\"workbook.xlsx\",\n    output_file=\"specific.pdf\",\n    worksheet_name=\"Sales Data\"\n)\n</code></pre>"},{"location":"quick-start/basic-usage/#batch-processing","title":"Batch Processing","text":"<pre><code>import os\nfrom exc_to_pdf import PDFGenerator\n\ndef convert_directory(input_dir, output_dir):\n    \"\"\"Convert all Excel files in a directory\"\"\"\n    generator = PDFGenerator()\n\n    # Ensure output directory exists\n    os.makedirs(output_dir, exist_ok=True)\n\n    for filename in os.listdir(input_dir):\n        if filename.endswith(('.xlsx', '.xls')):\n            input_path = os.path.join(input_dir, filename)\n            output_name = filename.rsplit('.', 1)[0] + '.pdf'\n            output_path = os.path.join(output_dir, output_name)\n\n            try:\n                generator.convert_excel_to_pdf(input_path, output_path)\n                print(f\"\u2705 Converted: {filename} \u2192 {output_name}\")\n            except Exception as e:\n                print(f\"\u274c Failed: {filename} - {e}\")\n\n# Usage\nconvert_directory(\"./excel_files/\", \"./pdf_output/\")\n</code></pre>"},{"location":"quick-start/basic-usage/#troubleshooting-basic-issues","title":"\ud83d\udd0d Troubleshooting Basic Issues","text":""},{"location":"quick-start/basic-usage/#file-not-found","title":"File Not Found","text":"<pre><code># Error: No such file or directory\nexc-to-pdf convert missing.xlsx output.pdf\n\n# Solutions:\n# 1. Check file path\nls -la /path/to/file.xlsx\n\n# 2. Use absolute path\nexc-to-pdf convert /full/path/to/file.xlsx output.pdf\n\n# 3. Navigate to file directory\ncd /path/to/directory\nexc-to-pdf convert file.xlsx output.pdf\n</code></pre>"},{"location":"quick-start/basic-usage/#permission-denied","title":"Permission Denied","text":"<pre><code># Error: Permission denied\nexc-to-pdf convert /protected/file.xlsx /protected/output.pdf\n\n# Solutions:\n# 1. Check permissions\nls -la /path/to/directory/\n\n# 2. Use different output directory\nexc-to-pdf convert input.xlsx ~/output.pdf\n\n# 3. Fix permissions (if you have access)\nchmod 644 input.xlsx\nchmod 755 output_directory/\n</code></pre>"},{"location":"quick-start/basic-usage/#large-file-processing","title":"Large File Processing","text":"<pre><code># For large files, use verbose mode to monitor progress\nexc-to-pdf convert large-file.xlsx output.pdf --verbose\n\n# Or process in smaller chunks if possible\n# (requires splitting the Excel file beforehand)\n</code></pre>"},{"location":"quick-start/basic-usage/#success-verification","title":"\u2705 Success Verification","text":"<p>After conversion, verify your PDF:</p>"},{"location":"quick-start/basic-usage/#manual-checks","title":"Manual Checks","text":"<pre><code># Check file size\nls -lh output.pdf\n\n# Check file type\nfile output.pdf\n</code></pre>"},{"location":"quick-start/basic-usage/#programmatic-verification","title":"Programmatic Verification","text":"<pre><code>import os\nfrom pathlib import Path\n\ndef verify_pdf(output_path):\n    \"\"\"Verify PDF was created successfully\"\"\"\n    path = Path(output_path)\n\n    if not path.exists():\n        print(\"\u274c PDF file was not created\")\n        return False\n\n    size_mb = path.stat().st_size / (1024 * 1024)\n    print(f\"\u2705 PDF created successfully\")\n    print(f\"\ud83d\udcca File size: {size_mb:.2f} MB\")\n\n    if size_mb &lt; 0.01:  # Very small file might indicate an error\n        print(\"\u26a0\ufe0f  Warning: File is very small, check conversion\")\n\n    return True\n\n# Usage\nverify_pdf(\"output.pdf\")\n</code></pre>"},{"location":"quick-start/basic-usage/#next-steps","title":"\ud83c\udfaf Next Steps","text":"<p>Now that you understand basic usage:</p> <ul> <li>Examples - More practical scenarios</li> <li>Configuration - Advanced configuration</li> <li>Performance - Optimization tips</li> </ul> <p>Ready to advance?</p> <p>You've mastered the basics! Try these advanced features: * Custom configuration files * Batch processing scripts * Performance optimization</p>"},{"location":"quick-start/examples/","title":"Examples","text":""},{"location":"quick-start/examples/#examples","title":"Examples","text":"<p>This page provides practical, real-world examples of using exc-to-pdf for various scenarios. Each example includes the command-line usage and, where applicable, the Python API equivalent.</p>"},{"location":"quick-start/examples/#business-reports","title":"\ud83d\udcca Business Reports","text":""},{"location":"quick-start/examples/#example-1-financial-statements","title":"Example 1: Financial Statements","text":"<p>Convert quarterly financial reports with professional formatting.</p> <pre><code># Convert financial report with landscape orientation for wide tables\nexc-to-pdf convert Q3-Financials.xlsx Q3-Financials.pdf \\\n  --template modern \\\n  --orientation landscape \\\n  --margin-top 60 \\\n  --margin-bottom 60 \\\n  --margin-left 40 \\\n  --margin-right 40 \\\n  --verbose\n</code></pre> <p>Python API: </p><pre><code>from exc_to_pdf import PDFGenerator\nfrom exc_to_pdf.config import PDFConfig\n\n# Configure for financial reports\nconfig = PDFConfig()\nconfig.table_style = \"modern\"\nconfig.orientation = \"landscape\"\nconfig.margin_top = 60\nconfig.margin_bottom = 60\nconfig.margin_left = 40\nconfig.margin_right = 40\n\ngenerator = PDFGenerator(config)\ngenerator.convert_excel_to_pdf(\"Q3-Financials.xlsx\", \"Q3-Financials.pdf\")\n</code></pre><p></p>"},{"location":"quick-start/examples/#example-2-sales-dashboard","title":"Example 2: Sales Dashboard","text":"<p>Convert sales dashboards with multiple visualizations.</p> <pre><code># Convert sales dashboard with all worksheets\nexc-to-pdf convert Sales-Dashboard-2024.xlsx Sales-Report.pdf \\\n  --template classic \\\n  --orientation portrait \\\n  --include-bookmarks \\\n  --verbose\n</code></pre>"},{"location":"quick-start/examples/#example-3-executive-summary","title":"Example 3: Executive Summary","text":"<p>Create a concise executive summary from a detailed workbook.</p> <pre><code># Convert only the summary worksheet\nexc-to-pdf convert Annual-Report.xlsx Executive-Summary.pdf \\\n  --sheet \"Executive Summary\" \\\n  --template modern \\\n  --margin-top 72 \\\n  --margin-bottom 72\n</code></pre>"},{"location":"quick-start/examples/#academic-research","title":"\ud83c\udf93 Academic &amp; Research","text":""},{"location":"quick-start/examples/#example-4-research-data","title":"Example 4: Research Data","text":"<p>Convert experimental research data for publication.</p> <pre><code># Convert research data with classic academic styling\nexc-to-pdf convert Research-Data.xlsx Research-Paper.pdf \\\n  --template classic \\\n  --orientation portrait \\\n  --sheet \"Experimental Results\" \\\n  --no-bookmarks \\\n  --verbose\n</code></pre> <p>Python API for research data: </p><pre><code>from exc_to_pdf import PDFGenerator\nimport os\n\ndef convert_research_data(data_dir, output_dir):\n    \"\"\"Convert all research data files\"\"\"\n    generator = PDFGenerator()\n\n    research_files = [\n        \"experimental-data.xlsx\",\n        \"statistical-analysis.xlsx\",\n        \"survey-results.xlsx\"\n    ]\n\n    for filename in research_files:\n        input_path = os.path.join(data_dir, filename)\n        output_name = filename.replace('.xlsx', '_paper.pdf')\n        output_path = os.path.join(output_dir, output_name)\n\n        try:\n            generator.convert_excel_to_pdf(\n                input_file=input_path,\n                output_file=output_path,\n                template=\"classic\"\n            )\n            print(f\"\u2705 Converted: {filename}\")\n        except Exception as e:\n            print(f\"\u274c Failed: {filename} - {e}\")\n\n# Usage\nconvert_research_data(\"./research_data/\", \"./papers/\")\n</code></pre><p></p>"},{"location":"quick-start/examples/#example-5-survey-results","title":"Example 5: Survey Results","text":"<p>Convert survey data with clean, readable formatting.</p> <pre><code># Convert survey results with minimal styling\nexc-to-pdf convert Survey-Results-2024.xlsx Survey-Report.pdf \\\n  --template minimal \\\n  --orientation portrait \\\n  --margin-top 80 \\\n  --margin-bottom 80\n</code></pre>"},{"location":"quick-start/examples/#data-analysis","title":"\ud83c\udfed Data Analysis","text":""},{"location":"quick-start/examples/#example-6-large-dataset-processing","title":"Example 6: Large Dataset Processing","text":"<p>Process large datasets efficiently.</p> <pre><code># Convert large dataset with progress monitoring\nexc-to-pdf convert Large-Dataset.xlsx Dataset-Analysis.pdf \\\n  --template modern \\\n  --orientation landscape \\\n  --verbose\n</code></pre> <p>Python API for batch processing: </p><pre><code>import os\nimport time\nfrom exc_to_pdf import PDFGenerator\nfrom pathlib import Path\n\ndef process_large_dataset(input_dir, output_dir):\n    \"\"\"Process multiple large datasets with monitoring\"\"\"\n    generator = PDFGenerator()\n\n    # Create output directory\n    Path(output_dir).mkdir(parents=True, exist_ok=True)\n\n    excel_files = list(Path(input_dir).glob(\"*.xlsx\"))\n\n    for i, excel_file in enumerate(excel_files, 1):\n        print(f\"\\n\ud83d\udcca Processing {i}/{len(excel_files)}: {excel_file.name}\")\n\n        output_file = Path(output_dir) / f\"{excel_file.stem}.pdf\"\n\n        start_time = time.time()\n        try:\n            generator.convert_excel_to_pdf(\n                input_file=str(excel_file),\n                output_file=str(output_file)\n            )\n\n            elapsed = time.time() - start_time\n            file_size = output_file.stat().st_size / (1024 * 1024)\n\n            print(f\"\u2705 Completed in {elapsed:.1f}s - Size: {file_size:.2f}MB\")\n\n        except Exception as e:\n            print(f\"\u274c Failed: {e}\")\n\n# Usage\nprocess_large_dataset(\"./large_datasets/\", \"./processed_pdfs/\")\n</code></pre><p></p>"},{"location":"quick-start/examples/#example-7-data-validation-report","title":"Example 7: Data Validation Report","text":"<p>Create a data validation report from multiple sources.</p> <pre><code># Convert validation report with bookmarks for navigation\nexc-to-pdf convert Data-Validation.xlsx Validation-Report.pdf \\\n  --template modern \\\n  --include-bookmarks \\\n  --verbose\n</code></pre>"},{"location":"quick-start/examples/#business-intelligence","title":"\ud83d\udcc8 Business Intelligence","text":""},{"location":"quick-start/examples/#example-8-monthly-kpi-report","title":"Example 8: Monthly KPI Report","text":"<p>Generate monthly KPI reports with consistent styling.</p> <pre><code># Convert monthly KPI report\nexc-to-pdf convert KPI-Report-October-2024.xlsx KPI-Report-Oct.pdf \\\n  --template modern \\\n  --orientation portrait \\\n  --margin-top 50 \\\n  --margin-bottom 50\n</code></pre> <p>Python API for automated monthly reports: </p><pre><code>from datetime import datetime\nfrom exc_to_pdf import PDFGenerator\nimport os\n\ndef generate_monthly_reports(reports_dir, output_dir):\n    \"\"\"Generate monthly KPI reports automatically\"\"\"\n    generator = PDFGenerator()\n\n    # Get current month\n    current_month = datetime.now().strftime(\"%B-%Y\")\n\n    # Find monthly report files\n    report_files = [f for f in os.listdir(reports_dir)\n                   if f.startswith(\"KPI-Report-\") and f.endswith(\".xlsx\")]\n\n    for report_file in report_files:\n        input_path = os.path.join(reports_dir, report_file)\n\n        # Create output filename\n        month_name = report_file.replace(\"KPI-Report-\", \"\").replace(\".xlsx\", \"\")\n        output_file = f\"KPI-Report-{month_name}.pdf\"\n        output_path = os.path.join(output_dir, output_file)\n\n        try:\n            generator.convert_excel_to_pdf(\n                input_file=input_path,\n                output_file=output_path,\n                template=\"modern\"\n            )\n            print(f\"\u2705 Generated: {output_file}\")\n        except Exception as e:\n            print(f\"\u274c Failed: {report_file} - {e}\")\n\n# Usage (would be run monthly via cron/scheduled task)\ngenerate_monthly_reports(\"./monthly_reports/\", \"./kpi_pdfs/\")\n</code></pre><p></p>"},{"location":"quick-start/examples/#example-9-dashboard-export","title":"Example 9: Dashboard Export","text":"<p>Export dashboard data for sharing.</p> <pre><code># Convert dashboard with landscape orientation\nexc-to-pdf convert Dashboard-Export.xlsx Dashboard-Share.pdf \\\n  --template modern \\\n  --orientation landscape \\\n  --no-metadata \\\n  --quiet\n</code></pre>"},{"location":"quick-start/examples/#batch-processing-examples","title":"\ud83d\udd04 Batch Processing Examples","text":""},{"location":"quick-start/examples/#example-10-department-reports","title":"Example 10: Department Reports","text":"<p>Process reports for multiple departments.</p> <pre><code>#!/bin/bash\n# Process all department reports\n\nDEPARTMENTS=(\"Sales\" \"Marketing\" \"Finance\" \"HR\" \"Operations\")\nTEMPLATE=\"modern\"\nOUTPUT_DIR=\"./department_reports/\"\n\nmkdir -p \"$OUTPUT_DIR\"\n\nfor dept in \"${DEPARTMENTS[@]}\"; do\n    echo \"\ud83d\udcca Processing $dept Department...\"\n\n    input_file=\"./source_reports/${dept}-Report.xlsx\"\n    output_file=\"${OUTPUT_DIR}${dept}-Report.pdf\"\n\n    if [ -f \"$input_file\" ]; then\n        exc-to-pdf convert \"$input_file\" \"$output_file\" \\\n            --template \"$TEMPLATE\" \\\n            --orientation portrait \\\n            --verbose\n    else\n        echo \"\u26a0\ufe0f  File not found: $input_file\"\n    fi\ndone\n\necho \"\u2705 Department reports processing completed!\"\n</code></pre>"},{"location":"quick-start/examples/#example-11-time-based-processing","title":"Example 11: Time-Based Processing","text":"<p>Process files based on creation/modification time.</p> <pre><code>import os\nimport time\nfrom datetime import datetime, timedelta\nfrom pathlib import Path\nfrom exc_to_pdf import PDFGenerator\n\ndef process_recent_files(input_dir, output_dir, days=7):\n    \"\"\"Process Excel files modified in the last N days\"\"\"\n    generator = PDFGenerator()\n\n    cutoff_date = datetime.now() - timedelta(days=days)\n    input_path = Path(input_dir)\n    output_path = Path(output_dir)\n\n    output_path.mkdir(parents=True, exist_ok=True)\n\n    processed_count = 0\n\n    for excel_file in input_path.glob(\"*.xlsx\"):\n        # Check file modification time\n        mod_time = datetime.fromtimestamp(excel_file.stat().st_mtime)\n\n        if mod_time &gt; cutoff_date:\n            print(f\"\ud83d\udcc4 Processing: {excel_file.name}\")\n\n            output_file = output_path / f\"{excel_file.stem}.pdf\"\n\n            try:\n                generator.convert_excel_to_pdf(\n                    input_file=str(excel_file),\n                    output_file=str(output_file)\n                )\n                processed_count += 1\n                print(f\"\u2705 Converted: {excel_file.name}\")\n\n            except Exception as e:\n                print(f\"\u274c Failed: {excel_file.name} - {e}\")\n\n    print(f\"\\n\ud83c\udfaf Processed {processed_count} recent files\")\n\n# Usage - process files from last 7 days\nprocess_recent_files(\"./incoming_reports/\", \"./recent_pdfs/\", days=7)\n</code></pre>"},{"location":"quick-start/examples/#advanced-configuration-examples","title":"\ud83d\udd27 Advanced Configuration Examples","text":""},{"location":"quick-start/examples/#example-12-custom-template-workflow","title":"Example 12: Custom Template Workflow","text":"<p>Create a workflow with different templates for different content types.</p> <pre><code>from exc_to_pdf import PDFGenerator\nfrom pathlib import Path\nimport os\n\ndef intelligent_conversion(input_dir, output_dir):\n    \"\"\"Convert files with appropriate templates based on content\"\"\"\n\n    # Template selection rules\n    template_rules = {\n        \"financial\": \"classic\",\n        \"dashboard\": \"modern\",\n        \"data\": \"minimal\",\n        \"report\": \"modern\"\n    }\n\n    generator = PDFGenerator()\n    output_path = Path(output_dir)\n    output_path.mkdir(parents=True, exist_ok=True)\n\n    for excel_file in Path(input_dir).glob(\"*.xlsx\"):\n        filename = excel_file.name.lower()\n\n        # Determine template based on filename\n        selected_template = \"modern\"  # default\n        for keyword, template in template_rules.items():\n            if keyword in filename:\n                selected_template = template\n                break\n\n        print(f\"\ud83d\udcc4 {excel_file.name} \u2192 Template: {selected_template}\")\n\n        output_file = output_path / f\"{excel_file.stem}.pdf\"\n\n        try:\n            generator.convert_excel_to_pdf(\n                input_file=str(excel_file),\n                output_file=str(output_file),\n                template=selected_template\n            )\n            print(f\"\u2705 Converted with {selected_template} template\")\n\n        except Exception as e:\n            print(f\"\u274c Failed: {e}\")\n\n# Usage\nintelligent_conversion(\"./mixed_reports/\", \"./smart_output/\")\n</code></pre>"},{"location":"quick-start/examples/#example-13-performance-monitoring","title":"Example 13: Performance Monitoring","text":"<p>Monitor conversion performance and statistics.</p> <pre><code>import time\nimport json\nfrom datetime import datetime\nfrom pathlib import Path\nfrom exc_to_pdf import PDFGenerator\n\nclass ConversionMonitor:\n    def __init__(self):\n        self.stats = {\n            \"total_files\": 0,\n            \"successful\": 0,\n            \"failed\": 0,\n            \"total_size_mb\": 0,\n            \"total_time\": 0,\n            \"files\": []\n        }\n\n    def convert_and_monitor(self, input_file, output_file, **kwargs):\n        \"\"\"Convert file while monitoring performance\"\"\"\n        generator = PDFGenerator()\n\n        input_path = Path(input_file)\n        output_path = Path(output_file)\n\n        # Record start\n        start_time = time.time()\n        input_size = input_path.stat().st_size / (1024 * 1024)\n\n        self.stats[\"total_files\"] += 1\n        self.stats[\"total_size_mb\"] += input_size\n\n        file_stats = {\n            \"filename\": input_path.name,\n            \"input_size_mb\": input_size,\n            \"start_time\": datetime.now().isoformat()\n        }\n\n        try:\n            generator.convert_excel_to_pdf(input_file, output_file, **kwargs)\n\n            # Record success\n            elapsed = time.time() - start_time\n            output_size = output_path.stat().st_size / (1024 * 1024)\n\n            file_stats.update({\n                \"status\": \"success\",\n                \"elapsed_time\": elapsed,\n                \"output_size_mb\": output_size,\n                \"compression_ratio\": output_size / input_size if input_size &gt; 0 else 0\n            })\n\n            self.stats[\"successful\"] += 1\n            self.stats[\"total_time\"] += elapsed\n\n            print(f\"\u2705 {input_path.name}: {elapsed:.1f}s, {output_size:.2f}MB\")\n\n        except Exception as e:\n            # Record failure\n            file_stats.update({\n                \"status\": \"failed\",\n                \"error\": str(e),\n                \"elapsed_time\": time.time() - start_time\n            })\n\n            self.stats[\"failed\"] += 1\n            print(f\"\u274c {input_path.name}: {e}\")\n\n        self.stats[\"files\"].append(file_stats)\n\n    def get_summary(self):\n        \"\"\"Get performance summary\"\"\"\n        if self.stats[\"total_files\"] == 0:\n            return \"No files processed\"\n\n        avg_time = self.stats[\"total_time\"] / self.stats[\"successful\"] if self.stats[\"successful\"] &gt; 0 else 0\n        success_rate = (self.stats[\"successful\"] / self.stats[\"total_files\"]) * 100\n\n        return {\n            \"total_files\": self.stats[\"total_files\"],\n            \"success_rate\": f\"{success_rate:.1f}%\",\n            \"total_input_size_mb\": f\"{self.stats['total_size_mb']:.2f}\",\n            \"average_time_per_file\": f\"{avg_time:.1f}s\",\n            \"total_time\": f\"{self.stats['total_time']:.1f}s\"\n        }\n\n    def save_report(self, report_file):\n        \"\"\"Save detailed report to JSON file\"\"\"\n        report = {\n            \"summary\": self.get_summary(),\n            \"details\": self.stats,\n            \"generated_at\": datetime.now().isoformat()\n        }\n\n        with open(report_file, 'w') as f:\n            json.dump(report, f, indent=2)\n\n        print(f\"\ud83d\udcca Report saved: {report_file}\")\n\n# Usage\nmonitor = ConversionMonitor()\n\n# Process files with monitoring\nfiles_to_process = [\n    (\"report1.xlsx\", \"report1.pdf\"),\n    (\"report2.xlsx\", \"report2.pdf\"),\n    (\"report3.xlsx\", \"report3.pdf\")\n]\n\nfor input_file, output_file in files_to_process:\n    monitor.convert_and_monitor(input_file, output_file, template=\"modern\")\n\n# Get summary and save report\nprint(\"\\n\ud83d\udcca Performance Summary:\")\nsummary = monitor.get_summary()\nfor key, value in summary.items():\n    print(f\"  {key}: {value}\")\n\nmonitor.save_report(\"conversion_report.json\")\n</code></pre>"},{"location":"quick-start/examples/#best-practices","title":"\ud83c\udfaf Best Practices","text":""},{"location":"quick-start/examples/#general-tips","title":"General Tips","text":"<ol> <li>Choose the right template:</li> <li><code>modern</code> for business reports</li> <li><code>classic</code> for academic/formal documents</li> <li> <p><code>minimal</code> for data-focused content</p> </li> <li> <p>Use appropriate orientation:</p> </li> <li><code>portrait</code> for standard reports</li> <li> <p><code>landscape</code> for wide tables/charts</p> </li> <li> <p>Monitor large conversions with <code>--verbose</code></p> </li> <li> <p>Process in batches for multiple files</p> </li> <li> <p>Test with sample files before processing important data</p> </li> </ol>"},{"location":"quick-start/examples/#performance-optimization","title":"Performance Optimization","text":"<pre><code># For faster processing of simple files\nexc-to-pdf convert simple.xlsx output.pdf \\\n  --template minimal \\\n  --no-bookmarks \\\n  --no-metadata \\\n  --quiet\n</code></pre>"},{"location":"quick-start/examples/#error-handling","title":"Error Handling","text":"<pre><code># Use verbose mode to debug issues\nexc-to-pdf convert problem.xlsx output.pdf --verbose\n\n# Check file permissions first\nls -la input.xlsx\nls -la output_directory/\n</code></pre> <p>Try these examples!</p> <p>Copy and modify these examples for your specific use cases. Each example can be adapted to your data and requirements.</p> <p>Need more help? Check the User Guide or open an issue.</p>"},{"location":"quick-start/installation/","title":"Installation","text":""},{"location":"quick-start/installation/#installation","title":"Installation","text":"<p>This guide covers all installation methods for exc-to-pdf, from simple pip installation to development setup.</p>"},{"location":"quick-start/installation/#system-requirements","title":"\ud83d\udccb System Requirements","text":""},{"location":"quick-start/installation/#minimum-requirements","title":"Minimum Requirements","text":"<ul> <li>Python: 3.9 or higher</li> <li>Operating System: Windows 10+, macOS 10.14+, or Linux (Ubuntu 18.04+)</li> <li>RAM: 4GB minimum, 8GB recommended for large files</li> <li>Storage: 2x the size of your largest Excel file</li> </ul>"},{"location":"quick-start/installation/#recommended-setup","title":"Recommended Setup","text":"<ul> <li>Python: 3.11+ (for best performance)</li> <li>RAM: 16GB+ (for files &gt;50MB)</li> <li>SSD Storage: For faster file processing</li> </ul>"},{"location":"quick-start/installation/#checking-python-version","title":"Checking Python Version","text":"<pre><code># Check Python version\npython --version\n\n# Should show 3.9 or higher\nPython 3.11.5\n</code></pre> <p>If you don't have Python installed:</p> WindowsmacOSLinux (Ubuntu/Debian) <ol> <li>Download from python.org</li> <li>Run the installer</li> <li>Check \"Add Python to PATH\" during installation</li> <li>Restart Command Prompt</li> </ol> <pre><code># Using Homebrew (recommended)\nbrew install python@3.11\n\n# Or download from python.org\n</code></pre> <pre><code>sudo apt update\nsudo apt install python3.11 python3.11-pip python3.11-venv\n</code></pre>"},{"location":"quick-start/installation/#installation-methods","title":"\ud83d\ude80 Installation Methods","text":""},{"location":"quick-start/installation/#method-1-pip-install-recommended","title":"Method 1: pip install (Recommended)","text":"<p>For most users, the simplest installation method:</p> <pre><code># Install from PyPI\npip install exc-to-pdf\n\n# Verify installation\nexc-to-pdf --version\n</code></pre> <p>Pros: * Simple and fast * Automatic dependency management * Easy updates with <code>pip install --upgrade exc-to-pdf</code></p> <p>Cons: * Latest features may not be available immediately * Cannot modify source code</p>"},{"location":"quick-start/installation/#method-2-development-installation","title":"Method 2: Development Installation","text":"<p>For developers or users who need the latest features:</p> <pre><code># Clone the repository\ngit clone https://github.com/exc-to-pdf/exc-to-pdf.git\ncd exc-to-pdf\n\n# Create virtual environment\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install in development mode\npip install -e \".[dev]\"\n\n# Verify installation\nexc-to-pdf --version\n</code></pre> <p>Pros: * Access to latest features * Can modify source code * Includes development dependencies</p> <p>Cons: * More complex setup * Requires git and virtual environment</p>"},{"location":"quick-start/installation/#method-3-from-source","title":"Method 3: From Source","text":"<p>Install directly from source without development dependencies:</p> <pre><code># Clone the repository\ngit clone https://github.com/exc-to-pdf/exc-to-pdf.git\ncd exc-to-pdf\n\n# Install package\npip install .\n\n# Verify installation\nexc-to-pdf --version\n</code></pre>"},{"location":"quick-start/installation/#virtual-environment-setup","title":"\ud83d\udc0d Virtual Environment Setup","text":"<p>Using virtual environments is highly recommended to avoid conflicts.</p>"},{"location":"quick-start/installation/#creating-a-virtual-environment","title":"Creating a Virtual Environment","text":"<pre><code># Create virtual environment\npython -m venv exc-to-pdf-env\n\n# Activate environment\n# On Windows\nexc-to-pdf-env\\Scripts\\activate\n\n# On macOS/Linux\nsource exc-to-pdf-env/bin/activate\n</code></pre>"},{"location":"quick-start/installation/#installing-in-virtual-environment","title":"Installing in Virtual Environment","text":"<pre><code># Install exc-to-pdf\npip install exc-to-pdf\n\n# Verify installation\nexc-to-pdf --version\n\n# Deactivate when done\ndeactivate\n</code></pre>"},{"location":"quick-start/installation/#dependencies","title":"\ud83d\udd27 Dependencies","text":"<p>exc-to-pdf automatically installs these core dependencies:</p>"},{"location":"quick-start/installation/#core-dependencies","title":"Core Dependencies","text":"Package Version Purpose <code>openpyxl</code> \u22653.1.0 Excel file reading <code>pandas</code> \u22652.0.0 Data processing <code>reportlab</code> \u22654.0.0 PDF generation <code>Pillow</code> \u226510.0.0 Image handling <code>click</code> \u22658.0.0 CLI interface <code>structlog</code> \u226523.0.0 Structured logging"},{"location":"quick-start/installation/#optional-dependencies","title":"Optional Dependencies","text":"<p>For development installation:</p> Package Purpose <code>pytest</code> Testing framework <code>black</code> Code formatting <code>mypy</code> Type checking <code>mkdocs</code> Documentation <code>mkdocs-material</code> Documentation theme"},{"location":"quick-start/installation/#installation-verification","title":"\u2705 Installation Verification","text":"<p>After installation, verify everything works correctly:</p>"},{"location":"quick-start/installation/#basic-commands","title":"Basic Commands","text":"<pre><code># Check version\nexc-to-pdf --version\n\n# Show help\nexc-to-pdf --help\n\n# Test conversion (create a simple test file first)\necho \"Test,Data\\n1,2\\n3,4\" &gt; test.csv\n# Convert to Excel first, then to PDF\n</code></pre>"},{"location":"quick-start/installation/#python-api-test","title":"Python API Test","text":"<pre><code># Create a simple test script\npython -c \"\nimport sys\ntry:\n    from exc_to_pdf import PDFGenerator\n    print('\u2705 exc-to-pdf imported successfully')\n    print('\u2705 PDFGenerator class available')\n    print('\u2705 Installation verified!')\nexcept ImportError as e:\n    print(f'\u274c Import failed: {e}')\n    sys.exit(1)\n\"\n</code></pre>"},{"location":"quick-start/installation/#dependency-check","title":"Dependency Check","text":"<pre><code># Check all dependencies\npython -c \"\nimport sys\nrequired_packages = ['openpyxl', 'pandas', 'reportlab', 'Pillow', 'click', 'structlog']\nmissing = []\n\nfor package in required_packages:\n    try:\n        __import__(package)\n        print(f'\u2705 {package}')\n    except ImportError:\n        missing.append(package)\n        print(f'\u274c {package}')\n\nif missing:\n    print(f'\\\\n\u274c Missing packages: {missing}')\n    sys.exit(1)\nelse:\n    print('\\\\n\u2705 All dependencies satisfied!')\n\"\n</code></pre>"},{"location":"quick-start/installation/#updating-exc-to-pdf","title":"\ud83d\udd04 Updating exc-to-pdf","text":""},{"location":"quick-start/installation/#pip-installation","title":"pip Installation","text":"<pre><code># Update to latest version\npip install --upgrade exc-to-pdf\n\n# Check version after update\nexc-to-pdf --version\n</code></pre>"},{"location":"quick-start/installation/#development-installation","title":"Development Installation","text":"<pre><code># Pull latest changes\ngit pull origin main\n\n# Update dependencies\npip install -e \".[dev]\"\n\n# Verify update\nexc-to-pdf --version\n</code></pre>"},{"location":"quick-start/installation/#uninstallation","title":"\ud83d\uddd1\ufe0f Uninstallation","text":""},{"location":"quick-start/installation/#standard-uninstallation","title":"Standard Uninstallation","text":"<pre><code># Remove package\npip uninstall exc-to-pdf\n\n# Verify removal\npython -c \"import exc_to_pdf\" 2&gt;/dev/null &amp;&amp; echo \"Still installed\" || echo \"Successfully removed\"\n</code></pre>"},{"location":"quick-start/installation/#development-uninstallation","title":"Development Uninstallation","text":"<pre><code># Remove package\npip uninstall exc-to-pdf\n\n# Remove virtual environment (optional)\nrm -rf exc-to-pdf-env\n\n# Remove source code (optional)\nrm -rf exc-to-pdf\n</code></pre>"},{"location":"quick-start/installation/#troubleshooting-installation","title":"\ud83d\udd0d Troubleshooting Installation","text":""},{"location":"quick-start/installation/#issue-1-python-not-found","title":"Issue 1: Python Not Found","text":"<p>Error: <code>python: command not found</code></p> <p>Solution: 1. Install Python from python.org 2. Add Python to PATH during installation 3. Restart your terminal</p>"},{"location":"quick-start/installation/#issue-2-pip-not-found","title":"Issue 2: pip Not Found","text":"<p>Error: <code>pip: command not found</code></p> <p>Solution: </p><pre><code># Ensure pip is installed and up to date\npython -m ensurepip --upgrade\npython -m pip install --upgrade pip\n</code></pre><p></p>"},{"location":"quick-start/installation/#issue-3-permission-errors","title":"Issue 3: Permission Errors","text":"<p>Error: <code>Permission denied</code> during installation</p> <p>Solution: </p><pre><code># Install in user directory (recommended)\npip install --user exc-to-pdf\n\n# Or use virtual environment\npython -m venv .venv\nsource .venv/bin/activate\npip install exc-to-pdf\n</code></pre><p></p>"},{"location":"quick-start/installation/#issue-4-build-failures","title":"Issue 4: Build Failures","text":"<p>Error: Compilation errors during installation</p> <p>Solution: </p><pre><code># Install build tools first\n# On Ubuntu/Debian\nsudo apt install build-essential python3-dev\n\n# On macOS\nxcode-select --install\n\n# Then retry installation\npip install exc-to-pdf\n</code></pre><p></p>"},{"location":"quick-start/installation/#issue-5-dependency-conflicts","title":"Issue 5: Dependency Conflicts","text":"<p>Error: Version conflicts with existing packages</p> <p>Solution: </p><pre><code># Use virtual environment to avoid conflicts\npython -m venv clean-env\nsource clean-env/bin/activate\npip install exc-to-pdf\n</code></pre><p></p>"},{"location":"quick-start/installation/#offline-installation","title":"\ud83c\udf10 Offline Installation","text":"<p>For systems without internet access:</p>"},{"location":"quick-start/installation/#downloading-packages","title":"Downloading Packages","text":"<pre><code># Download package and dependencies\npip download exc-to-pdf -d ./packages\n\n# Transfer packages to offline system\n# On offline system:\npip install exc-to-pdf --no-index --find-links ./packages\n</code></pre>"},{"location":"quick-start/installation/#using-wheels","title":"Using Wheels","text":"<pre><code># Download wheel files\npip download --no-deps exc-to-pdf -d ./wheels\n\n# Install from wheels on offline system\npip install exc-to-pdf --no-index --find-links ./wheels\n</code></pre>"},{"location":"quick-start/installation/#post-installation-checklist","title":"\u2705 Post-Installation Checklist","text":"<p>After installation, verify:</p> <ul> <li> Python 3.9+ is available</li> <li> exc-to-pdf is installed (<code>exc-to-pdf --version</code>)</li> <li> Core dependencies are satisfied</li> <li> CLI commands work without errors</li> <li> Python API imports successfully</li> <li> Virtual environment is set up (recommended)</li> </ul>"},{"location":"quick-start/installation/#next-steps","title":"\ud83c\udfaf Next Steps","text":"<p>With exc-to-pdf installed, you're ready to:</p> <ul> <li>Start Converting Files - Your first conversion</li> <li>Explore Examples - Practical use cases</li> <li>Read User Guide - Advanced features</li> </ul> <p>Installation Complete!</p> <p>You have successfully installed exc-to-pdf! \ud83c\udf89</p> <p>Ready to convert your first Excel file? Start here \u2192</p>"},{"location":"user-guide/","title":"User Guide","text":""},{"location":"user-guide/#user-guide","title":"User Guide","text":"<p>Welcome to the comprehensive user guide for exc-to-pdf. This guide covers all aspects of using the tool, from basic operations to advanced configuration and optimization.</p>"},{"location":"user-guide/#guide-overview","title":"\ud83d\udcda Guide Overview","text":""},{"location":"user-guide/#sections","title":"Sections","text":"<ol> <li>CLI Reference - Complete command-line interface documentation</li> <li>Configuration - Advanced configuration options and customization</li> <li>Templates &amp; Styling - Template system and visual customization</li> <li>Performance - Performance optimization and resource management</li> <li>Troubleshooting - Common issues and solutions</li> </ol>"},{"location":"user-guide/#who-this-guide-is-for","title":"\ud83c\udfaf Who This Guide Is For","text":"<p>This guide is designed for:</p> <ul> <li>End Users who want to convert Excel files to PDF</li> <li>Power Users who need advanced configuration options</li> <li>Developers integrating exc-to-pdf into their workflows</li> <li>System Administrators managing batch processing</li> </ul>"},{"location":"user-guide/#quick-reference","title":"\ud83d\ude80 Quick Reference","text":""},{"location":"user-guide/#essential-commands","title":"Essential Commands","text":"<pre><code># Basic conversion\nexc-to-pdf convert input.xlsx output.pdf\n\n# With options\nexc-to-pdf convert input.xlsx output.pdf \\\n  --template modern \\\n  --orientation landscape \\\n  --sheet \"Specific Sheet\" \\\n  --verbose\n\n# Configuration management\nexc-to-pdf config validate config.toml\nexc-to-pdf config template --output my-config.toml\n</code></pre>"},{"location":"user-guide/#common-options","title":"Common Options","text":"Option Description Example <code>--template</code> PDF template style <code>--template modern</code> <code>--orientation</code> Page orientation <code>--orientation landscape</code> <code>--sheet</code> Specific worksheet <code>--sheet \"Sales Data\"</code> <code>--verbose</code> Detailed output <code>--verbose</code> <code>--quiet</code> Silent operation <code>--quiet</code> <code>--no-bookmarks</code> Disable bookmarks <code>--no-bookmarks</code> <code>--no-metadata</code> Disable metadata <code>--no-metadata</code>"},{"location":"user-guide/#usage-patterns","title":"\ud83d\udccb Usage Patterns","text":""},{"location":"user-guide/#pattern-1-single-file-conversion","title":"Pattern 1: Single File Conversion","text":"<p>For converting individual Excel files:</p> <pre><code># Quick conversion\nexc-to-pdf convert report.xlsx report.pdf\n\n# Professional report\nexc-to-pdf convert financial-report.pdf report.pdf \\\n  --template modern \\\n  --orientation portrait \\\n  --margin-top 80 \\\n  --margin-bottom 80\n</code></pre>"},{"location":"user-guide/#pattern-2-batch-processing","title":"Pattern 2: Batch Processing","text":"<p>For processing multiple files:</p> <pre><code>#!/bin/bash\n# Process all Excel files in directory\nfor file in *.xlsx; do\n    exc-to-pdf convert \"$file\" \"${file%.xlsx}.pdf\" \\\n        --template modern \\\n        --quiet\ndone\n</code></pre>"},{"location":"user-guide/#pattern-3-automated-workflows","title":"Pattern 3: Automated Workflows","text":"<p>For integration into automated systems:</p> <pre><code>from exc_to_pdf import PDFGenerator\nimport os\n\ndef automated_conversion(input_dir, output_dir):\n    \"\"\"Automated conversion for CI/CD pipelines\"\"\"\n    generator = PDFGenerator()\n\n    for filename in os.listdir(input_dir):\n        if filename.endswith('.xlsx'):\n            input_path = os.path.join(input_dir, filename)\n            output_path = os.path.join(output_dir, filename.replace('.xlsx', '.pdf'))\n\n            try:\n                generator.convert_excel_to_pdf(input_path, output_path)\n                print(f\"\u2705 Converted: {filename}\")\n            except Exception as e:\n                print(f\"\u274c Failed: {filename} - {e}\")\n                # In automated workflows, you might want to:\n                # - Log the error\n                # - Send notifications\n                # - Fail the pipeline\n                raise\n</code></pre>"},{"location":"user-guide/#template-selection-guide","title":"\ud83c\udfa8 Template Selection Guide","text":""},{"location":"user-guide/#modern-template","title":"Modern Template","text":"<p>Best for: * Business reports * Presentations * Professional documents</p> <p>Features: * Clean, contemporary design * Professional color scheme * Excellent readability</p> <pre><code>exc-to-pdf convert data.xlsx output.pdf --template modern\n</code></pre>"},{"location":"user-guide/#classic-template","title":"Classic Template","text":"<p>Best for: * Academic papers * Formal documents * Traditional reports</p> <p>Features: * Timeless design * Black and white color scheme * Academic formatting</p> <pre><code>exc-to-pdf convert research.xlsx output.pdf --template classic\n</code></pre>"},{"location":"user-guide/#minimal-template","title":"Minimal Template","text":"<p>Best for: * Data-focused documents * Simple conversions * Fast processing</p> <p>Features: * Uncluttered layout * Minimal styling * Content-focused</p> <pre><code>exc-to-pdf convert data.xlsx output.pdf --template minimal\n</code></pre>"},{"location":"user-guide/#layout-optimization","title":"\ud83d\udcd0 Layout Optimization","text":""},{"location":"user-guide/#portrait-vs-landscape","title":"Portrait vs Landscape","text":"<p>Portrait (Default): * Standard documents * Reports with text * Most business documents</p> <p>Landscape: * Wide tables * Financial statements * Charts and graphics</p>"},{"location":"user-guide/#margin-guidelines","title":"Margin Guidelines","text":"Document Type Top/Bottom Left/Right Standard Reports 72pt (1\") 72pt (1\") Formal Documents 90pt (1.25\") 72pt (1\") Data-Heavy 50pt (0.7\") 40pt (0.55\") Presentations 60pt (0.83\") 60pt (0.83\") <pre><code># Example: Formal document margins\nexc-to-pdf convert document.pdf output.pdf \\\n  --margin-top 90 \\\n  --margin-bottom 90 \\\n  --margin-left 72 \\\n  --margin-right 72\n</code></pre>"},{"location":"user-guide/#configuration-management","title":"\ud83d\udd27 Configuration Management","text":""},{"location":"user-guide/#configuration-file-usage","title":"Configuration File Usage","text":"<p>Create reusable configurations:</p> <pre><code># company-config.toml\n[page]\ntemplate = \"modern\"\norientation = \"portrait\"\nmargin_top = 80\nmargin_bottom = 80\nmargin_left = 72\nmargin_right = 72\n\n[features]\ninclude_bookmarks = true\ninclude_metadata = true\noptimize_for_ai = true\n\n[output]\ncompression = true\nquality = \"high\"\n</code></pre> <pre><code># Use configuration file\nexc-to-pdf convert input.xlsx output.pdf --config company-config.toml\n</code></pre>"},{"location":"user-guide/#environment-specific-configurations","title":"Environment-Specific Configurations","text":"<p>Development: </p><pre><code># dev-config.toml\n[page]\ntemplate = \"minimal\"\n[features]\ninclude_bookmarks = false\n</code></pre><p></p> <p>Production: </p><pre><code># prod-config.toml\n[page]\ntemplate = \"modern\"\n[features]\ninclude_bookmarks = true\ninclude_metadata = true\n</code></pre><p></p>"},{"location":"user-guide/#performance-considerations","title":"\ud83d\udcca Performance Considerations","text":""},{"location":"user-guide/#file-size-management","title":"File Size Management","text":"Excel Size Expected PDF Size Processing Time &lt; 1 MB 0.3-0.7 MB &lt; 5 seconds 1-10 MB 0.5-2 MB 5-30 seconds 10-50 MB 1-5 MB 30-120 seconds &gt; 50 MB 2-10 MB 2+ minutes"},{"location":"user-guide/#memory-usage","title":"Memory Usage","text":"<ul> <li>Base Memory: ~100MB</li> <li>Per MB Excel: ~2-4MB additional RAM</li> <li>Peak Memory: Base + (Excel size \u00d7 3)</li> </ul> <pre><code># Monitor memory usage on large files\nexc-to-pdf convert large.xlsx output.pdf --verbose\n\n# Use minimal template for lower memory usage\nexc-to-pdf convert large.xlsx output.pdf --template minimal --no-bookmarks\n</code></pre>"},{"location":"user-guide/#troubleshooting-quick-reference","title":"\ud83d\udd0d Troubleshooting Quick Reference","text":""},{"location":"user-guide/#common-issues","title":"Common Issues","text":"<p>Issue: File not found </p><pre><code># Solution: Use absolute paths\nexc-to-pdf convert /full/path/to/file.xlsx output.pdf\n</code></pre><p></p> <p>Issue: Permission denied </p><pre><code># Solution: Check permissions or use different output directory\nexc-to-pdf convert input.xlsx ~/output.pdf\n</code></pre><p></p> <p>Issue: Out of memory </p><pre><code># Solution: Use minimal template\nexc-to-pdf convert large.xlsx output.pdf --template minimal --no-bookmarks\n</code></pre><p></p> <p>Issue: Poor formatting </p><pre><code># Solution: Try different templates or orientation\nexc-to-pdf convert data.xlsx output.pdf --template modern --orientation landscape\n</code></pre><p></p>"},{"location":"user-guide/#best-practices","title":"\ud83c\udfaf Best Practices","text":""},{"location":"user-guide/#before-conversion","title":"Before Conversion","text":"<ol> <li>Check Excel file integrity</li> <li>Verify sufficient disk space (2x Excel file size)</li> <li>Close other applications for large files</li> <li>Test with sample data first</li> </ol>"},{"location":"user-guide/#during-conversion","title":"During Conversion","text":"<ol> <li>Use verbose mode for large files</li> <li>Monitor system resources</li> <li>Save intermediate results for batch processing</li> </ol>"},{"location":"user-guide/#after-conversion","title":"After Conversion","text":"<ol> <li>Verify PDF integrity</li> <li>Check file size (unusually small = error)</li> <li>Test in Google NotebookLM if that's your target</li> <li>Backup important conversions</li> </ol>"},{"location":"user-guide/#integration-examples","title":"\ud83d\udd17 Integration Examples","text":""},{"location":"user-guide/#shell-script-integration","title":"Shell Script Integration","text":"<pre><code>#!/bin/bash\n# daily-reports.sh - Convert daily Excel reports\n\nREPORTS_DIR=\"/path/to/daily_reports\"\nOUTPUT_DIR=\"/path/to/pdf_output\"\nCONFIG_FILE=\"/path/to/config.toml\"\n\n# Create timestamped output directory\nTIMESTAMP=$(date +\"%Y-%m-%d\")\nTODAY_OUTPUT=\"$OUTPUT_DIR/$TIMESTAMP\"\nmkdir -p \"$TODAY_OUTPUT\"\n\necho \"\ud83d\udcca Processing daily reports for $TIMESTAMP\"\n\n# Process all Excel files\nfor excel_file in \"$REPORTS_DIR\"/*.xlsx; do\n    if [ -f \"$excel_file\" ]; then\n        filename=$(basename \"$excel_file\" .xlsx)\n        pdf_file=\"$TODAY_OUTPUT/${filename}.pdf\"\n\n        echo \"\ud83d\udd04 Converting: $filename\"\n\n        exc-to-pdf convert \"$excel_file\" \"$pdf_file\" \\\n            --config \"$CONFIG_FILE\" \\\n            --verbose\n\n        if [ $? -eq 0 ]; then\n            echo \"\u2705 Success: $filename\"\n        else\n            echo \"\u274c Failed: $filename\"\n        fi\n    fi\ndone\n\necho \"\ud83c\udfaf Daily reports processing completed\"\n</code></pre>"},{"location":"user-guide/#python-integration","title":"Python Integration","text":"<pre><code># excel_to_pdf_service.py - Service for Excel to PDF conversion\n\nimport os\nimport logging\nfrom pathlib import Path\nfrom typing import List, Optional\nfrom exc_to_pdf import PDFGenerator\n\nclass ExcelToPDFService:\n    \"\"\"Service class for Excel to PDF conversions\"\"\"\n\n    def __init__(self, config_path: Optional[str] = None):\n        self.generator = PDFGenerator()\n        self.logger = logging.getLogger(__name__)\n        logging.basicConfig(level=logging.INFO)\n\n    def convert_file(self, input_path: str, output_path: str, **kwargs) -&gt; bool:\n        \"\"\"Convert single Excel file to PDF\"\"\"\n        try:\n            self.logger.info(f\"Converting: {input_path}\")\n            self.generator.convert_excel_to_pdf(input_path, output_path, **kwargs)\n            self.logger.info(f\"Success: {output_path}\")\n            return True\n        except Exception as e:\n            self.logger.error(f\"Failed to convert {input_path}: {e}\")\n            return False\n\n    def convert_directory(self, input_dir: str, output_dir: str,\n                         pattern: str = \"*.xlsx\", **kwargs) -&gt; List[str]:\n        \"\"\"Convert all Excel files in directory\"\"\"\n        input_path = Path(input_dir)\n        output_path = Path(output_dir)\n\n        output_path.mkdir(parents=True, exist_ok=True)\n\n        converted_files = []\n        failed_files = []\n\n        for excel_file in input_path.glob(pattern):\n            pdf_file = output_path / f\"{excel_file.stem}.pdf\"\n\n            if self.convert_file(str(excel_file), str(pdf_file), **kwargs):\n                converted_files.append(str(pdf_file))\n            else:\n                failed_files.append(str(excel_file))\n\n        self.logger.info(f\"Converted: {len(converted_files)}, Failed: {len(failed_files)}\")\n        return converted_files\n\n# Usage example\nif __name__ == \"__main__\":\n    service = ExcelToPDFService()\n\n    # Convert single file\n    service.convert_file(\"data.xlsx\", \"output.pdf\", template=\"modern\")\n\n    # Convert directory\n    converted = service.convert_directory(\"./excel_files/\", \"./pdf_output/\")\n    print(f\"Converted {len(converted)} files\")\n</code></pre>"},{"location":"user-guide/#additional-resources","title":"\ud83d\udcda Additional Resources","text":"<ul> <li>CLI Reference - Complete command documentation</li> <li>Configuration Guide - Advanced configuration options</li> <li>Performance Optimization - Performance tuning</li> <li>Troubleshooting - Common issues and solutions</li> </ul> <p>Need Help?</p> <ul> <li>Check the troubleshooting guide for common issues</li> <li>Review the CLI reference for detailed command options</li> <li>Open an issue for bugs or feature requests</li> </ul>"},{"location":"user-guide/cli-reference/","title":"CLI Reference","text":""},{"location":"user-guide/cli-reference/#cli-reference","title":"CLI Reference","text":"<p>This page provides comprehensive documentation for the exc-to-pdf command-line interface, including all commands, options, and usage examples.</p>"},{"location":"user-guide/cli-reference/#commands-overview","title":"\ud83d\udccb Commands Overview","text":"<p>exc-to-pdf provides a hierarchical command structure:</p> <pre><code>exc-to-pdf [GLOBAL_OPTIONS] COMMAND [COMMAND_OPTIONS] [ARGUMENTS]\n</code></pre>"},{"location":"user-guide/cli-reference/#available-commands","title":"Available Commands","text":"<ul> <li><code>convert</code> - Convert Excel files to PDF</li> <li><code>config</code> - Configuration management</li> <li><code>validate</code> - Validate configuration files</li> <li><code>template</code> - Generate configuration templates</li> </ul>"},{"location":"user-guide/cli-reference/#global-options","title":"\ud83c\udf10 Global Options","text":"<p>These options apply to all commands:</p> Option Short Description Example <code>--verbose</code> <code>-v</code> Enable detailed output <code>--verbose</code> <code>--quiet</code> <code>-q</code> Suppress output except errors <code>--quiet</code> <code>--version</code> Show version information <code>--version</code> <code>--help</code> <code>-h</code> Show help message <code>--help</code>"},{"location":"user-guide/cli-reference/#usage-examples","title":"Usage Examples","text":"<pre><code># Show version\nexc-to-pdf --version\n\n# Enable verbose output for all commands\nexc-to-pdf --verbose convert data.xlsx output.pdf\n\n# Suppress output\nexc-to-pdf --quiet convert data.xlsx output.pdf\n\n# Get help\nexc-to-pdf --help\nexc-to-pdf convert --help\n</code></pre>"},{"location":"user-guide/cli-reference/#convert-command","title":"\ud83d\udd04 Convert Command","text":"<p>The <code>convert</code> command is the primary command for converting Excel files to PDF.</p>"},{"location":"user-guide/cli-reference/#syntax","title":"Syntax","text":"<pre><code>exc-to-pdf convert [OPTIONS] INPUT_FILE [OUTPUT_FILE]\n</code></pre>"},{"location":"user-guide/cli-reference/#arguments","title":"Arguments","text":"Argument Description Required Example <code>INPUT_FILE</code> Path to Excel file to convert Yes <code>data.xlsx</code> <code>OUTPUT_FILE</code> Path for output PDF file No <code>output.pdf</code>"},{"location":"user-guide/cli-reference/#options","title":"Options","text":"Option Short Type Default Description <code>--config</code> <code>-c</code> PATH None Path to configuration file <code>--template</code> <code>-t</code> CHOICE <code>modern</code> PDF template style <code>--orientation</code> <code>-o</code> CHOICE <code>portrait</code> Page orientation <code>--sheet</code> <code>-s</code> STRING None Specific worksheet name <code>--no-bookmarks</code> FLAG False Disable bookmark generation <code>--no-metadata</code> FLAG False Disable AI metadata <code>--margin-top</code> FLOAT 72 Top margin in points <code>--margin-bottom</code> FLOAT 72 Bottom margin in points <code>--margin-left</code> FLOAT 72 Left margin in points <code>--margin-right</code> FLOAT 72 Right margin in points"},{"location":"user-guide/cli-reference/#template-choices","title":"Template Choices","text":"Value Description <code>modern</code> Clean, contemporary design (default) <code>classic</code> Traditional, formal appearance <code>minimal</code> Simple, uncluttered layout"},{"location":"user-guide/cli-reference/#orientation-choices","title":"Orientation Choices","text":"Value Description <code>portrait</code> Standard vertical orientation (default) <code>landscape</code> Horizontal orientation for wide content"},{"location":"user-guide/cli-reference/#examples","title":"Examples","text":""},{"location":"user-guide/cli-reference/#basic-conversion","title":"Basic Conversion","text":"<pre><code># Simple conversion\nexc-to-pdf convert data.xlsx output.pdf\n\n# Convert with automatic output naming\nexc-to-pdf convert report.xlsx\n# Creates report.pdf\n</code></pre>"},{"location":"user-guide/cli-reference/#template-selection","title":"Template Selection","text":"<pre><code># Use modern template\nexc-to-pdf convert data.xlsx output.pdf --template modern\n\n# Use classic template\nexc-to-pdf convert data.xlsx output.pdf --template classic\n\n# Use minimal template\nexc-to-pdf convert data.xlsx output.pdf --template minimal\n</code></pre>"},{"location":"user-guide/cli-reference/#page-configuration","title":"Page Configuration","text":"<pre><code># Landscape orientation\nexc-to-pdf convert wide-data.xlsx output.pdf --orientation landscape\n\n# Custom margins (in points)\nexc-to-pdf convert data.xlsx output.pdf \\\n  --margin-top 50 \\\n  --margin-bottom 50 \\\n  --margin-left 40 \\\n  --margin-right 40\n</code></pre>"},{"location":"user-guide/cli-reference/#worksheet-selection","title":"Worksheet Selection","text":"<pre><code># Convert specific worksheet\nexc-to-pdf convert workbook.xlsx output.pdf --sheet \"Sales Data\"\n\n# Convert worksheet with spaces\nexc-to-pdf convert workbook.xlsx output.pdf --sheet \"Q4 Results\"\n</code></pre>"},{"location":"user-guide/cli-reference/#feature-control","title":"Feature Control","text":"<pre><code># Disable bookmarks\nexc-to-pdf convert data.xlsx output.pdf --no-bookmarks\n\n# Disable metadata\nexc-to-pdf convert data.xlsx output.pdf --no-metadata\n\n# Disable both features\nexc-to-pdf convert data.xlsx output.pdf --no-bookmarks --no-metadata\n</code></pre>"},{"location":"user-guide/cli-reference/#configuration-file","title":"Configuration File","text":"<pre><code># Use configuration file\nexc-to-pdf convert data.xlsx output.pdf --config my-config.toml\n\n# Configuration file example (my-config.toml)\n[page]\ntemplate = \"modern\"\norientation = \"landscape\"\nmargin_top = 80\nmargin_bottom = 80\n\n[features]\ninclude_bookmarks = true\ninclude_metadata = true\n</code></pre>"},{"location":"user-guide/cli-reference/#verbosity-control","title":"Verbosity Control","text":"<pre><code># Verbose output (shows progress)\nexc-to-pdf convert large-file.xlsx output.pdf --verbose\n\n# Quiet output (silent except errors)\nexc-to-pdf convert data.xlsx output.pdf --quiet\n\n# Both verbose and quiet (quiet takes precedence)\nexc-to-pdf convert data.xlsx output.pdf --verbose --quiet\n</code></pre>"},{"location":"user-guide/cli-reference/#complex-example","title":"Complex Example","text":"<pre><code># Full example with all options\nexc-to-pdf convert \\\n  financial-report.xlsx \\\n  financial-report.pdf \\\n  --config company-config.toml \\\n  --template modern \\\n  --orientation landscape \\\n  --sheet \"Q4 Results\" \\\n  --margin-top 60 \\\n  --margin-bottom 60 \\\n  --margin-left 50 \\\n  --margin-right 50 \\\n  --verbose\n</code></pre>"},{"location":"user-guide/cli-reference/#config-command","title":"\u2699\ufe0f Config Command","text":"<p>The <code>config</code> command group provides configuration management utilities.</p>"},{"location":"user-guide/cli-reference/#config-validate","title":"Config Validate","text":"<p>Validate configuration files for syntax and correctness.</p>"},{"location":"user-guide/cli-reference/#syntax_1","title":"Syntax","text":"<pre><code>exc-to-pdf config validate [OPTIONS] --config CONFIG_FILE\n</code></pre>"},{"location":"user-guide/cli-reference/#options_1","title":"Options","text":"Option Short Type Required Description <code>--config</code> <code>-c</code> PATH Yes Configuration file to validate"},{"location":"user-guide/cli-reference/#examples_1","title":"Examples","text":"<pre><code># Validate configuration file\nexc-to-pdf config validate --config my-config.toml\n\n# Validate with verbose output\nexc-to-pdf --verbose config validate --config my-config.toml\n</code></pre>"},{"location":"user-guide/cli-reference/#validation-checks","title":"Validation Checks","text":"<p>The validation checks for:</p> <ul> <li>Syntax errors - Invalid TOML syntax</li> <li>Required fields - Missing required configuration</li> <li>Value validation - Invalid option values</li> <li>File references - Referenced files exist and are readable</li> </ul>"},{"location":"user-guide/cli-reference/#config-template","title":"Config Template","text":"<p>Generate configuration file templates for customization.</p>"},{"location":"user-guide/cli-reference/#syntax_2","title":"Syntax","text":"<pre><code>exc-to-pdf config template [OPTIONS]\n</code></pre>"},{"location":"user-guide/cli-reference/#options_2","title":"Options","text":"Option Short Type Default Description <code>--output</code> <code>-o</code> PATH <code>exc-to-pdf-config.toml</code> Output configuration file"},{"location":"user-guide/cli-reference/#examples_2","title":"Examples","text":"<pre><code># Generate default template\nexc-to-pdf config template\n\n# Generate with custom filename\nexc-to-pdf config template --output my-config.toml\n\n# Generate in specific directory\nexc-to-pdf config template --output ./config/production.toml\n</code></pre>"},{"location":"user-guide/cli-reference/#generated-template","title":"Generated Template","text":"<p>The generated template includes:</p> <pre><code># exc-to-pdf Configuration Template\n# Generated on: 2025-10-22\n\n[page]\n# Template style: modern, classic, minimal\ntemplate = \"modern\"\n\n# Page orientation: portrait, landscape\norientation = \"portrait\"\n\n# Margins in points (72 points = 1 inch)\nmargin_top = 72\nmargin_bottom = 72\nmargin_left = 72\nmargin_right = 72\n\n[features]\n# Include automatic bookmarks for navigation\ninclude_bookmarks = true\n\n# Include AI-optimized metadata\ninclude_metadata = true\n\n# Optimize for Google NotebookLM analysis\noptimize_for_notebooklm = true\n\n[processing]\n# Memory usage limit in MB (0 = no limit)\nmemory_limit = 0\n\n# Cache processed data for faster repeated conversions\nenable_cache = true\n\n# Maximum cache size in MB\ncache_size = 100\n\n[output]\n# PDF compression level: none, low, medium, high\ncompression = \"medium\"\n\n# Image quality for embedded images (1-100)\nimage_quality = 85\n\n# Embed fonts in PDF\nembed_fonts = true\n</code></pre>"},{"location":"user-guide/cli-reference/#exit-codes","title":"\ud83d\udcca Exit Codes","text":"<p>exc-to-pdf uses standard exit codes to indicate success or failure:</p> Exit Code Description <code>0</code> Success <code>1</code> General error <code>2</code> File not found or inaccessible <code>3</code> Configuration error <code>4</code> Permission denied <code>5</code> Memory or resource error <code>130</code> Interrupted (Ctrl+C)"},{"location":"user-guide/cli-reference/#using-exit-codes","title":"Using Exit Codes","text":"<pre><code># Check exit code in shell script\nexc-to-pdf convert data.xlsx output.pdf\nif [ $? -eq 0 ]; then\n    echo \"\u2705 Conversion successful\"\nelse\n    echo \"\u274c Conversion failed with exit code $?\"\nfi\n\n# Use in conditional\nexc-to-pdf convert data.xlsx output.pdf &amp;&amp; echo \"Success\" || echo \"Failed\"\n</code></pre>"},{"location":"user-guide/cli-reference/#environment-variables","title":"\ud83d\udd27 Environment Variables","text":"<p>exc-to-pdf can be configured using environment variables:</p> Variable Description Default Example <code>EXC_TO_PDF_CONFIG</code> Default configuration file path None <code>/path/to/config.toml</code> <code>EXC_TO_PDF_TEMPLATE</code> Default template style <code>modern</code> <code>classic</code> <code>EXC_TO_PDF_VERBOSE</code> Enable verbose output <code>false</code> <code>true</code> <code>EXC_TO_PDF_QUIET</code> Enable quiet mode <code>false</code> <code>true</code> <code>EXC_TO_PDF_CACHE_DIR</code> Cache directory <code>~/.exc-to-pdf/cache</code> <code>/tmp/cache</code>"},{"location":"user-guide/cli-reference/#usage-examples_1","title":"Usage Examples","text":"<pre><code># Set default template\nexport EXC_TO_PDF_TEMPLATE=classic\nexc-to-pdf convert data.xlsx output.pdf  # Uses classic template\n\n# Set default configuration\nexport EXC_TO_PDF_CONFIG=~/.exc-to-pdf/config.toml\nexc-to-pdf convert data.xlsx output.pdf  # Uses config file\n\n# Enable verbose output\nexport EXC_TO_PDF_VERBOSE=true\nexc-to-pdf convert data.xlsx output.pdf  # Verbose output\n\n# Temporary override\nEXC_TO_PDF_TEMPLATE=minimal exc-to-pdf convert data.xlsx output.pdf\n</code></pre>"},{"location":"user-guide/cli-reference/#output-formats","title":"\ud83d\udcdd Output Formats","text":""},{"location":"user-guide/cli-reference/#standard-output","title":"Standard Output","text":"<p>Normal operation produces status messages:</p> <pre><code>$ exc-to-pdf convert data.xlsx output.pdf\n\ud83d\udcc4 Converting: data.xlsx\n\ud83d\udcc4 Output:    output.pdf\n\ud83c\udfa8 Template:  modern\n\ud83d\udcd0 Orientation: portrait\n\ud83d\udd04 Processing Excel file...\n\u2705 Conversion completed successfully!\n\ud83d\udcca Output size: 2.34 MB\n</code></pre>"},{"location":"user-guide/cli-reference/#verbose-output","title":"Verbose Output","text":"<p>Verbose mode provides detailed progress information:</p> <pre><code>$ exc-to-pdf --verbose convert data.xlsx output.pdf\n\ud83d\udd27 Initializing PDF generator...\n\ud83d\udcc4 Converting: data.xlsx\n\ud83d\udcc4 Output:    output.pdf\n\ud83c\udfa8 Template:  modern\n\ud83d\udcd0 Orientation: portrait\n\ud83d\udccb Found 3 worksheets:\n  1. Sheet1\n  2. Sales Data\n  3. Summary\n\ud83d\udd04 Processing worksheet: Sheet1\n\ud83d\udcca Detected 1 table (15 rows \u00d7 8 columns)\n\ud83d\udcc4 Rendering table to PDF...\n\ud83d\udd04 Processing worksheet: Sales Data\n\ud83d\udcca Detected 1 table (245 rows \u00d7 12 columns)\n\ud83d\udcc4 Rendering table to PDF...\n\ud83d\udd04 Processing worksheet: Summary\n\ud83d\udcca Detected 2 tables (12 rows \u00d7 6 columns, 8 rows \u00d7 4 columns)\n\ud83d\udcc4 Rendering tables to PDF...\n\ud83d\udcd1 Creating bookmarks...\n\ud83c\udff7\ufe0f  Adding metadata for AI optimization...\n\u2705 Conversion completed successfully!\n\ud83d\udcca Output size: 4.67 MB\n\ud83d\udcc8 Processing time: 3.2 seconds\n</code></pre>"},{"location":"user-guide/cli-reference/#error-output","title":"Error Output","text":"<p>Error messages provide helpful context:</p> <pre><code>$ exc-to-pdf convert missing.xlsx output.pdf\n\u274c Error: File not found: missing.xlsx\n\n\ud83d\udca1 Suggestions:\n   \u2022 Check if the file exists and is readable\n   \u2022 Ensure the file is a valid Excel file (.xlsx, .xls)\n   \u2022 Try using the absolute file path\n</code></pre>"},{"location":"user-guide/cli-reference/#batch-processing","title":"\ud83d\udd04 Batch Processing","text":""},{"location":"user-guide/cli-reference/#shell-script-example","title":"Shell Script Example","text":"<pre><code>#!/bin/bash\n# batch-convert.sh - Convert multiple Excel files\n\nINPUT_DIR=\"./excel_files\"\nOUTPUT_DIR=\"./pdf_output\"\nCONFIG_FILE=\"./config.toml\"\n\n# Create output directory\nmkdir -p \"$OUTPUT_DIR\"\n\n# Process all Excel files\nfor excel_file in \"$INPUT_DIR\"/*.xlsx; do\n    if [ -f \"$excel_file\" ]; then\n        filename=$(basename \"$excel_file\" .xlsx)\n        pdf_file=\"$OUTPUT_DIR/${filename}.pdf\"\n\n        echo \"\ud83d\udd04 Converting: $filename\"\n\n        exc-to-pdf convert \"$excel_file\" \"$pdf_file\" \\\n            --config \"$CONFIG_FILE\" \\\n            --verbose\n\n        # Check exit code\n        if [ $? -eq 0 ]; then\n            echo \"\u2705 Success: $filename\"\n        else\n            echo \"\u274c Failed: $filename\"\n        fi\n    fi\ndone\n\necho \"\ud83c\udfaf Batch processing completed\"\n</code></pre>"},{"location":"user-guide/cli-reference/#find-command-example","title":"Find Command Example","text":"<pre><code># Convert all Excel files recursively\nfind . -name \"*.xlsx\" -type f -exec exc-to-pdf convert {} {}.pdf \\;\n\n# Convert with parallel processing (requires GNU parallel)\nfind . -name \"*.xlsx\" | parallel -j 4 exc-to-pdf convert {} {.}.pdf\n</code></pre>"},{"location":"user-guide/cli-reference/#troubleshooting-cli-issues","title":"\ud83d\udd0d Troubleshooting CLI Issues","text":""},{"location":"user-guide/cli-reference/#common-command-errors","title":"Common Command Errors","text":""},{"location":"user-guide/cli-reference/#file-not-found","title":"File Not Found","text":"<pre><code>$ exc-to-pdf convert non-existent.xlsx output.pdf\n\u274c Error: File not found: non-existent.xlsx\n\n# Solutions:\n# 1. Check file exists\nls -la non-existent.xlsx\n\n# 2. Use absolute path\nexc-to-pdf convert /full/path/to/file.xlsx output.pdf\n\n# 3. Check current directory\npwd\nls -la *.xlsx\n</code></pre>"},{"location":"user-guide/cli-reference/#permission-denied","title":"Permission Denied","text":"<pre><code>$ exc-to-pdf convert /protected/file.xlsx output.pdf\n\u274c Error: Permission denied: /protected/file.xlsx\n\n# Solutions:\n# 1. Check permissions\nls -la /protected/file.xlsx\n\n# 2. Use different output directory\nexc-to-pdf convert input.xlsx ~/output.pdf\n\n# 3. Fix permissions (if possible)\nchmod 644 /protected/file.xlsx\n</code></pre>"},{"location":"user-guide/cli-reference/#invalid-configuration","title":"Invalid Configuration","text":"<pre><code>$ exc-to-pdf convert data.xlsx output.pdf --config invalid.toml\n\u274c Error: Configuration validation failed: Invalid TOML syntax\n\n# Solutions:\n# 1. Validate configuration\nexc-to-pdf config validate --config invalid.toml\n\n# 2. Generate new template\nexc-to-pdf config template --output new-config.toml\n</code></pre>"},{"location":"user-guide/cli-reference/#debug-mode","title":"Debug Mode","text":"<p>For detailed troubleshooting, use verbose mode:</p> <pre><code># Enable verbose output\nexc-to-pdf --verbose convert problematic.xlsx output.pdf\n\n# Check configuration\nexc-to-pdf --verbose config validate --config config.toml\n</code></pre> <p>Need More Help?</p> <ul> <li>Check the User Guide for general usage information</li> <li>Review the Troubleshooting guide for common issues</li> <li>Open an issue for bugs or feature requests</li> </ul>"}]}